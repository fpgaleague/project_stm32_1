
project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800a6d0  0800a6d0  0001a6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae14  0800ae14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae14  0800ae14  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae14  0800ae14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae18  0800ae18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ae1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b48  200001e0  0800affc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d28  0800affc  00021d28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d5a  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ec  00000000  00000000  00041f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  00046350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  00047b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b01f  00000000  00000000  000491a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d053  00000000  00000000  000641bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098510  00000000  00000000  00081212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000754c  00000000  00000000  00119778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a6b4 	.word	0x0800a6b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a6b4 	.word	0x0800a6b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <BH1750_WriteCmd>:
#define  BH1750_WriADD       0x46
#define  BH1750_RedADD       0x47
       //写操作：010 0011 + 0 = 01000110 (0x46)
       //读操作：010 0011 + 1 = 01000111 (0x47)

void BH1750_WriteCmd(uint8_t cmd) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Master_Transmit(&hi2c1, BH1750_WriADD, &cmd, 1, HAL_MAX_DELAY);
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	2146      	movs	r1, #70	; 0x46
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <BH1750_WriteCmd+0x24>)
 8000f5c:	f001 fa46 	bl	80023ec <HAL_I2C_Master_Transmit>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20001ba8 	.word	0x20001ba8

08000f6c <BH1750_ReadData>:

//读取BH170数据,设备地址0x46
// 读取光照数据（2字节）
void BH1750_ReadData(uint8_t *data, uint8_t len) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Master_Receive(&hi2c1, BH1750_WriADD, data, len, HAL_MAX_DELAY);
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	9200      	str	r2, [sp, #0]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	2146      	movs	r1, #70	; 0x46
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <BH1750_ReadData+0x28>)
 8000f88:	f001 fb2e 	bl	80025e8 <HAL_I2C_Master_Receive>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20001ba8 	.word	0x20001ba8

08000f98 <BH1750_Init>:

void  BH1750_Init()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	BH1750_WriteCmd(0x01);// power on
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff ffd1 	bl	8000f44 <BH1750_WriteCmd>
	BH1750_WriteCmd(0x10);//H- resolution mode // 设置连续高精度模式
 8000fa2:	2010      	movs	r0, #16
 8000fa4:	f7ff ffce 	bl	8000f44 <BH1750_WriteCmd>
	HAL_Delay(180);  // 等待首次测量完成
 8000fa8:	20b4      	movs	r0, #180	; 0xb4
 8000faa:	f000 fda1 	bl	8001af0 <HAL_Delay>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <AHT20_Init>:

//发送7位从机地址（如AHT20的0x38） + 写位0，组成8位数据（0x70）。
#define AHT20_ADDRESS  0x70

//AHT20初始化
void  AHT20_Init() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
      uint8_t readBuffer;

      HAL_Delay(40);
 8000fba:	2028      	movs	r0, #40	; 0x28
 8000fbc:	f000 fd98 	bl	8001af0 <HAL_Delay>
      HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readBuffer, 1 , HAL_MAX_DELAY);  //
 8000fc0:	1dfa      	adds	r2, r7, #7
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2170      	movs	r1, #112	; 0x70
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <AHT20_Init+0x54>)
 8000fce:	f001 fb0b 	bl	80025e8 <HAL_I2C_Master_Receive>
      if((readBuffer & 0x08) == 0x00) //检查状态寄存器的 Bit3 (0x08)，该位表示传感器是否已校准
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d110      	bne.n	8000ffe <AHT20_Init+0x4a>
      {  //// 只有未校准时才发送校准命令。发送 校准命令 0xBE，后跟两个参数 0x08 和 0x00（AHT20的校准命令格式）
    	  uint8_t sendBuffer[3] = { 0xBE, 0x08, 0X00};
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <AHT20_Init+0x58>)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	8019      	strh	r1, [r3, #0]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	0c12      	lsrs	r2, r2, #16
 8000fea:	701a      	strb	r2, [r3, #0]
          HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 8000fec:	1d3a      	adds	r2, r7, #4
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	2170      	movs	r1, #112	; 0x70
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <AHT20_Init+0x54>)
 8000ffa:	f001 f9f7 	bl	80023ec <HAL_I2C_Master_Transmit>
      }
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20001ba8 	.word	0x20001ba8
 800100c:	0800a6d0 	.word	0x0800a6d0

08001010 <AHT20_Read>:

void  AHT20_Read(float *Temperature, float *Humidity) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
      uint8_t sendBuffer[3] = { 0xAC, 0x33, 0x00 };
 800101a:	4a34      	ldr	r2, [pc, #208]	; (80010ec <AHT20_Read+0xdc>)
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	4611      	mov	r1, r2
 8001024:	8019      	strh	r1, [r3, #0]
 8001026:	3302      	adds	r3, #2
 8001028:	0c12      	lsrs	r2, r2, #16
 800102a:	701a      	strb	r2, [r3, #0]
      uint8_t readBuffer[6];

      HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2303      	movs	r3, #3
 8001038:	2170      	movs	r1, #112	; 0x70
 800103a:	482d      	ldr	r0, [pc, #180]	; (80010f0 <AHT20_Read+0xe0>)
 800103c:	f001 f9d6 	bl	80023ec <HAL_I2C_Master_Transmit>
      HAL_Delay(75);
 8001040:	204b      	movs	r0, #75	; 0x4b
 8001042:	f000 fd55 	bl	8001af0 <HAL_Delay>
      HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, readBuffer, 6, HAL_MAX_DELAY);
 8001046:	f107 0208 	add.w	r2, r7, #8
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2306      	movs	r3, #6
 8001052:	2170      	movs	r1, #112	; 0x70
 8001054:	4826      	ldr	r0, [pc, #152]	; (80010f0 <AHT20_Read+0xe0>)
 8001056:	f001 fac7 	bl	80025e8 <HAL_I2C_Master_Receive>

      if((readBuffer[0] & 0x80 ) == 0x00) {
 800105a:	7a3b      	ldrb	r3, [r7, #8]
 800105c:	b25b      	sxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	db3f      	blt.n	80010e2 <AHT20_Read+0xd2>
          uint32_t data = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
          data = ((uint32_t)readBuffer[3] >> 4) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[1] <<12 );
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	7abb      	ldrb	r3, [r7, #10]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	441a      	add	r2, r3
 8001074:	7a7b      	ldrb	r3, [r7, #9]
 8001076:	031b      	lsls	r3, r3, #12
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
          *Humidity = data * 100.0f /(1 << 20);
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff fdb9 	bl	8000bf4 <__aeabi_ui2f>
 8001082:	4603      	mov	r3, r0
 8001084:	491b      	ldr	r1, [pc, #108]	; (80010f4 <AHT20_Read+0xe4>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe0c 	bl	8000ca4 <__aeabi_fmul>
 800108c:	4603      	mov	r3, r0
 800108e:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff feba 	bl	8000e0c <__aeabi_fdiv>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	601a      	str	r2, [r3, #0]

          data = (((uint32_t)readBuffer[3] & 0x0F) << 16) + ((uint32_t)readBuffer[4] << 8) + (uint32_t)readBuffer[5] ;
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	4413      	add	r3, r2
 80010ae:	7b7a      	ldrb	r2, [r7, #13]
 80010b0:	4413      	add	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
          *Temperature = data * 200.0f / (1 << 20) - 50;
 80010b4:	6978      	ldr	r0, [r7, #20]
 80010b6:	f7ff fd9d 	bl	8000bf4 <__aeabi_ui2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <AHT20_Read+0xe8>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fdf0 	bl	8000ca4 <__aeabi_fmul>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe9e 	bl	8000e0c <__aeabi_fdiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	490a      	ldr	r1, [pc, #40]	; (80010fc <AHT20_Read+0xec>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fcdb 	bl	8000a90 <__aeabi_fsub>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
      }
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800a6d4 	.word	0x0800a6d4
 80010f0:	20001ba8 	.word	0x20001ba8
 80010f4:	42c80000 	.word	0x42c80000
 80010f8:	43480000 	.word	0x43480000
 80010fc:	42480000 	.word	0x42480000

08001100 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

    UNUSED(huart);

	if(ESP01S_cnt >= sizeof(ESP01S_buf))  //溢出判断
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_UART_RxCpltCallback+0x58>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b7f      	cmp	r3, #127	; 0x7f
 800110e:	d90f      	bls.n	8001130 <HAL_UART_RxCpltCallback+0x30>
	{
		ESP01S_cnt = 0;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_UART_RxCpltCallback+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
		memset(ESP01S_buf,0x00,sizeof(ESP01S_buf));
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	2100      	movs	r1, #0
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <HAL_UART_RxCpltCallback+0x5c>)
 800111c:	f006 fc3e 	bl	800799c <memset>
		HAL_UART_Transmit(&huart1, (uint8_t *)"接收缓存溢出", 10,0xFFFF);
 8001120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001124:	220a      	movs	r2, #10
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_UART_RxCpltCallback+0x60>)
 8001128:	480e      	ldr	r0, [pc, #56]	; (8001164 <HAL_UART_RxCpltCallback+0x64>)
 800112a:	f002 ff27 	bl	8003f7c <HAL_UART_Transmit>
 800112e:	e00a      	b.n	8001146 <HAL_UART_RxCpltCallback+0x46>
	}
	else
	{
		ESP01S_buf[ESP01S_cnt++] = aRxBuffer;   //接收数据转存
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_UART_RxCpltCallback+0x58>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	b291      	uxth	r1, r2
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_UART_RxCpltCallback+0x58>)
 800113a:	8011      	strh	r1, [r2, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_UART_RxCpltCallback+0x68>)
 8001140:	7819      	ldrb	r1, [r3, #0]
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_UART_RxCpltCallback+0x5c>)
 8001144:	5499      	strb	r1, [r3, r2]
//		  if(aRxBuffer=='1')  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
//        if(aRxBuffer=='0')  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 	}

	HAL_UART_Receive_IT(&huart2, (uint8_t *)&aRxBuffer, 1);   //再开启接收中断
 8001146:	2201      	movs	r2, #1
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <HAL_UART_RxCpltCallback+0x68>)
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <HAL_UART_RxCpltCallback+0x6c>)
 800114c:	f002 ff99 	bl	8004082 <HAL_UART_Receive_IT>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001fc 	.word	0x200001fc
 800115c:	20001b14 	.word	0x20001b14
 8001160:	0800a8e4 	.word	0x0800a8e4
 8001164:	20001c44 	.word	0x20001c44
 8001168:	20001b94 	.word	0x20001b94
 800116c:	20001c8c 	.word	0x20001c8c

08001170 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	sensorDataQueue = xQueueCreate(1, sizeof(Sensor_data));
 8001174:	2200      	movs	r2, #0
 8001176:	210c      	movs	r1, #12
 8001178:	2001      	movs	r0, #1
 800117a:	f004 f85a 	bl	8005232 <xQueueGenericCreate>
 800117e:	4603      	mov	r3, r0
 8001180:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <MX_FREERTOS_Init+0x70>)
 8001182:	6013      	str	r3, [r2, #0]
	if (sensorDataQueue != NULL)   //这个判断相当于检查这个缓冲区是否申请成功，如果成功才能往里存数据�???
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_FREERTOS_Init+0x70>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <MX_FREERTOS_Init+0x2c>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)"Queue created successfully!\r\n",
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	221d      	movs	r2, #29
 8001192:	4914      	ldr	r1, [pc, #80]	; (80011e4 <MX_FREERTOS_Init+0x74>)
 8001194:	4814      	ldr	r0, [pc, #80]	; (80011e8 <MX_FREERTOS_Init+0x78>)
 8001196:	f002 fef1 	bl	8003f7c <HAL_UART_Transmit>
 800119a:	e006      	b.n	80011aa <MX_FREERTOS_Init+0x3a>
	    // 队列创建失败处理
	    //Error_Handler();
	}
	else
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)"Queue created Error!\r\n",
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	2216      	movs	r2, #22
 80011a2:	4912      	ldr	r1, [pc, #72]	; (80011ec <MX_FREERTOS_Init+0x7c>)
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <MX_FREERTOS_Init+0x78>)
 80011a6:	f002 fee9 	bl	8003f7c <HAL_UART_Transmit>
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_aht20 */
  task_aht20Handle = osThreadNew(StartDefaultTask, NULL, &task_aht20_attributes);
 80011aa:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <MX_FREERTOS_Init+0x80>)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_FREERTOS_Init+0x84>)
 80011b0:	f003 fd72 	bl	8004c98 <osThreadNew>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <MX_FREERTOS_Init+0x88>)
 80011b8:	6013      	str	r3, [r2, #0]

  /* creation of task_bh1750 */
  task_bh1750Handle = osThreadNew(StartTask02, NULL, &task_bh1750_attributes);
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <MX_FREERTOS_Init+0x8c>)
 80011bc:	2100      	movs	r1, #0
 80011be:	4810      	ldr	r0, [pc, #64]	; (8001200 <MX_FREERTOS_Init+0x90>)
 80011c0:	f003 fd6a 	bl	8004c98 <osThreadNew>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <MX_FREERTOS_Init+0x94>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* creation of task_esp01s */
  task_esp01sHandle = osThreadNew(StartTask03, NULL, &task_esp01s_attributes);
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <MX_FREERTOS_Init+0x98>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	480f      	ldr	r0, [pc, #60]	; (800120c <MX_FREERTOS_Init+0x9c>)
 80011d0:	f003 fd62 	bl	8004c98 <osThreadNew>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <MX_FREERTOS_Init+0xa0>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20001b98 	.word	0x20001b98
 80011e4:	0800a91c 	.word	0x0800a91c
 80011e8:	20001c44 	.word	0x20001c44
 80011ec:	0800a93c 	.word	0x0800a93c
 80011f0:	0800a998 	.word	0x0800a998
 80011f4:	08001215 	.word	0x08001215
 80011f8:	20001b9c 	.word	0x20001b9c
 80011fc:	0800a9bc 	.word	0x0800a9bc
 8001200:	0800126d 	.word	0x0800126d
 8001204:	20001ba4 	.word	0x20001ba4
 8001208:	0800a9e0 	.word	0x0800a9e0
 800120c:	080012dd 	.word	0x080012dd
 8001210:	20001ba0 	.word	0x20001ba0

08001214 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  AHT20_Init();
 800121c:	f7ff feca 	bl	8000fb4 <AHT20_Init>

  float Temp,Humi;
  Sensor_data sensorData; // 定义结构体变

  TickType_t lastWakeTime = xTaskGetTickCount();
 8001220:	f005 f888 	bl	8006334 <xTaskGetTickCount>
 8001224:	61f8      	str	r0, [r7, #28]
  for(;;)
  {

    AHT20_Read(&Temp,&Humi);
 8001226:	f107 0214 	add.w	r2, r7, #20
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff feed 	bl	8001010 <AHT20_Read>

    sensorData.Temp = Temp;
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60bb      	str	r3, [r7, #8]
    sensorData.Humidity = Humi;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	60fb      	str	r3, [r7, #12]
    sensorData.light = 0; // 光照数据由另
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	613b      	str	r3, [r7, #16]

    //sprintf(message,"Tempeturate:%.2f,Humidity:%.2f %%\r\n",Temp,Humi);
    xQueueOverwrite(sensorDataQueue, &sensorData);
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <StartDefaultTask+0x54>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	f107 0108 	add.w	r1, r7, #8
 800124c:	2302      	movs	r3, #2
 800124e:	2200      	movs	r2, #0
 8001250:	f004 f850 	bl	80052f4 <xQueueGenericSend>
    //key = xQueueSend(sensorDataQueue , &sensorData, portMAX_DELAY); //队列写入数据
    //if(key != pdPASS)

    osDelayUntil(lastWakeTime + 1000);  // 精确1秒周�?
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fdf4 	bl	8004e48 <osDelayUntil>
    lastWakeTime = xTaskGetTickCount();
 8001260:	f005 f868 	bl	8006334 <xTaskGetTickCount>
 8001264:	61f8      	str	r0, [r7, #28]
    AHT20_Read(&Temp,&Humi);
 8001266:	e7de      	b.n	8001226 <StartDefaultTask+0x12>
 8001268:	20001b98 	.word	0x20001b98

0800126c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  BH1750_Init();
 8001274:	f7ff fe90 	bl	8000f98 <BH1750_Init>
	uint8_t DataBuff[2];//存储数组
	float LightData;//光照强度

	Sensor_data sensorData;

	if(xQueuePeek(sensorDataQueue, &sensorData, pdMS_TO_TICKS(100)) == pdPASS) {
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <StartTask02+0x68>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f107 010c 	add.w	r1, r7, #12
 8001280:	2264      	movs	r2, #100	; 0x64
 8001282:	4618      	mov	r0, r3
 8001284:	f004 faac 	bl	80057e0 <xQueuePeek>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d11d      	bne.n	80012ca <StartTask02+0x5e>
	      BH1750_ReadData(DataBuff, 2);
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe69 	bl	8000f6c <BH1750_ReadData>
	      LightData=((DataBuff[0]<<8)+DataBuff[1])/1.2f;//数据转换成光强度，单位lx
 800129a:	7e3b      	ldrb	r3, [r7, #24]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	7e7a      	ldrb	r2, [r7, #25]
 80012a0:	4413      	add	r3, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fcaa 	bl	8000bfc <__aeabi_i2f>
 80012a8:	4603      	mov	r3, r0
 80012aa:	490b      	ldr	r1, [pc, #44]	; (80012d8 <StartTask02+0x6c>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fdad 	bl	8000e0c <__aeabi_fdiv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	61fb      	str	r3, [r7, #28]
	      sensorData.light = LightData;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	617b      	str	r3, [r7, #20]
	      xQueueOverwrite(sensorDataQueue, &sensorData);  // 原子化更新
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <StartTask02+0x68>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	f107 010c 	add.w	r1, r7, #12
 80012c2:	2302      	movs	r3, #2
 80012c4:	2200      	movs	r2, #0
 80012c6:	f004 f815 	bl	80052f4 <xQueueGenericSend>

	// 格式化字符串
	//sprintf(message1, "Light: %d lux\r\n", LightData_Hex);
	//HAL_UART_Transmit(&huart1, (uint8_t*)message1, strlen(message1), HAL_MAX_DELAY);

    osDelay(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f003 fd8e 	bl	8004dec <osDelay>
  {
 80012d0:	e7d2      	b.n	8001278 <StartTask02+0xc>
 80012d2:	bf00      	nop
 80012d4:	20001b98 	.word	0x20001b98
 80012d8:	3f99999a 	.word	0x3f99999a

080012dc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80012dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e0:	b0a2      	sub	sp, #136	; 0x88
 80012e2:	af04      	add	r7, sp, #16
 80012e4:	6078      	str	r0, [r7, #4]
	char message[100];

  for(;;)
  {
	  // 从队列接收完整数据包
	  if(xQueueReceive(sensorDataQueue, &receivedData, pdMS_TO_TICKS(1000)) == pdPASS)
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <StartTask03+0x80>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80012ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 f994 	bl	8005620 <xQueueReceive>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d129      	bne.n	8001352 <StartTask03+0x76>
	  {
	  // 格式化所有传感器数据
	  sprintf(message, "Temp:%.2fC, Humi:%.2f%%, Light:%.2flux\r\n",
	          receivedData.Temp, receivedData.Humidity, receivedData.light);
 80012fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
	  sprintf(message, "Temp:%.2fC, Humi:%.2f%%, Light:%.2flux\r\n",
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f891 	bl	8000428 <__aeabi_f2d>
 8001306:	4680      	mov	r8, r0
 8001308:	4689      	mov	r9, r1
	          receivedData.Temp, receivedData.Humidity, receivedData.light);
 800130a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	  sprintf(message, "Temp:%.2fC, Humi:%.2f%%, Light:%.2flux\r\n",
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f88b 	bl	8000428 <__aeabi_f2d>
 8001312:	4604      	mov	r4, r0
 8001314:	460d      	mov	r5, r1
	          receivedData.Temp, receivedData.Humidity, receivedData.light);
 8001316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
	  sprintf(message, "Temp:%.2fC, Humi:%.2f%%, Light:%.2flux\r\n",
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f885 	bl	8000428 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	f107 0008 	add.w	r0, r7, #8
 8001326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800132a:	e9cd 4500 	strd	r4, r5, [sp]
 800132e:	4642      	mov	r2, r8
 8001330:	464b      	mov	r3, r9
 8001332:	490b      	ldr	r1, [pc, #44]	; (8001360 <StartTask03+0x84>)
 8001334:	f007 f850 	bl	80083d8 <siprintf>

	  // 通过串口发到ESP模块
	  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4618      	mov	r0, r3
 800133e:	f7fe ff07 	bl	8000150 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	f107 0108 	add.w	r1, r7, #8
 800134a:	2364      	movs	r3, #100	; 0x64
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <StartTask03+0x88>)
 800134e:	f002 fe15 	bl	8003f7c <HAL_UART_Transmit>
	  }
	  osDelay(100);
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f003 fd4a 	bl	8004dec <osDelay>
	  if(xQueueReceive(sensorDataQueue, &receivedData, pdMS_TO_TICKS(1000)) == pdPASS)
 8001358:	e7c5      	b.n	80012e6 <StartTask03+0xa>
 800135a:	bf00      	nop
 800135c:	20001b98 	.word	0x20001b98
 8001360:	0800a954 	.word	0x0800a954
 8001364:	20001c44 	.word	0x20001c44

08001368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_GPIO_Init+0x58>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <MX_GPIO_Init+0x58>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_GPIO_Init+0x58>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_GPIO_Init+0x58>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <MX_GPIO_Init+0x58>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_GPIO_Init+0x58>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_GPIO_Init+0x58>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <MX_GPIO_Init+0x58>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <MX_GPIO_Init+0x58>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40021000 	.word	0x40021000

080013c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C1_Init+0x50>)
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C1_Init+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C1_Init+0x50>)
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_I2C1_Init+0x58>)
 80013d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C1_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_I2C1_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_I2C1_Init+0x50>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_I2C1_Init+0x50>)
 8001402:	f000 feaf 	bl	8002164 <HAL_I2C_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800140c:	f000 f8b2 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20001ba8 	.word	0x20001ba8
 8001418:	40005400 	.word	0x40005400
 800141c:	000186a0 	.word	0x000186a0

08001420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_I2C_MspInit+0x70>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d123      	bne.n	8001488 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_I2C_MspInit+0x74>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_I2C_MspInit+0x74>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_I2C_MspInit+0x74>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001458:	23c0      	movs	r3, #192	; 0xc0
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_I2C_MspInit+0x78>)
 800146c:	f000 fcf6 	bl	8001e5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_I2C_MspInit+0x74>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_I2C_MspInit+0x74>)
 8001476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147a:	61d3      	str	r3, [r2, #28]
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_I2C_MspInit+0x74>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 faf4 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f80f 	bl	80014c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f7ff ff5e 	bl	8001368 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014ac:	f7ff ff8a 	bl	80013c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014b0:	f000 f9e6 	bl	8001880 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014b4:	f000 fa0e 	bl	80018d4 <MX_USART2_UART_Init>
*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014b8:	f003 fb88 	bl	8004bcc <osKernelInitialize>
  MX_FREERTOS_Init();
 80014bc:	f7ff fe58 	bl	8001170 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80014c0:	f003 fbb6 	bl	8004c30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <main+0x28>

080014c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b090      	sub	sp, #64	; 0x40
 80014ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	2228      	movs	r2, #40	; 0x28
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 fa61 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f6:	2301      	movs	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001504:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe5c 	bl	80031cc <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800151a:	f000 f82b 	bl	8001574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2302      	movs	r3, #2
 8001524:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2102      	movs	r1, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f8c7 	bl	80036cc <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001544:	f000 f816 	bl	8001574 <Error_Handler>
  }
}
 8001548:	bf00      	nop
 800154a:	3740      	adds	r7, #64	; 0x40
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001562:	f000 faa9 	bl	8001ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40000800 	.word	0x40000800

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	e7fe      	b.n	800157c <Error_Handler+0x8>
	...

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_MspInit+0x68>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_MspInit+0x68>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_MspInit+0x68>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_MspInit+0x68>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_MspInit+0x68>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x68>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	210f      	movs	r1, #15
 80015ba:	f06f 0001 	mvn.w	r0, #1
 80015be:	f000 fb70 	bl	8001ca2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_MspInit+0x6c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_MspInit+0x6c>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000

080015f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	201e      	movs	r0, #30
 8001606:	f000 fb4c 	bl	8001ca2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800160a:	201e      	movs	r0, #30
 800160c:	f000 fb65 	bl	8001cda <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_InitTick+0xa0>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	4a1e      	ldr	r2, [pc, #120]	; (8001690 <HAL_InitTick+0xa0>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	61d3      	str	r3, [r2, #28]
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_InitTick+0xa0>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001628:	f107 0210 	add.w	r2, r7, #16
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f002 f9ba 	bl	80039ac <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001638:	f002 f990 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 800163c:	4603      	mov	r3, r0
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <HAL_InitTick+0xa4>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	3b01      	subs	r3, #1
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_InitTick+0xa8>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_InitTick+0xac>)
 8001654:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_InitTick+0xa8>)
 8001658:	f240 32e7 	movw	r2, #999	; 0x3e7
 800165c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_InitTick+0xa8>)
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_InitTick+0xa8>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_InitTick+0xa8>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <HAL_InitTick+0xa8>)
 8001672:	f002 f9e9 	bl	8003a48 <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d104      	bne.n	8001686 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <HAL_InitTick+0xa8>)
 800167e:	f002 fa3b 	bl	8003af8 <HAL_TIM_Base_Start_IT>
 8001682:	4603      	mov	r3, r0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	431bde83 	.word	0x431bde83
 8001698:	20001bfc 	.word	0x20001bfc
 800169c:	40000800 	.word	0x40000800

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
	...

080016cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <TIM4_IRQHandler+0x10>)
 80016d2:	f002 fa63 	bl	8003b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20001bfc 	.word	0x20001bfc

080016e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <USART2_IRQHandler+0x10>)
 80016e6:	f002 fcf1 	bl	80040cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20001c8c 	.word	0x20001c8c

080016f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	return 1;
 80016f8:	2301      	movs	r3, #1
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_kill>:

int _kill(int pid, int sig)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800170c:	f006 f906 	bl	800791c <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	2216      	movs	r2, #22
 8001714:	601a      	str	r2, [r3, #0]
	return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_exit>:

void _exit (int status)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffe7 	bl	8001702 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001734:	e7fe      	b.n	8001734 <_exit+0x12>

08001736 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e00a      	b.n	800175e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001748:	f3af 8000 	nop.w
 800174c:	4601      	mov	r1, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	b2ca      	uxtb	r2, r1
 8001756:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	dbf0      	blt.n	8001748 <_read+0x12>
	}

return len;
 8001766:	687b      	ldr	r3, [r7, #4]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e009      	b.n	8001796 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	60ba      	str	r2, [r7, #8]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbf1      	blt.n	8001782 <_write+0x12>
	}
	return len;
 800179e:	687b      	ldr	r3, [r7, #4]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_close>:

int _close(int file)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ce:	605a      	str	r2, [r3, #4]
	return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <_isatty>:

int _isatty(int file)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f006 f870 	bl	800791c <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20005000 	.word	0x20005000
 8001868:	00000400 	.word	0x00000400
 800186c:	20000200 	.word	0x20000200
 8001870:	20001d28 	.word	0x20001d28

08001874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART1_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018b8:	f002 fb10 	bl	8003edc <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f7ff fe57 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20001c44 	.word	0x20001c44
 80018d0:	40013800 	.word	0x40013800

080018d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART2_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 800190c:	f002 fae6 	bl	8003edc <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f7ff fe2d 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20001c8c 	.word	0x20001c8c
 8001924:	40004400 	.word	0x40004400

08001928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_UART_MspInit+0x108>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d132      	bne.n	80019ae <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001948:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a39      	ldr	r2, [pc, #228]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a33      	ldr	r2, [pc, #204]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	4619      	mov	r1, r3
 800198c:	482a      	ldr	r0, [pc, #168]	; (8001a38 <HAL_UART_MspInit+0x110>)
 800198e:	f000 fa65 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4619      	mov	r1, r3
 80019a6:	4824      	ldr	r0, [pc, #144]	; (8001a38 <HAL_UART_MspInit+0x110>)
 80019a8:	f000 fa58 	bl	8001e5c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019ac:	e03c      	b.n	8001a28 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <HAL_UART_MspInit+0x114>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d137      	bne.n	8001a28 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 80019be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c2:	61d3      	str	r3, [r2, #28]
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_UART_MspInit+0x10c>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e8:	2304      	movs	r3, #4
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4619      	mov	r1, r3
 80019fa:	480f      	ldr	r0, [pc, #60]	; (8001a38 <HAL_UART_MspInit+0x110>)
 80019fc:	f000 fa2e 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a00:	2308      	movs	r3, #8
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	4619      	mov	r1, r3
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_UART_MspInit+0x110>)
 8001a14:	f000 fa22 	bl	8001e5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	2026      	movs	r0, #38	; 0x26
 8001a1e:	f000 f940 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a22:	2026      	movs	r0, #38	; 0x26
 8001a24:	f000 f959 	bl	8001cda <HAL_NVIC_EnableIRQ>
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	40004400 	.word	0x40004400

08001a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a40:	f7ff ff18 	bl	8001874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a46:	490c      	ldr	r1, [pc, #48]	; (8001a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a5c:	4c09      	ldr	r4, [pc, #36]	; (8001a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f005 ff5d 	bl	8007928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6e:	f7ff fd15 	bl	800149c <main>
  bx lr
 8001a72:	4770      	bx	lr
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a7c:	0800ae1c 	.word	0x0800ae1c
  ldr r2, =_sbss
 8001a80:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a84:	20001d28 	.word	0x20001d28

08001a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_2_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x28>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f8f5 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f7ff fda4 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fd6a 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x1c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x20>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_IncTick+0x20>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20001cd4 	.word	0x20001cd4

08001adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <HAL_GetTick+0x10>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20001cd4 	.word	0x20001cd4

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff fff0 	bl	8001adc <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffe0 	bl	8001adc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4906      	ldr	r1, [pc, #24]	; (8001bd0 <__NVIC_EnableIRQ+0x34>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff4f 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff64 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ffb2 	bl	8001c28 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff81 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff57 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d008      	beq.n	8001d20 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e020      	b.n	8001d62 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 020e 	bic.w	r2, r2, #14
 8001d2e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d005      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2204      	movs	r2, #4
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e051      	b.n	8001e34 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 020e 	bic.w	r2, r2, #14
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_DMA_Abort_IT+0xd4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d029      	beq.n	8001e0e <HAL_DMA_Abort_IT+0xa2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_DMA_Abort_IT+0xd8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d022      	beq.n	8001e0a <HAL_DMA_Abort_IT+0x9e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_DMA_Abort_IT+0xdc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x98>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_DMA_Abort_IT+0xe0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d012      	beq.n	8001dfe <HAL_DMA_Abort_IT+0x92>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_DMA_Abort_IT+0xe4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00a      	beq.n	8001df8 <HAL_DMA_Abort_IT+0x8c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_DMA_Abort_IT+0xe8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d102      	bne.n	8001df2 <HAL_DMA_Abort_IT+0x86>
 8001dec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001df0:	e00e      	b.n	8001e10 <HAL_DMA_Abort_IT+0xa4>
 8001df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df6:	e00b      	b.n	8001e10 <HAL_DMA_Abort_IT+0xa4>
 8001df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfc:	e008      	b.n	8001e10 <HAL_DMA_Abort_IT+0xa4>
 8001dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e02:	e005      	b.n	8001e10 <HAL_DMA_Abort_IT+0xa4>
 8001e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e08:	e002      	b.n	8001e10 <HAL_DMA_Abort_IT+0xa4>
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	e000      	b.n	8001e10 <HAL_DMA_Abort_IT+0xa4>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_DMA_Abort_IT+0xec>)
 8001e12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
    } 
  }
  return status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020008 	.word	0x40020008
 8001e44:	4002001c 	.word	0x4002001c
 8001e48:	40020030 	.word	0x40020030
 8001e4c:	40020044 	.word	0x40020044
 8001e50:	40020058 	.word	0x40020058
 8001e54:	4002006c 	.word	0x4002006c
 8001e58:	40020000 	.word	0x40020000

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6e:	e169      	b.n	8002144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e70:	2201      	movs	r2, #1
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8158 	bne.w	800213e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a9a      	ldr	r2, [pc, #616]	; (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d05e      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001e98:	4a98      	ldr	r2, [pc, #608]	; (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d875      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001e9e:	4a98      	ldr	r2, [pc, #608]	; (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d058      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a96      	ldr	r2, [pc, #600]	; (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d86f      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eaa:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d052      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001eb0:	4a94      	ldr	r2, [pc, #592]	; (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d869      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eb6:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_GPIO_Init+0x2ac>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04c      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ebc:	4a92      	ldr	r2, [pc, #584]	; (8002108 <HAL_GPIO_Init+0x2ac>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d863      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ec2:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_GPIO_Init+0x2b0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d046      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ec8:	4a90      	ldr	r2, [pc, #576]	; (800210c <HAL_GPIO_Init+0x2b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d85d      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d82a      	bhi.n	8001f28 <HAL_GPIO_Init+0xcc>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d859      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_GPIO_Init+0x80>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001f57 	.word	0x08001f57
 8001ee0:	08001f31 	.word	0x08001f31
 8001ee4:	08001f43 	.word	0x08001f43
 8001ee8:	08001f85 	.word	0x08001f85
 8001eec:	08001f8b 	.word	0x08001f8b
 8001ef0:	08001f8b 	.word	0x08001f8b
 8001ef4:	08001f8b 	.word	0x08001f8b
 8001ef8:	08001f8b 	.word	0x08001f8b
 8001efc:	08001f8b 	.word	0x08001f8b
 8001f00:	08001f8b 	.word	0x08001f8b
 8001f04:	08001f8b 	.word	0x08001f8b
 8001f08:	08001f8b 	.word	0x08001f8b
 8001f0c:	08001f8b 	.word	0x08001f8b
 8001f10:	08001f8b 	.word	0x08001f8b
 8001f14:	08001f8b 	.word	0x08001f8b
 8001f18:	08001f8b 	.word	0x08001f8b
 8001f1c:	08001f8b 	.word	0x08001f8b
 8001f20:	08001f39 	.word	0x08001f39
 8001f24:	08001f4d 	.word	0x08001f4d
 8001f28:	4a79      	ldr	r2, [pc, #484]	; (8002110 <HAL_GPIO_Init+0x2b4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f2e:	e02c      	b.n	8001f8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e029      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e024      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	3308      	adds	r3, #8
 8001f48:	623b      	str	r3, [r7, #32]
          break;
 8001f4a:	e01f      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	330c      	adds	r3, #12
 8001f52:	623b      	str	r3, [r7, #32]
          break;
 8001f54:	e01a      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e013      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	611a      	str	r2, [r3, #16]
          break;
 8001f76:	e009      	b.n	8001f8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	615a      	str	r2, [r3, #20]
          break;
 8001f82:	e003      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          break;
 8001f8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2bff      	cmp	r3, #255	; 0xff
 8001f90:	d801      	bhi.n	8001f96 <HAL_GPIO_Init+0x13a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_Init+0x13e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_GPIO_Init+0x14c>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x152>
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	3b08      	subs	r3, #8
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80b1 	beq.w	800213e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_GPIO_Init+0x2bc>)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a40      	ldr	r2, [pc, #256]	; (800211c <HAL_GPIO_Init+0x2c0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_GPIO_Init+0x1ec>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3f      	ldr	r2, [pc, #252]	; (8002120 <HAL_GPIO_Init+0x2c4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00d      	beq.n	8002044 <HAL_GPIO_Init+0x1e8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3e      	ldr	r2, [pc, #248]	; (8002124 <HAL_GPIO_Init+0x2c8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x1e4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <HAL_GPIO_Init+0x2cc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_GPIO_Init+0x1e0>
 8002038:	2303      	movs	r3, #3
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 800203c:	2304      	movs	r3, #4
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002040:	2302      	movs	r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002048:	2300      	movs	r3, #0
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800205a:	492f      	ldr	r1, [pc, #188]	; (8002118 <HAL_GPIO_Init+0x2bc>)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_GPIO_Init+0x2d0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	492c      	ldr	r1, [pc, #176]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_GPIO_Init+0x2d0>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	4928      	ldr	r1, [pc, #160]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	491e      	ldr	r1, [pc, #120]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4918      	ldr	r1, [pc, #96]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4914      	ldr	r1, [pc, #80]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d021      	beq.n	8002130 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e021      	b.n	800213e <HAL_GPIO_Init+0x2e2>
 80020fa:	bf00      	nop
 80020fc:	10320000 	.word	0x10320000
 8002100:	10310000 	.word	0x10310000
 8002104:	10220000 	.word	0x10220000
 8002108:	10210000 	.word	0x10210000
 800210c:	10120000 	.word	0x10120000
 8002110:	10110000 	.word	0x10110000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40011400 	.word	0x40011400
 800212c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_GPIO_Init+0x304>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	43db      	mvns	r3, r3
 8002138:	4909      	ldr	r1, [pc, #36]	; (8002160 <HAL_GPIO_Init+0x304>)
 800213a:	4013      	ands	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	3301      	adds	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	f47f ae8e 	bne.w	8001e70 <HAL_GPIO_Init+0x14>
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	372c      	adds	r7, #44	; 0x2c
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e12b      	b.n	80023ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff f948 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c8:	f001 fbc8 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a81      	ldr	r2, [pc, #516]	; (80023d8 <HAL_I2C_Init+0x274>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d807      	bhi.n	80021e8 <HAL_I2C_Init+0x84>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a80      	ldr	r2, [pc, #512]	; (80023dc <HAL_I2C_Init+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e006      	b.n	80021f6 <HAL_I2C_Init+0x92>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a7d      	ldr	r2, [pc, #500]	; (80023e0 <HAL_I2C_Init+0x27c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e7      	b.n	80023ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a78      	ldr	r2, [pc, #480]	; (80023e4 <HAL_I2C_Init+0x280>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a6a      	ldr	r2, [pc, #424]	; (80023d8 <HAL_I2C_Init+0x274>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d802      	bhi.n	8002238 <HAL_I2C_Init+0xd4>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	e009      	b.n	800224c <HAL_I2C_Init+0xe8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_I2C_Init+0x284>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	3301      	adds	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800225e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	495c      	ldr	r1, [pc, #368]	; (80023d8 <HAL_I2C_Init+0x274>)
 8002268:	428b      	cmp	r3, r1
 800226a:	d819      	bhi.n	80022a0 <HAL_I2C_Init+0x13c>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e59      	subs	r1, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fbb1 f3f3 	udiv	r3, r1, r3
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002280:	400b      	ands	r3, r1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_I2C_Init+0x138>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fbb1 f3f3 	udiv	r3, r1, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229a:	e051      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 800229c:	2304      	movs	r3, #4
 800229e:	e04f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_I2C_Init+0x168>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e012      	b.n	80022f2 <HAL_I2C_Init+0x18e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	0099      	lsls	r1, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x196>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e022      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <HAL_I2C_Init+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e58      	subs	r0, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	440b      	add	r3, r1
 8002310:	fbb0 f3f3 	udiv	r3, r0, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231e:	e00f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	6809      	ldr	r1, [r1, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800236e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6911      	ldr	r1, [r2, #16]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	000186a0 	.word	0x000186a0
 80023dc:	001e847f 	.word	0x001e847f
 80023e0:	003d08ff 	.word	0x003d08ff
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	10624dd3 	.word	0x10624dd3

080023ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fb6c 	bl	8001adc <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 80e0 	bne.w	80025d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	4970      	ldr	r1, [pc, #448]	; (80025e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fc9e 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	e0d3      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Transmit+0x50>
 8002438:	2302      	movs	r3, #2
 800243a:	e0cc      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2221      	movs	r2, #33	; 0x21
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2210      	movs	r2, #16
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a50      	ldr	r2, [pc, #320]	; (80025e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6a3a      	ldr	r2, [r7, #32]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fb08 	bl	8002ac0 <I2C_MasterRequestWrite>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e08d      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d0:	e066      	b.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fd5c 	bl	8002f94 <I2C_WaitOnTXEFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d107      	bne.n	80024fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e06b      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d11b      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x188>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	6a39      	ldr	r1, [r7, #32]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fd53 	bl	8003024 <I2C_WaitOnBTFFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b04      	cmp	r3, #4
 800258a:	d107      	bne.n	800259c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e01a      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d194      	bne.n	80024d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000

080025e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	; 0x30
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	461a      	mov	r2, r3
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
 80025f8:	4613      	mov	r3, r2
 80025fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff fa6c 	bl	8001adc <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	f040 824b 	bne.w	8002aaa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2319      	movs	r3, #25
 800261a:	2201      	movs	r2, #1
 800261c:	497f      	ldr	r1, [pc, #508]	; (800281c <HAL_I2C_Master_Receive+0x234>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fb9e 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	e23e      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2C_Master_Receive+0x54>
 8002638:	2302      	movs	r3, #2
 800263a:	e237      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d007      	beq.n	8002662 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2222      	movs	r2, #34	; 0x22
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2210      	movs	r2, #16
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a5f      	ldr	r2, [pc, #380]	; (8002820 <HAL_I2C_Master_Receive+0x238>)
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fa8a 	bl	8002bc4 <I2C_MasterRequestRead>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1f8      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d113      	bne.n	80026ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e1cc      	b.n	8002a84 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d11e      	bne.n	8002730 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002702:	b672      	cpsid	i
}
 8002704:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800272c:	b662      	cpsie	i
}
 800272e:	e035      	b.n	800279c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b02      	cmp	r3, #2
 8002736:	d11e      	bne.n	8002776 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002746:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002748:	b672      	cpsid	i
}
 800274a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002770:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002772:	b662      	cpsie	i
}
 8002774:	e012      	b.n	800279c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800279c:	e172      	b.n	8002a84 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	f200 811f 	bhi.w	80029e6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d123      	bne.n	80027f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fc7d 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e173      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027f6:	e145      	b.n	8002a84 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d152      	bne.n	80028a6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	2200      	movs	r2, #0
 8002808:	4906      	ldr	r1, [pc, #24]	; (8002824 <HAL_I2C_Master_Receive+0x23c>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 faa8 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e148      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
 800281a:	bf00      	nop
 800281c:	00100002 	.word	0x00100002
 8002820:	ffff0000 	.word	0xffff0000
 8002824:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
}
 800282a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800286e:	b662      	cpsie	i
}
 8002870:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a4:	e0ee      	b.n	8002a84 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	2200      	movs	r2, #0
 80028ae:	4981      	ldr	r1, [pc, #516]	; (8002ab4 <HAL_I2C_Master_Receive+0x4cc>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fa55 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0f5      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002906:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_I2C_Master_Receive+0x4d0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	08db      	lsrs	r3, r3, #3
 800290c:	4a6b      	ldr	r2, [pc, #428]	; (8002abc <HAL_I2C_Master_Receive+0x4d4>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0a1a      	lsrs	r2, r3, #8
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00da      	lsls	r2, r3, #3
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	3b01      	subs	r3, #1
 8002924:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d118      	bne.n	800295e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800294e:	b662      	cpsie	i
}
 8002950:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0a6      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d1d9      	bne.n	8002920 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029ae:	b662      	cpsie	i
}
 80029b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029e4:	e04e      	b.n	8002a84 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fb62 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e058      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d124      	bne.n	8002a84 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a50:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f47f ae88 	bne.w	800279e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	00010004 	.word	0x00010004
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	14f8b589 	.word	0x14f8b589

08002ac0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	460b      	mov	r3, r1
 8002ace:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d006      	beq.n	8002aea <I2C_MasterRequestWrite+0x2a>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d003      	beq.n	8002aea <I2C_MasterRequestWrite+0x2a>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ae8:	d108      	bne.n	8002afc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e00b      	b.n	8002b14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	2b12      	cmp	r3, #18
 8002b02:	d107      	bne.n	8002b14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f91d 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3a:	d103      	bne.n	8002b44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e035      	b.n	8002bb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b50:	d108      	bne.n	8002b64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	e01b      	b.n	8002b9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b64:	897b      	ldrh	r3, [r7, #10]
 8002b66:	11db      	asrs	r3, r3, #7
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 0306 	and.w	r3, r3, #6
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f063 030f 	orn	r3, r3, #15
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	490e      	ldr	r1, [pc, #56]	; (8002bbc <I2C_MasterRequestWrite+0xfc>)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f966 	bl	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e010      	b.n	8002bb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <I2C_MasterRequestWrite+0x100>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f956 	bl	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	00010008 	.word	0x00010008
 8002bc0:	00010002 	.word	0x00010002

08002bc4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002be8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d006      	beq.n	8002bfe <I2C_MasterRequestRead+0x3a>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d003      	beq.n	8002bfe <I2C_MasterRequestRead+0x3a>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bfc:	d108      	bne.n	8002c10 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e00b      	b.n	8002c28 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	2b11      	cmp	r3, #17
 8002c16:	d107      	bne.n	8002c28 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f893 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d103      	bne.n	8002c58 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e079      	b.n	8002d50 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c64:	d108      	bne.n	8002c78 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	e05f      	b.n	8002d38 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c78:	897b      	ldrh	r3, [r7, #10]
 8002c7a:	11db      	asrs	r3, r3, #7
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 0306 	and.w	r3, r3, #6
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f063 030f 	orn	r3, r3, #15
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4930      	ldr	r1, [pc, #192]	; (8002d58 <I2C_MasterRequestRead+0x194>)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f8dc 	bl	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e054      	b.n	8002d50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4929      	ldr	r1, [pc, #164]	; (8002d5c <I2C_MasterRequestRead+0x198>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f8cc 	bl	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e044      	b.n	8002d50 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f831 	bl	8002d60 <I2C_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d12:	d103      	bne.n	8002d1c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e017      	b.n	8002d50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d20:	897b      	ldrh	r3, [r7, #10]
 8002d22:	11db      	asrs	r3, r3, #7
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 0306 	and.w	r3, r3, #6
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f063 030e 	orn	r3, r3, #14
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4907      	ldr	r1, [pc, #28]	; (8002d5c <I2C_MasterRequestRead+0x198>)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f888 	bl	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	00010008 	.word	0x00010008
 8002d5c:	00010002 	.word	0x00010002

08002d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d70:	e048      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d044      	beq.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe feaf 	bl	8001adc <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d139      	bne.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10d      	bne.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	e00c      	b.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d116      	bne.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e023      	b.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	0c1b      	lsrs	r3, r3, #16
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10d      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	e00c      	b.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d093      	beq.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e62:	e071      	b.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d123      	bne.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0204 	orr.w	r2, r3, #4
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e067      	b.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d041      	beq.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec4:	f7fe fe0a 	bl	8001adc <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d302      	bcc.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d136      	bne.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e00b      	b.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e021      	b.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10c      	bne.n	8002f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e00b      	b.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f47f af6d 	bne.w	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa0:	e034      	b.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8e3 	bl	800316e <I2C_IsAcknowledgeFailed>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e034      	b.n	800301c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d028      	beq.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7fe fd8f 	bl	8001adc <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11d      	bne.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d016      	beq.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b80      	cmp	r3, #128	; 0x80
 8003018:	d1c3      	bne.n	8002fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003030:	e034      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f89b 	bl	800316e <I2C_IsAcknowledgeFailed>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e034      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d028      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fd47 	bl	8001adc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11d      	bne.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d016      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d1c3      	bne.n	8003032 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c0:	e049      	b.n	8003156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d119      	bne.n	8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0210 	mvn.w	r2, #16
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e030      	b.n	8003166 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fe fcea 	bl	8001adc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11d      	bne.n	8003156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d016      	beq.n	8003156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e007      	b.n	8003166 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d1ae      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	d11b      	bne.n	80031be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800318e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e26c      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ec:	4b92      	ldr	r3, [pc, #584]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00c      	beq.n	8003212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f8:	4b8f      	ldr	r3, [pc, #572]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
 8003204:	4b8c      	ldr	r3, [pc, #560]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x12c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e246      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x76>
 8003234:	4b80      	ldr	r3, [pc, #512]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7f      	ldr	r2, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b7b      	ldr	r3, [pc, #492]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7a      	ldr	r2, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b78      	ldr	r3, [pc, #480]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a77      	ldr	r2, [pc, #476]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0xbc>
 800326e:	4b72      	ldr	r3, [pc, #456]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a71      	ldr	r2, [pc, #452]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003288:	4b6b      	ldr	r3, [pc, #428]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a67      	ldr	r2, [pc, #412]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fc18 	bl	8001adc <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe fc14 	bl	8001adc <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1fa      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe4>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fc04 	bl	8001adc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fc00 	bl	8001adc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1e6      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x10c>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d063      	beq.n	80033ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
 800331e:	4b46      	ldr	r3, [pc, #280]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b43      	ldr	r3, [pc, #268]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1ba      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4939      	ldr	r1, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e03a      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fbb9 	bl	8001adc <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7fe fbb5 	bl	8001adc <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e19b      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4927      	ldr	r1, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe fb98 	bl	8001adc <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe fb94 	bl	8001adc <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e17a      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03a      	beq.n	8003450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d019      	beq.n	8003416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fb78 	bl	8001adc <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe fb74 	bl	8001adc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e15a      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800340e:	2001      	movs	r0, #1
 8003410:	f000 fafc 	bl	8003a0c <RCC_Delay>
 8003414:	e01c      	b.n	8003450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fe fb5e 	bl	8001adc <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003422:	e00f      	b.n	8003444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fb5a 	bl	8001adc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d908      	bls.n	8003444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e140      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	42420000 	.word	0x42420000
 8003440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b9e      	ldr	r3, [pc, #632]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e9      	bne.n	8003424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a6 	beq.w	80035aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b97      	ldr	r3, [pc, #604]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a93      	ldr	r2, [pc, #588]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]
 800347a:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b8e      	ldr	r3, [pc, #568]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d118      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a8a      	ldr	r2, [pc, #552]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fb1b 	bl	8001adc <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7fe fb17 	bl	8001adc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b64      	cmp	r3, #100	; 0x64
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0fd      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	4b81      	ldr	r3, [pc, #516]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x312>
 80034d0:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a7a      	ldr	r2, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e02d      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x334>
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a75      	ldr	r2, [pc, #468]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b73      	ldr	r3, [pc, #460]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x356>
 8003508:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a6c      	ldr	r2, [pc, #432]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a69      	ldr	r2, [pc, #420]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a66      	ldr	r2, [pc, #408]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	4b64      	ldr	r3, [pc, #400]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a63      	ldr	r2, [pc, #396]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fe facb 	bl	8001adc <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fac7 	bl	8001adc <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0ab      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCC_OscConfig+0x37e>
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fe fab5 	bl	8001adc <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe fab1 	bl	8001adc <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e095      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a47      	ldr	r2, [pc, #284]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8081 	beq.w	80036b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d061      	beq.n	8003684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d146      	bne.n	8003656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c8:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCC_OscConfig+0x4fc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fe fa85 	bl	8001adc <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fa81 	bl	8001adc <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e067      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d108      	bne.n	8003610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	492d      	ldr	r1, [pc, #180]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a19      	ldr	r1, [r3, #32]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	430b      	orrs	r3, r1
 8003622:	4927      	ldr	r1, [pc, #156]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_OscConfig+0x4fc>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe fa55 	bl	8001adc <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe fa51 	bl	8001adc <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e037      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x46a>
 8003654:	e02f      	b.n	80036b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_RCC_OscConfig+0x4fc>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fa3e 	bl	8001adc <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fa3a 	bl	8001adc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e020      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x498>
 8003682:	e018      	b.n	80036b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e013      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
 80036c8:	42420060 	.word	0x42420060

080036cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0d0      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b67      	ldr	r3, [pc, #412]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0207 	bic.w	r2, r3, #7
 80036f6:	4965      	ldr	r1, [pc, #404]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0b8      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003728:	4b59      	ldr	r3, [pc, #356]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a58      	ldr	r2, [pc, #352]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003740:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a52      	ldr	r2, [pc, #328]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800374a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800374c:	4b50      	ldr	r3, [pc, #320]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	494d      	ldr	r1, [pc, #308]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d040      	beq.n	80037ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d115      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e07f      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e073      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06b      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037aa:	4b39      	ldr	r3, [pc, #228]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4936      	ldr	r1, [pc, #216]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fe f98e 	bl	8001adc <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fe f98a 	bl	8001adc <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e053      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 020c 	and.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1eb      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d210      	bcs.n	800381c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	4922      	ldr	r1, [pc, #136]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e032      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4916      	ldr	r1, [pc, #88]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	490e      	ldr	r1, [pc, #56]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800385a:	f000 f821 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 800385e:	4602      	mov	r2, r0
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	490a      	ldr	r1, [pc, #40]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	5ccb      	ldrb	r3, [r1, r3]
 800386e:	fa22 f303 	lsr.w	r3, r2, r3
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1cc>)
 8003874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_RCC_ClockConfig+0x1d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd feb8 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40022000 	.word	0x40022000
 8003890:	40021000 	.word	0x40021000
 8003894:	0800aa04 	.word	0x0800aa04
 8003898:	20000000 	.word	0x20000000
 800389c:	20000004 	.word	0x20000004

080038a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <HAL_RCC_GetSysClockFreq+0x94>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ce:	e027      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d2:	613b      	str	r3, [r7, #16]
      break;
 80038d4:	e027      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	0c9b      	lsrs	r3, r3, #18
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	4a17      	ldr	r2, [pc, #92]	; (800393c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038e0:	5cd3      	ldrb	r3, [r2, r3]
 80038e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_RCC_GetSysClockFreq+0x94>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0c5b      	lsrs	r3, r3, #17
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	4a11      	ldr	r2, [pc, #68]	; (8003940 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038fa:	5cd3      	ldrb	r3, [r2, r3]
 80038fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <HAL_RCC_GetSysClockFreq+0x98>)
 8003902:	fb02 f203 	mul.w	r2, r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e004      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	613b      	str	r3, [r7, #16]
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_GetSysClockFreq+0x98>)
 8003922:	613b      	str	r3, [r7, #16]
      break;
 8003924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003926:	693b      	ldr	r3, [r7, #16]
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	0800aa1c 	.word	0x0800aa1c
 8003940:	0800aa2c 	.word	0x0800aa2c
 8003944:	003d0900 	.word	0x003d0900

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b02      	ldr	r3, [pc, #8]	; (8003958 <HAL_RCC_GetHCLKFreq+0x10>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003960:	f7ff fff2 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	0800aa14 	.word	0x0800aa14

08003984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003988:	f7ff ffde 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	0adb      	lsrs	r3, r3, #11
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	0800aa14 	.word	0x0800aa14

080039ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	220f      	movs	r2, #15
 80039ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_RCC_GetClockConfig+0x58>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCC_GetClockConfig+0x58>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_GetClockConfig+0x58>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCC_GetClockConfig+0x58>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	08db      	lsrs	r3, r3, #3
 80039e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0207 	and.w	r2, r3, #7
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40022000 	.word	0x40022000

08003a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <RCC_Delay+0x34>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <RCC_Delay+0x38>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0a5b      	lsrs	r3, r3, #9
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a28:	bf00      	nop
  }
  while (Delay --);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1e5a      	subs	r2, r3, #1
 8003a2e:	60fa      	str	r2, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f9      	bne.n	8003a28 <RCC_Delay+0x1c>
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	20000000 	.word	0x20000000
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e041      	b.n	8003ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f839 	bl	8003ae6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f000 f9b4 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d001      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e03a      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_TIM_Base_Start_IT+0x98>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800

08003b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0202 	mvn.w	r2, #2
 8003bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8ed 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8e0 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f8ef 	bl	8003dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0204 	mvn.w	r2, #4
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8c3 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8b6 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f8c5 	bl	8003dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0208 	mvn.w	r2, #8
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2204      	movs	r2, #4
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f899 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f88c 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f89b 	bl	8003dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d122      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0210 	mvn.w	r2, #16
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f86f 	bl	8003dbe <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f862 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f871 	bl	8003dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10e      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0201 	mvn.w	r2, #1
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fc18 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d10e      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d107      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8bf 	bl	8003eca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f835 	bl	8003de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0220 	mvn.w	r2, #32
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f88a 	bl	8003eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a29      	ldr	r2, [pc, #164]	; (8003eac <TIM_Base_SetConfig+0xb8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_Base_SetConfig+0x30>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d007      	beq.n	8003e24 <TIM_Base_SetConfig+0x30>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <TIM_Base_SetConfig+0xbc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0x30>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <TIM_Base_SetConfig+0xc0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <TIM_Base_SetConfig+0xb8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <TIM_Base_SetConfig+0x62>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e44:	d007      	beq.n	8003e56 <TIM_Base_SetConfig+0x62>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <TIM_Base_SetConfig+0xbc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_Base_SetConfig+0x62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <TIM_Base_SetConfig+0xc0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d108      	bne.n	8003e68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <TIM_Base_SetConfig+0xb8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d103      	bne.n	8003e9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800

08003eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr

08003eca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e042      	b.n	8003f74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fd10 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fdc5 	bl	8004ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d16d      	bne.n	8004078 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_UART_Transmit+0x2c>
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e066      	b.n	800407a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2221      	movs	r2, #33	; 0x21
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fba:	f7fd fd8f 	bl	8001adc <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d108      	bne.n	8003fe8 <HAL_UART_Transmit+0x6c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e003      	b.n	8003ff0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ff0:	e02a      	b.n	8004048 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fb14 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e036      	b.n	800407a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	3302      	adds	r3, #2
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	e007      	b.n	800403a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3301      	adds	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1cf      	bne.n	8003ff2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2200      	movs	r2, #0
 800405a:	2140      	movs	r1, #64	; 0x40
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fae4 	bl	800462a <UART_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e006      	b.n	800407a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	4613      	mov	r3, r2
 800408e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b20      	cmp	r3, #32
 800409a:	d112      	bne.n	80040c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_UART_Receive_IT+0x26>
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e00b      	b.n	80040c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	461a      	mov	r2, r3
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fb24 	bl	8004706 <UART_Start_Receive_IT>
 80040be:	4603      	mov	r3, r0
 80040c0:	e000      	b.n	80040c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
  }
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b0ba      	sub	sp, #232	; 0xe8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800410a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_UART_IRQHandler+0x66>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fc01 	bl	8004932 <UART_Receive_IT>
      return;
 8004130:	e25b      	b.n	80045ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80de 	beq.w	80042f8 <HAL_UART_IRQHandler+0x22c>
 800413c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80d1 	beq.w	80042f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_UART_IRQHandler+0xae>
 8004162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_UART_IRQHandler+0xd2>
 8004186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f043 0202 	orr.w	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_UART_IRQHandler+0xf6>
 80041aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f043 0204 	orr.w	r2, r3, #4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d011      	beq.n	80041f2 <HAL_UART_IRQHandler+0x126>
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 81f2 	beq.w	80045e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_UART_IRQHandler+0x14e>
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fb8c 	bl	8004932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <HAL_UART_IRQHandler+0x17a>
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04f      	beq.n	80042e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa96 	bl	8004778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d041      	beq.n	80042de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004286:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800428a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800429e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1d9      	bne.n	800425a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d013      	beq.n	80042d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	4a7e      	ldr	r2, [pc, #504]	; (80044ac <HAL_UART_IRQHandler+0x3e0>)
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fd fd56 	bl	8001d6c <HAL_DMA_Abort_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	e00e      	b.n	80042f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f993 	bl	8004602 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	e00a      	b.n	80042f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f98f 	bl	8004602 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e4:	e006      	b.n	80042f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f98b 	bl	8004602 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042f2:	e175      	b.n	80045e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	bf00      	nop
    return;
 80042f6:	e173      	b.n	80045e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f040 814f 	bne.w	80045a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8148 	beq.w	80045a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8141 	beq.w	80045a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80b6 	beq.w	80044b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8145 	beq.w	80045e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800435e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004362:	429a      	cmp	r2, r3
 8004364:	f080 813e 	bcs.w	80045e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800436e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b20      	cmp	r3, #32
 8004378:	f000 8088 	beq.w	800448c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800439a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1d9      	bne.n	800437c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e1      	bne.n	80043c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004428:	66fa      	str	r2, [r7, #108]	; 0x6c
 800442a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800442e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e3      	bne.n	8004404 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800445a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800446e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004470:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800447c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e3      	bne.n	800444a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd fc35 	bl	8001cf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449a:	b29b      	uxth	r3, r3
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8b6 	bl	8004614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a8:	e09c      	b.n	80045e4 <HAL_UART_IRQHandler+0x518>
 80044aa:	bf00      	nop
 80044ac:	0800483d 	.word	0x0800483d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 808e 	beq.w	80045e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8089 	beq.w	80045e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044fa:	647a      	str	r2, [r7, #68]	; 0x44
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e3      	bne.n	80044d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	623b      	str	r3, [r7, #32]
   return(result);
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004532:	633a      	str	r2, [r7, #48]	; 0x30
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e3      	bne.n	800450e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	60fb      	str	r3, [r7, #12]
   return(result);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0310 	bic.w	r3, r3, #16
 800456a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004578:	61fa      	str	r2, [r7, #28]
 800457a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	617b      	str	r3, [r7, #20]
   return(result);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e3      	bne.n	8004554 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f83b 	bl	8004614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800459e:	e023      	b.n	80045e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_UART_IRQHandler+0x4f4>
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f953 	bl	8004864 <UART_Transmit_IT>
    return;
 80045be:	e014      	b.n	80045ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <HAL_UART_IRQHandler+0x51e>
 80045cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f992 	bl	8004902 <UART_EndTransmit_IT>
    return;
 80045de:	e004      	b.n	80045ea <HAL_UART_IRQHandler+0x51e>
    return;
 80045e0:	bf00      	nop
 80045e2:	e002      	b.n	80045ea <HAL_UART_IRQHandler+0x51e>
      return;
 80045e4:	bf00      	nop
 80045e6:	e000      	b.n	80045ea <HAL_UART_IRQHandler+0x51e>
      return;
 80045e8:	bf00      	nop
  }
}
 80045ea:	37e8      	adds	r7, #232	; 0xe8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b090      	sub	sp, #64	; 0x40
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	e050      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d04c      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x30>
 800464a:	f7fd fa47 	bl	8001adc <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004656:	429a      	cmp	r2, r3
 8004658:	d241      	bcs.n	80046de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800467a:	637a      	str	r2, [r7, #52]	; 0x34
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	613b      	str	r3, [r7, #16]
   return(result);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ae:	623a      	str	r2, [r7, #32]
 80046b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	69f9      	ldr	r1, [r7, #28]
 80046b4:	6a3a      	ldr	r2, [r7, #32]
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e5      	bne.n	800468e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e00f      	b.n	80046fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d09f      	beq.n	800463c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3740      	adds	r7, #64	; 0x40
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	4613      	mov	r3, r2
 8004712:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	88fa      	ldrh	r2, [r7, #6]
 8004724:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2222      	movs	r2, #34	; 0x22
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0220 	orr.w	r2, r2, #32
 800476a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b095      	sub	sp, #84	; 0x54
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047a0:	643a      	str	r2, [r7, #64]	; 0x40
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d119      	bne.n	8004824 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f023 0310 	bic.w	r3, r3, #16
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004810:	61ba      	str	r2, [r7, #24]
 8004812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6979      	ldr	r1, [r7, #20]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004832:	bf00      	nop
 8004834:	3754      	adds	r7, #84	; 0x54
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fed3 	bl	8004602 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b21      	cmp	r3, #33	; 0x21
 8004876:	d13e      	bne.n	80048f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004880:	d114      	bne.n	80048ac <UART_Transmit_IT+0x48>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d110      	bne.n	80048ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]
 80048aa:	e008      	b.n	80048be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	1c59      	adds	r1, r3, #1
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6211      	str	r1, [r2, #32]
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4619      	mov	r1, r3
 80048cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10f      	bne.n	80048f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fe64 	bl	80045f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08c      	sub	sp, #48	; 0x30
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b22      	cmp	r3, #34	; 0x22
 8004944:	f040 80ae 	bne.w	8004aa4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004950:	d117      	bne.n	8004982 <UART_Receive_IT+0x50>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d113      	bne.n	8004982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004970:	b29a      	uxth	r2, r3
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	1c9a      	adds	r2, r3, #2
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
 8004980:	e026      	b.n	80049d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d007      	beq.n	80049a6 <UART_Receive_IT+0x74>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <UART_Receive_IT+0x82>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e008      	b.n	80049c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29b      	uxth	r3, r3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4619      	mov	r1, r3
 80049de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d15d      	bne.n	8004aa0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0220 	bic.w	r2, r2, #32
 80049f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d135      	bne.n	8004a96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 0310 	bic.w	r3, r3, #16
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	623a      	str	r2, [r7, #32]
 8004a52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d10a      	bne.n	8004a88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff fdc0 	bl	8004614 <HAL_UARTEx_RxEventCallback>
 8004a94:	e002      	b.n	8004a9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fb32 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e002      	b.n	8004aa6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3730      	adds	r7, #48	; 0x30
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004aea:	f023 030c 	bic.w	r3, r3, #12
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	430b      	orrs	r3, r1
 8004af6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <UART_SetConfig+0x114>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d103      	bne.n	8004b20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b18:	f7fe ff34 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	e002      	b.n	8004b26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe ff1c 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004b24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009a      	lsls	r2, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <UART_SetConfig+0x118>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	0119      	lsls	r1, r3, #4
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009a      	lsls	r2, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <UART_SetConfig+0x118>)
 8004b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2064      	movs	r0, #100	; 0x64
 8004b66:	fb00 f303 	mul.w	r3, r0, r3
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	3332      	adds	r3, #50	; 0x32
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <UART_SetConfig+0x118>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b7c:	4419      	add	r1, r3
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009a      	lsls	r2, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <UART_SetConfig+0x118>)
 8004b96:	fba3 0302 	umull	r0, r3, r3, r2
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2064      	movs	r0, #100	; 0x64
 8004b9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	3332      	adds	r3, #50	; 0x32
 8004ba8:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <UART_SetConfig+0x118>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	f003 020f 	and.w	r2, r3, #15
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	440a      	add	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40013800 	.word	0x40013800
 8004bc8:	51eb851f 	.word	0x51eb851f

08004bcc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd2:	f3ef 8305 	mrs	r3, IPSR
 8004bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10f      	bne.n	8004bfe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8310 	mrs	r3, PRIMASK
 8004be2:	607b      	str	r3, [r7, #4]
  return(result);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <osKernelInitialize+0x32>
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <osKernelInitialize+0x60>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d109      	bne.n	8004c06 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004bfe:	f06f 0305 	mvn.w	r3, #5
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e00c      	b.n	8004c20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <osKernelInitialize+0x60>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <osKernelInitialize+0x60>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e002      	b.n	8004c20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c20:	68fb      	ldr	r3, [r7, #12]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	20000204 	.word	0x20000204

08004c30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c36:	f3ef 8305 	mrs	r3, IPSR
 8004c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c42:	f3ef 8310 	mrs	r3, PRIMASK
 8004c46:	607b      	str	r3, [r7, #4]
  return(result);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <osKernelStart+0x32>
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <osKernelStart+0x64>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d109      	bne.n	8004c6a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c56:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c62:	f06f 0305 	mvn.w	r3, #5
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e00e      	b.n	8004c88 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <osKernelStart+0x64>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <osKernelStart+0x64>)
 8004c74:	2202      	movs	r2, #2
 8004c76:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004c78:	f001 fa4a 	bl	8006110 <vTaskStartScheduler>
      stat = osOK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e002      	b.n	8004c88 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
 8004c86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c88:	68fb      	ldr	r3, [r7, #12]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000204 	.word	0x20000204

08004c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b092      	sub	sp, #72	; 0x48
 8004c9c:	af04      	add	r7, sp, #16
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca8:	f3ef 8305 	mrs	r3, IPSR
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8094 	bne.w	8004dde <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cba:	623b      	str	r3, [r7, #32]
  return(result);
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 808d 	bne.w	8004dde <osThreadNew+0x146>
 8004cc4:	4b48      	ldr	r3, [pc, #288]	; (8004de8 <osThreadNew+0x150>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d106      	bne.n	8004cda <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f040 8082 	bne.w	8004dde <osThreadNew+0x146>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d07e      	beq.n	8004dde <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004ce4:	2318      	movs	r3, #24
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004ce8:	2300      	movs	r3, #0
 8004cea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004cec:	f107 031b 	add.w	r3, r7, #27
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d045      	beq.n	8004d8a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <osThreadNew+0x74>
        name = attr->name;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <osThreadNew+0x9a>
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	2b38      	cmp	r3, #56	; 0x38
 8004d24:	d805      	bhi.n	8004d32 <osThreadNew+0x9a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <osThreadNew+0x9e>
        return (NULL);
 8004d32:	2300      	movs	r3, #0
 8004d34:	e054      	b.n	8004de0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00e      	beq.n	8004d6c <osThreadNew+0xd4>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b5b      	cmp	r3, #91	; 0x5b
 8004d54:	d90a      	bls.n	8004d6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <osThreadNew+0xd4>
        mem = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	e010      	b.n	8004d8e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10c      	bne.n	8004d8e <osThreadNew+0xf6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d108      	bne.n	8004d8e <osThreadNew+0xf6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <osThreadNew+0xf6>
          mem = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d88:	e001      	b.n	8004d8e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d110      	bne.n	8004db6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d9c:	9202      	str	r2, [sp, #8]
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 ff66 	bl	8005c7c <xTaskCreateStatic>
 8004db0:	4603      	mov	r3, r0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e013      	b.n	8004dde <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 ffb0 	bl	8005d34 <xTaskCreate>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <osThreadNew+0x146>
          hTask = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dde:	697b      	ldr	r3, [r7, #20]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3738      	adds	r7, #56	; 0x38
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000204 	.word	0x20000204

08004dec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df4:	f3ef 8305 	mrs	r3, IPSR
 8004df8:	613b      	str	r3, [r7, #16]
  return(result);
 8004dfa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10f      	bne.n	8004e20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e00:	f3ef 8310 	mrs	r3, PRIMASK
 8004e04:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <osDelay+0x34>
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <osDelay+0x58>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d109      	bne.n	8004e28 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e14:	f3ef 8311 	mrs	r3, BASEPRI
 8004e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <osDelay+0x3c>
    stat = osErrorISR;
 8004e20:	f06f 0305 	mvn.w	r3, #5
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	e007      	b.n	8004e38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 f938 	bl	80060a8 <vTaskDelay>
    }
  }

  return (stat);
 8004e38:	697b      	ldr	r3, [r7, #20]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000204 	.word	0x20000204

08004e48 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e50:	f3ef 8305 	mrs	r3, IPSR
 8004e54:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e56:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10f      	bne.n	8004e7c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e60:	617b      	str	r3, [r7, #20]
  return(result);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <osDelayUntil+0x34>
 8004e68:	4b10      	ldr	r3, [pc, #64]	; (8004eac <osDelayUntil+0x64>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d109      	bne.n	8004e84 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e70:	f3ef 8311 	mrs	r3, BASEPRI
 8004e74:	613b      	str	r3, [r7, #16]
  return(result);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8004e7c:	f06f 0305 	mvn.w	r3, #5
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	e00e      	b.n	8004ea2 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8004e88:	f001 fa54 	bl	8006334 <xTaskGetTickCount>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	1ad2      	subs	r2, r2, r3
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f885 	bl	8005fac <vTaskDelayUntil>
  }

  return (stat);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000204 	.word	0x20000204

08004eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <vApplicationGetIdleTaskMemory+0x28>)
 8004ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4a05      	ldr	r2, [pc, #20]	; (8004edc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2280      	movs	r2, #128	; 0x80
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	20000208 	.word	0x20000208
 8004edc:	20000264 	.word	0x20000264

08004ee0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a07      	ldr	r2, [pc, #28]	; (8004f0c <vApplicationGetTimerTaskMemory+0x2c>)
 8004ef0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a06      	ldr	r2, [pc, #24]	; (8004f10 <vApplicationGetTimerTaskMemory+0x30>)
 8004ef6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004efe:	601a      	str	r2, [r3, #0]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000464 	.word	0x20000464
 8004f10:	200004c0 	.word	0x200004c0

08004f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0208 	add.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f103 0208 	add.w	r2, r3, #8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f103 0208 	add.w	r2, r3, #8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d103      	bne.n	8004fd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e00c      	b.n	8004fea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e002      	b.n	8004fde <vListInsert+0x2e>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d2f6      	bcs.n	8004fd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6892      	ldr	r2, [r2, #8]
 8005036:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6852      	ldr	r2, [r2, #4]
 8005040:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d103      	bne.n	8005054 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	1e5a      	subs	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
	...

08005074 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800509e:	f002 f965 	bl	800736c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
 80050b2:	441a      	add	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	3b01      	subs	r3, #1
 80050d0:	68f9      	ldr	r1, [r7, #12]
 80050d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	22ff      	movs	r2, #255	; 0xff
 80050e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d114      	bne.n	800511e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01a      	beq.n	8005132 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3310      	adds	r3, #16
 8005100:	4618      	mov	r0, r3
 8005102:	f001 fa8f 	bl	8006624 <xTaskRemoveFromEventList>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d012      	beq.n	8005132 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <xQueueGenericReset+0xcc>)
 800510e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	e009      	b.n	8005132 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3310      	adds	r3, #16
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fef6 	bl	8004f14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3324      	adds	r3, #36	; 0x24
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fef1 	bl	8004f14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005132:	f002 f94b 	bl	80073cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005136:	2301      	movs	r3, #1
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	e000ed04 	.word	0xe000ed04

08005144 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08e      	sub	sp, #56	; 0x38
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <xQueueGenericCreateStatic+0x52>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <xQueueGenericCreateStatic+0x56>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <xQueueGenericCreateStatic+0x58>
 800519a:	2300      	movs	r3, #0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	623b      	str	r3, [r7, #32]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <xQueueGenericCreateStatic+0x7e>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueGenericCreateStatic+0x82>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueGenericCreateStatic+0x84>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61fb      	str	r3, [r7, #28]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051e2:	2350      	movs	r3, #80	; 0x50
 80051e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b50      	cmp	r3, #80	; 0x50
 80051ea:	d00a      	beq.n	8005202 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	61bb      	str	r3, [r7, #24]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005214:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f843 	bl	80052ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800522a:	4618      	mov	r0, r3
 800522c:	3730      	adds	r7, #48	; 0x30
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005232:	b580      	push	{r7, lr}
 8005234:	b08a      	sub	sp, #40	; 0x28
 8005236:	af02      	add	r7, sp, #8
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	4613      	mov	r3, r2
 800523e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	613b      	str	r3, [r7, #16]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e004      	b.n	8005272 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	3350      	adds	r3, #80	; 0x50
 8005276:	4618      	mov	r0, r3
 8005278:	f002 f978 	bl	800756c <pvPortMalloc>
 800527c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00f      	beq.n	80052a4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	3350      	adds	r3, #80	; 0x50
 8005288:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005292:	79fa      	ldrb	r2, [r7, #7]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f805 	bl	80052ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052a4:	69bb      	ldr	r3, [r7, #24]
	}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	e002      	b.n	80052d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052dc:	2101      	movs	r1, #1
 80052de:	69b8      	ldr	r0, [r7, #24]
 80052e0:	f7ff fec8 	bl	8005074 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08e      	sub	sp, #56	; 0x38
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005302:	2300      	movs	r3, #0
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <xQueueGenericSend+0x32>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d103      	bne.n	8005334 <xQueueGenericSend+0x40>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <xQueueGenericSend+0x44>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <xQueueGenericSend+0x46>
 8005338:	2300      	movs	r3, #0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <xQueueGenericSend+0x60>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d103      	bne.n	8005362 <xQueueGenericSend+0x6e>
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <xQueueGenericSend+0x72>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <xQueueGenericSend+0x74>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <xQueueGenericSend+0x8e>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	623b      	str	r3, [r7, #32]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005382:	f001 fb11 	bl	80069a8 <xTaskGetSchedulerState>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <xQueueGenericSend+0x9e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <xQueueGenericSend+0xa2>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <xQueueGenericSend+0xa4>
 8005396:	2300      	movs	r3, #0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	61fb      	str	r3, [r7, #28]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053b2:	f001 ffdb 	bl	800736c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <xQueueGenericSend+0xd4>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d129      	bne.n	800541c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ce:	f000 fae9 	bl	80059a4 <prvCopyDataToQueue>
 80053d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d010      	beq.n	80053fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	3324      	adds	r3, #36	; 0x24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 f91f 	bl	8006624 <xTaskRemoveFromEventList>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d013      	beq.n	8005414 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053ec:	4b3f      	ldr	r3, [pc, #252]	; (80054ec <xQueueGenericSend+0x1f8>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	e00a      	b.n	8005414 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005404:	4b39      	ldr	r3, [pc, #228]	; (80054ec <xQueueGenericSend+0x1f8>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005414:	f001 ffda 	bl	80073cc <vPortExitCritical>
				return pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	e063      	b.n	80054e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005422:	f001 ffd3 	bl	80073cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005426:	2300      	movs	r3, #0
 8005428:	e05c      	b.n	80054e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005430:	f107 0314 	add.w	r3, r7, #20
 8005434:	4618      	mov	r0, r3
 8005436:	f001 f959 	bl	80066ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800543e:	f001 ffc5 	bl	80073cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005442:	f000 fecb 	bl	80061dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005446:	f001 ff91 	bl	800736c <vPortEnterCritical>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005450:	b25b      	sxtb	r3, r3
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d103      	bne.n	8005460 <xQueueGenericSend+0x16c>
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005466:	b25b      	sxtb	r3, r3
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d103      	bne.n	8005476 <xQueueGenericSend+0x182>
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005476:	f001 ffa9 	bl	80073cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800547a:	1d3a      	adds	r2, r7, #4
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	4611      	mov	r1, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f001 f948 	bl	8006718 <xTaskCheckForTimeOut>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d124      	bne.n	80054d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800548e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005490:	f000 fb80 	bl	8005b94 <prvIsQueueFull>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d018      	beq.n	80054cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	3310      	adds	r3, #16
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f86e 	bl	8006584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054aa:	f000 fb0b 	bl	8005ac4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054ae:	f000 fea3 	bl	80061f8 <xTaskResumeAll>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f47f af7c 	bne.w	80053b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <xQueueGenericSend+0x1f8>)
 80054bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	e772      	b.n	80053b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ce:	f000 faf9 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054d2:	f000 fe91 	bl	80061f8 <xTaskResumeAll>
 80054d6:	e76c      	b.n	80053b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054da:	f000 faf3 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054de:	f000 fe8b 	bl	80061f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054e2:	2300      	movs	r3, #0
		}
	}
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3738      	adds	r7, #56	; 0x38
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	e000ed04 	.word	0xe000ed04

080054f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08e      	sub	sp, #56	; 0x38
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <xQueueGenericSendFromISR+0x3c>
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <xQueueGenericSendFromISR+0x40>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <xQueueGenericSendFromISR+0x42>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	623b      	str	r3, [r7, #32]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d103      	bne.n	800555a <xQueueGenericSendFromISR+0x6a>
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <xQueueGenericSendFromISR+0x6e>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <xQueueGenericSendFromISR+0x70>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61fb      	str	r3, [r7, #28]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800557a:	f001 ffb9 	bl	80074f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800557e:	f3ef 8211 	mrs	r2, BASEPRI
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	61ba      	str	r2, [r7, #24]
 8005594:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005596:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d302      	bcc.n	80055ac <xQueueGenericSendFromISR+0xbc>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d12c      	bne.n	8005606 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055bc:	f000 f9f2 	bl	80059a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d112      	bne.n	80055f0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	3324      	adds	r3, #36	; 0x24
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f824 	bl	8006624 <xTaskRemoveFromEventList>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00e      	beq.n	8005600 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e007      	b.n	8005600 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f4:	3301      	adds	r3, #1
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	b25a      	sxtb	r2, r3
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005600:	2301      	movs	r3, #1
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005604:	e001      	b.n	800560a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005614:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005618:	4618      	mov	r0, r3
 800561a:	3738      	adds	r7, #56	; 0x38
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xQueueReceive+0x30>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	623b      	str	r3, [r7, #32]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <xQueueReceive+0x3e>
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <xQueueReceive+0x42>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueReceive+0x44>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueReceive+0x5e>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	61fb      	str	r3, [r7, #28]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800567e:	f001 f993 	bl	80069a8 <xTaskGetSchedulerState>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <xQueueReceive+0x6e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <xQueueReceive+0x72>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <xQueueReceive+0x74>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xQueueReceive+0x8e>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	61bb      	str	r3, [r7, #24]
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ae:	f001 fe5d 	bl	800736c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01f      	beq.n	80056fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c2:	f000 f9d9 	bl	8005a78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00f      	beq.n	80056f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	3310      	adds	r3, #16
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 ffa2 	bl	8006624 <xTaskRemoveFromEventList>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056e6:	4b3d      	ldr	r3, [pc, #244]	; (80057dc <xQueueReceive+0x1bc>)
 80056e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056f6:	f001 fe69 	bl	80073cc <vPortExitCritical>
				return pdPASS;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e069      	b.n	80057d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d103      	bne.n	800570c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005704:	f001 fe62 	bl	80073cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005708:	2300      	movs	r3, #0
 800570a:	e062      	b.n	80057d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005712:	f107 0310 	add.w	r3, r7, #16
 8005716:	4618      	mov	r0, r3
 8005718:	f000 ffe8 	bl	80066ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800571c:	2301      	movs	r3, #1
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005720:	f001 fe54 	bl	80073cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005724:	f000 fd5a 	bl	80061dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005728:	f001 fe20 	bl	800736c <vPortEnterCritical>
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005732:	b25b      	sxtb	r3, r3
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d103      	bne.n	8005742 <xQueueReceive+0x122>
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005748:	b25b      	sxtb	r3, r3
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d103      	bne.n	8005758 <xQueueReceive+0x138>
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005758:	f001 fe38 	bl	80073cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800575c:	1d3a      	adds	r2, r7, #4
 800575e:	f107 0310 	add.w	r3, r7, #16
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f000 ffd7 	bl	8006718 <xTaskCheckForTimeOut>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d123      	bne.n	80057b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005772:	f000 f9f9 	bl	8005b68 <prvIsQueueEmpty>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fefd 	bl	8006584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800578a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800578c:	f000 f99a 	bl	8005ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005790:	f000 fd32 	bl	80061f8 <xTaskResumeAll>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d189      	bne.n	80056ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <xQueueReceive+0x1bc>)
 800579c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	e780      	b.n	80056ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ae:	f000 f989 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057b2:	f000 fd21 	bl	80061f8 <xTaskResumeAll>
 80057b6:	e77a      	b.n	80056ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ba:	f000 f983 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057be:	f000 fd1b 	bl	80061f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c4:	f000 f9d0 	bl	8005b68 <prvIsQueueEmpty>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f43f af6f 	beq.w	80056ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3730      	adds	r7, #48	; 0x30
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	e000ed04 	.word	0xe000ed04

080057e0 <xQueuePeek>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <xQueuePeek+0x30>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <xQueuePeek+0x3e>
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <xQueuePeek+0x42>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <xQueuePeek+0x44>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueuePeek+0x5e>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	623b      	str	r3, [r7, #32]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800583e:	f001 f8b3 	bl	80069a8 <xTaskGetSchedulerState>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <xQueuePeek+0x6e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <xQueuePeek+0x72>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <xQueuePeek+0x74>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xQueuePeek+0x8e>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61fb      	str	r3, [r7, #28]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xQueuePeek+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800586e:	f001 fd7d 	bl	800736c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d021      	beq.n	80058c2 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005888:	f000 f8f6 	bl	8005a78 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005890:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00f      	beq.n	80058ba <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	3324      	adds	r3, #36	; 0x24
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fec0 	bl	8006624 <xTaskRemoveFromEventList>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80058aa:	4b3d      	ldr	r3, [pc, #244]	; (80059a0 <xQueuePeek+0x1c0>)
 80058ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058ba:	f001 fd87 	bl	80073cc <vPortExitCritical>
				return pdPASS;
 80058be:	2301      	movs	r3, #1
 80058c0:	e069      	b.n	8005996 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d103      	bne.n	80058d0 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058c8:	f001 fd80 	bl	80073cc <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e062      	b.n	8005996 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058d6:	f107 0314 	add.w	r3, r7, #20
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 ff06 	bl	80066ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e4:	f001 fd72 	bl	80073cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058e8:	f000 fc78 	bl	80061dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058ec:	f001 fd3e 	bl	800736c <vPortEnterCritical>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f6:	b25b      	sxtb	r3, r3
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d103      	bne.n	8005906 <xQueuePeek+0x126>
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800590c:	b25b      	sxtb	r3, r3
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d103      	bne.n	800591c <xQueuePeek+0x13c>
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591c:	f001 fd56 	bl	80073cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005920:	1d3a      	adds	r2, r7, #4
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fef5 	bl	8006718 <xTaskCheckForTimeOut>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d123      	bne.n	800597c <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005936:	f000 f917 	bl	8005b68 <prvIsQueueEmpty>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d017      	beq.n	8005970 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4611      	mov	r1, r2
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fe1b 	bl	8006584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800594e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005950:	f000 f8b8 	bl	8005ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005954:	f000 fc50 	bl	80061f8 <xTaskResumeAll>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d187      	bne.n	800586e <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 800595e:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <xQueuePeek+0x1c0>)
 8005960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	e77e      	b.n	800586e <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8005970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005972:	f000 f8a7 	bl	8005ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005976:	f000 fc3f 	bl	80061f8 <xTaskResumeAll>
 800597a:	e778      	b.n	800586e <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800597c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800597e:	f000 f8a1 	bl	8005ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005982:	f000 fc39 	bl	80061f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005988:	f000 f8ee 	bl	8005b68 <prvIsQueueEmpty>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	f43f af6d 	beq.w	800586e <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005994:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005996:	4618      	mov	r0, r3
 8005998:	3738      	adds	r7, #56	; 0x38
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d14d      	bne.n	8005a66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 f808 	bl	80069e4 <xTaskPriorityDisinherit>
 80059d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	605a      	str	r2, [r3, #4]
 80059dc:	e043      	b.n	8005a66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d119      	bne.n	8005a18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6898      	ldr	r0, [r3, #8]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	461a      	mov	r2, r3
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	f001 ffc6 	bl	8007980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d32b      	bcc.n	8005a66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	609a      	str	r2, [r3, #8]
 8005a16:	e026      	b.n	8005a66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68d8      	ldr	r0, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	461a      	mov	r2, r3
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	f001 ffac 	bl	8007980 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	425b      	negs	r3, r3
 8005a32:	441a      	add	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d207      	bcs.n	8005a54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	425b      	negs	r3, r3
 8005a4e:	441a      	add	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d105      	bne.n	8005a66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	441a      	add	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d303      	bcc.n	8005aac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68d9      	ldr	r1, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	f001 ff62 	bl	8007980 <memcpy>
	}
}
 8005abc:	bf00      	nop
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005acc:	f001 fc4e 	bl	800736c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad8:	e011      	b.n	8005afe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d012      	beq.n	8005b08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3324      	adds	r3, #36	; 0x24
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fd9c 	bl	8006624 <xTaskRemoveFromEventList>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005af2:	f000 fe73 	bl	80067dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	dce9      	bgt.n	8005ada <prvUnlockQueue+0x16>
 8005b06:	e000      	b.n	8005b0a <prvUnlockQueue+0x46>
					break;
 8005b08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b12:	f001 fc5b 	bl	80073cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b16:	f001 fc29 	bl	800736c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b22:	e011      	b.n	8005b48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d012      	beq.n	8005b52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3310      	adds	r3, #16
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fd77 	bl	8006624 <xTaskRemoveFromEventList>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b3c:	f000 fe4e 	bl	80067dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dce9      	bgt.n	8005b24 <prvUnlockQueue+0x60>
 8005b50:	e000      	b.n	8005b54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	22ff      	movs	r2, #255	; 0xff
 8005b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b5c:	f001 fc36 	bl	80073cc <vPortExitCritical>
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b70:	f001 fbfc 	bl	800736c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e001      	b.n	8005b86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b86:	f001 fc21 	bl	80073cc <vPortExitCritical>

	return xReturn;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b9c:	f001 fbe6 	bl	800736c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d102      	bne.n	8005bb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e001      	b.n	8005bb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bb6:	f001 fc09 	bl	80073cc <vPortExitCritical>

	return xReturn;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e014      	b.n	8005bfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <vQueueAddToRegistry+0x4c>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005be0:	490b      	ldr	r1, [pc, #44]	; (8005c10 <vQueueAddToRegistry+0x4c>)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bea:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <vQueueAddToRegistry+0x4c>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bf6:	e006      	b.n	8005c06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	d9e7      	bls.n	8005bd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr
 8005c10:	20001cd8 	.word	0x20001cd8

08005c14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c24:	f001 fba2 	bl	800736c <vPortEnterCritical>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d103      	bne.n	8005c3e <vQueueWaitForMessageRestricted+0x2a>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d103      	bne.n	8005c54 <vQueueWaitForMessageRestricted+0x40>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c54:	f001 fbba 	bl	80073cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3324      	adds	r3, #36	; 0x24
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fcaf 	bl	80065cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c6e:	6978      	ldr	r0, [r7, #20]
 8005c70:	f7ff ff28 	bl	8005ac4 <prvUnlockQueue>
	}
 8005c74:	bf00      	nop
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08e      	sub	sp, #56	; 0x38
 8005c80:	af04      	add	r7, sp, #16
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61fb      	str	r3, [r7, #28]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cc2:	235c      	movs	r3, #92	; 0x5c
 8005cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b5c      	cmp	r3, #92	; 0x5c
 8005cca:	d00a      	beq.n	8005ce2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	61bb      	str	r3, [r7, #24]
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01e      	beq.n	8005d26 <xTaskCreateStatic+0xaa>
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01b      	beq.n	8005d26 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d00:	2300      	movs	r3, #0
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f850 	bl	8005dbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d20:	f000 f8d4 	bl	8005ecc <prvAddNewTaskToReadyList>
 8005d24:	e001      	b.n	8005d2a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d2a:	697b      	ldr	r3, [r7, #20]
	}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	; 0x30
 8005d38:	af04      	add	r7, sp, #16
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 fc0f 	bl	800756c <pvPortMalloc>
 8005d4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00e      	beq.n	8005d74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005d56:	205c      	movs	r0, #92	; 0x5c
 8005d58:	f001 fc08 	bl	800756c <pvPortMalloc>
 8005d5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
 8005d6a:	e005      	b.n	8005d78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d6c:	6978      	ldr	r0, [r7, #20]
 8005d6e:	f001 fcc1 	bl	80076f4 <vPortFree>
 8005d72:	e001      	b.n	8005d78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d017      	beq.n	8005dae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f80e 	bl	8005dbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da2:	69f8      	ldr	r0, [r7, #28]
 8005da4:	f000 f892 	bl	8005ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e002      	b.n	8005db4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
 8005db2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005db4:	69bb      	ldr	r3, [r7, #24]
	}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	21a5      	movs	r1, #165	; 0xa5
 8005dd8:	f001 fde0 	bl	800799c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005de6:	3b01      	subs	r3, #1
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	617b      	str	r3, [r7, #20]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e012      	b.n	8005e42 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	7819      	ldrb	r1, [r3, #0]
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3334      	adds	r3, #52	; 0x34
 8005e2c:	460a      	mov	r2, r1
 8005e2e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b0f      	cmp	r3, #15
 8005e46:	d9e9      	bls.n	8005e1c <prvInitialiseNewTask+0x5e>
 8005e48:	e000      	b.n	8005e4c <prvInitialiseNewTask+0x8e>
		{
			break;
 8005e4a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	2b37      	cmp	r3, #55	; 0x37
 8005e58:	d901      	bls.n	8005e5e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e5a:	2337      	movs	r3, #55	; 0x37
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e68:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff f86c 	bl	8004f52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	3318      	adds	r3, #24
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff f867 	bl	8004f52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	69b8      	ldr	r0, [r7, #24]
 8005eae:	f001 f96d 	bl	800718c <pxPortInitialiseStack>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ec4:	bf00      	nop
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ed4:	f001 fa4a 	bl	800736c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ed8:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <prvAddNewTaskToReadyList+0xc4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	4a2c      	ldr	r2, [pc, #176]	; (8005f90 <prvAddNewTaskToReadyList+0xc4>)
 8005ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ee2:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <prvAddNewTaskToReadyList+0xc8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eea:	4a2a      	ldr	r2, [pc, #168]	; (8005f94 <prvAddNewTaskToReadyList+0xc8>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <prvAddNewTaskToReadyList+0xc4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d110      	bne.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ef8:	f000 fc94 	bl	8006824 <prvInitialiseTaskLists>
 8005efc:	e00d      	b.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005efe:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <prvAddNewTaskToReadyList+0xcc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f06:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <prvAddNewTaskToReadyList+0xc8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d802      	bhi.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f14:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <prvAddNewTaskToReadyList+0xc8>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f1a:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <prvAddNewTaskToReadyList+0xd0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <prvAddNewTaskToReadyList+0xd0>)
 8005f22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <prvAddNewTaskToReadyList+0xd0>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <prvAddNewTaskToReadyList+0xd4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d903      	bls.n	8005f40 <prvAddNewTaskToReadyList+0x74>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <prvAddNewTaskToReadyList+0xd4>)
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <prvAddNewTaskToReadyList+0xd8>)
 8005f4e:	441a      	add	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f7ff f807 	bl	8004f6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f5c:	f001 fa36 	bl	80073cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <prvAddNewTaskToReadyList+0xcc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00e      	beq.n	8005f86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <prvAddNewTaskToReadyList+0xc8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d207      	bcs.n	8005f86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvAddNewTaskToReadyList+0xdc>)
 8005f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000d94 	.word	0x20000d94
 8005f94:	200008c0 	.word	0x200008c0
 8005f98:	20000da0 	.word	0x20000da0
 8005f9c:	20000db0 	.word	0x20000db0
 8005fa0:	20000d9c 	.word	0x20000d9c
 8005fa4:	200008c4 	.word	0x200008c4
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	617b      	str	r3, [r7, #20]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <vTaskDelayUntil+0x46>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	613b      	str	r3, [r7, #16]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005ff2:	4b2a      	ldr	r3, [pc, #168]	; (800609c <vTaskDelayUntil+0xf0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <vTaskDelayUntil+0x64>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60fb      	str	r3, [r7, #12]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006010:	f000 f8e4 	bl	80061dc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006014:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <vTaskDelayUntil+0xf4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4413      	add	r3, r2
 8006022:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a3a      	ldr	r2, [r7, #32]
 800602a:	429a      	cmp	r2, r3
 800602c:	d20b      	bcs.n	8006046 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	429a      	cmp	r2, r3
 8006036:	d211      	bcs.n	800605c <vTaskDelayUntil+0xb0>
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	429a      	cmp	r2, r3
 800603e:	d90d      	bls.n	800605c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	e00a      	b.n	800605c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	429a      	cmp	r2, r3
 800604e:	d303      	bcc.n	8006058 <vTaskDelayUntil+0xac>
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	429a      	cmp	r2, r3
 8006056:	d901      	bls.n	800605c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006058:	2301      	movs	r3, #1
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d006      	beq.n	8006076 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fd25 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006076:	f000 f8bf 	bl	80061f8 <xTaskResumeAll>
 800607a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006082:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <vTaskDelayUntil+0xf8>)
 8006084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006092:	bf00      	nop
 8006094:	3728      	adds	r7, #40	; 0x28
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000dbc 	.word	0x20000dbc
 80060a0:	20000d98 	.word	0x20000d98
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d017      	beq.n	80060ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ba:	4b13      	ldr	r3, [pc, #76]	; (8006108 <vTaskDelay+0x60>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <vTaskDelay+0x30>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	60bb      	str	r3, [r7, #8]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060d8:	f000 f880 	bl	80061dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060dc:	2100      	movs	r1, #0
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fcee 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060e4:	f000 f888 	bl	80061f8 <xTaskResumeAll>
 80060e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d107      	bne.n	8006100 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <vTaskDelay+0x64>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20000dbc 	.word	0x20000dbc
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800611e:	463a      	mov	r2, r7
 8006120:	1d39      	adds	r1, r7, #4
 8006122:	f107 0308 	add.w	r3, r7, #8
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fec2 	bl	8004eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	9202      	str	r2, [sp, #8]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	2300      	movs	r3, #0
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	2300      	movs	r3, #0
 800613c:	460a      	mov	r2, r1
 800613e:	4921      	ldr	r1, [pc, #132]	; (80061c4 <vTaskStartScheduler+0xb4>)
 8006140:	4821      	ldr	r0, [pc, #132]	; (80061c8 <vTaskStartScheduler+0xb8>)
 8006142:	f7ff fd9b 	bl	8005c7c <xTaskCreateStatic>
 8006146:	4603      	mov	r3, r0
 8006148:	4a20      	ldr	r2, [pc, #128]	; (80061cc <vTaskStartScheduler+0xbc>)
 800614a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800614c:	4b1f      	ldr	r3, [pc, #124]	; (80061cc <vTaskStartScheduler+0xbc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e001      	b.n	800615e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d102      	bne.n	800616a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006164:	f000 fd00 	bl	8006b68 <xTimerCreateTimerTask>
 8006168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d116      	bne.n	800619e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	613b      	str	r3, [r7, #16]
}
 8006182:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <vTaskStartScheduler+0xc0>)
 8006186:	f04f 32ff 	mov.w	r2, #4294967295
 800618a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <vTaskStartScheduler+0xc4>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <vTaskStartScheduler+0xc8>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006198:	f001 f876 	bl	8007288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800619c:	e00e      	b.n	80061bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d10a      	bne.n	80061bc <vTaskStartScheduler+0xac>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	60fb      	str	r3, [r7, #12]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <vTaskStartScheduler+0xaa>
}
 80061bc:	bf00      	nop
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	0800a980 	.word	0x0800a980
 80061c8:	080067f5 	.word	0x080067f5
 80061cc:	20000db8 	.word	0x20000db8
 80061d0:	20000db4 	.word	0x20000db4
 80061d4:	20000da0 	.word	0x20000da0
 80061d8:	20000d98 	.word	0x20000d98

080061dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <vTaskSuspendAll+0x18>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	4a03      	ldr	r2, [pc, #12]	; (80061f4 <vTaskSuspendAll+0x18>)
 80061e8:	6013      	str	r3, [r2, #0]
}
 80061ea:	bf00      	nop
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000dbc 	.word	0x20000dbc

080061f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006206:	4b42      	ldr	r3, [pc, #264]	; (8006310 <xTaskResumeAll+0x118>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <xTaskResumeAll+0x2c>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	603b      	str	r3, [r7, #0]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006224:	f001 f8a2 	bl	800736c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006228:	4b39      	ldr	r3, [pc, #228]	; (8006310 <xTaskResumeAll+0x118>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3b01      	subs	r3, #1
 800622e:	4a38      	ldr	r2, [pc, #224]	; (8006310 <xTaskResumeAll+0x118>)
 8006230:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006232:	4b37      	ldr	r3, [pc, #220]	; (8006310 <xTaskResumeAll+0x118>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d162      	bne.n	8006300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800623a:	4b36      	ldr	r3, [pc, #216]	; (8006314 <xTaskResumeAll+0x11c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d05e      	beq.n	8006300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006242:	e02f      	b.n	80062a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006244:	4b34      	ldr	r3, [pc, #208]	; (8006318 <xTaskResumeAll+0x120>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3318      	adds	r3, #24
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fee5 	bl	8005020 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3304      	adds	r3, #4
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fee0 	bl	8005020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006264:	4b2d      	ldr	r3, [pc, #180]	; (800631c <xTaskResumeAll+0x124>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d903      	bls.n	8006274 <xTaskResumeAll+0x7c>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	4a2a      	ldr	r2, [pc, #168]	; (800631c <xTaskResumeAll+0x124>)
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4a27      	ldr	r2, [pc, #156]	; (8006320 <xTaskResumeAll+0x128>)
 8006282:	441a      	add	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3304      	adds	r3, #4
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f7fe fe6d 	bl	8004f6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4b23      	ldr	r3, [pc, #140]	; (8006324 <xTaskResumeAll+0x12c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800629e:	4b22      	ldr	r3, [pc, #136]	; (8006328 <xTaskResumeAll+0x130>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062a4:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <xTaskResumeAll+0x120>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1cb      	bne.n	8006244 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062b2:	f000 fb55 	bl	8006960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <xTaskResumeAll+0x134>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d010      	beq.n	80062e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062c2:	f000 f845 	bl	8006350 <xTaskIncrementTick>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062cc:	4b16      	ldr	r3, [pc, #88]	; (8006328 <xTaskResumeAll+0x130>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f1      	bne.n	80062c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80062de:	4b13      	ldr	r3, [pc, #76]	; (800632c <xTaskResumeAll+0x134>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062e4:	4b10      	ldr	r3, [pc, #64]	; (8006328 <xTaskResumeAll+0x130>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062ec:	2301      	movs	r3, #1
 80062ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <xTaskResumeAll+0x138>)
 80062f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006300:	f001 f864 	bl	80073cc <vPortExitCritical>

	return xAlreadyYielded;
 8006304:	68bb      	ldr	r3, [r7, #8]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000dbc 	.word	0x20000dbc
 8006314:	20000d94 	.word	0x20000d94
 8006318:	20000d54 	.word	0x20000d54
 800631c:	20000d9c 	.word	0x20000d9c
 8006320:	200008c4 	.word	0x200008c4
 8006324:	200008c0 	.word	0x200008c0
 8006328:	20000da8 	.word	0x20000da8
 800632c:	20000da4 	.word	0x20000da4
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800633a:	4b04      	ldr	r3, [pc, #16]	; (800634c <xTaskGetTickCount+0x18>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006340:	687b      	ldr	r3, [r7, #4]
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr
 800634c:	20000d98 	.word	0x20000d98

08006350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800635a:	4b51      	ldr	r3, [pc, #324]	; (80064a0 <xTaskIncrementTick+0x150>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f040 808e 	bne.w	8006480 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006364:	4b4f      	ldr	r3, [pc, #316]	; (80064a4 <xTaskIncrementTick+0x154>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800636c:	4a4d      	ldr	r2, [pc, #308]	; (80064a4 <xTaskIncrementTick+0x154>)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d120      	bne.n	80063ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006378:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <xTaskIncrementTick+0x158>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <xTaskIncrementTick+0x48>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	603b      	str	r3, [r7, #0]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xTaskIncrementTick+0x46>
 8006398:	4b43      	ldr	r3, [pc, #268]	; (80064a8 <xTaskIncrementTick+0x158>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	4b43      	ldr	r3, [pc, #268]	; (80064ac <xTaskIncrementTick+0x15c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a41      	ldr	r2, [pc, #260]	; (80064a8 <xTaskIncrementTick+0x158>)
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	4a41      	ldr	r2, [pc, #260]	; (80064ac <xTaskIncrementTick+0x15c>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	4b40      	ldr	r3, [pc, #256]	; (80064b0 <xTaskIncrementTick+0x160>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	4a3f      	ldr	r2, [pc, #252]	; (80064b0 <xTaskIncrementTick+0x160>)
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	f000 fad3 	bl	8006960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ba:	4b3e      	ldr	r3, [pc, #248]	; (80064b4 <xTaskIncrementTick+0x164>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d34e      	bcc.n	8006462 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063c4:	4b38      	ldr	r3, [pc, #224]	; (80064a8 <xTaskIncrementTick+0x158>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xTaskIncrementTick+0x82>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xTaskIncrementTick+0x84>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d8:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <xTaskIncrementTick+0x164>)
 80063da:	f04f 32ff 	mov.w	r2, #4294967295
 80063de:	601a      	str	r2, [r3, #0]
					break;
 80063e0:	e03f      	b.n	8006462 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063e2:	4b31      	ldr	r3, [pc, #196]	; (80064a8 <xTaskIncrementTick+0x158>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d203      	bcs.n	8006402 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063fa:	4a2e      	ldr	r2, [pc, #184]	; (80064b4 <xTaskIncrementTick+0x164>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6013      	str	r3, [r2, #0]
						break;
 8006400:	e02f      	b.n	8006462 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3304      	adds	r3, #4
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fe0a 	bl	8005020 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3318      	adds	r3, #24
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fe01 	bl	8005020 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <xTaskIncrementTick+0x168>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d903      	bls.n	8006432 <xTaskIncrementTick+0xe2>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <xTaskIncrementTick+0x168>)
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <xTaskIncrementTick+0x16c>)
 8006440:	441a      	add	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe fd8e 	bl	8004f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <xTaskIncrementTick+0x170>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	429a      	cmp	r2, r3
 800645a:	d3b3      	bcc.n	80063c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800645c:	2301      	movs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006460:	e7b0      	b.n	80063c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006462:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <xTaskIncrementTick+0x170>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	4914      	ldr	r1, [pc, #80]	; (80064bc <xTaskIncrementTick+0x16c>)
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d907      	bls.n	800648a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800647a:	2301      	movs	r3, #1
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e004      	b.n	800648a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006480:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <xTaskIncrementTick+0x174>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	4a0f      	ldr	r2, [pc, #60]	; (80064c4 <xTaskIncrementTick+0x174>)
 8006488:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <xTaskIncrementTick+0x178>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006492:	2301      	movs	r3, #1
 8006494:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006496:	697b      	ldr	r3, [r7, #20]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000dbc 	.word	0x20000dbc
 80064a4:	20000d98 	.word	0x20000d98
 80064a8:	20000d4c 	.word	0x20000d4c
 80064ac:	20000d50 	.word	0x20000d50
 80064b0:	20000dac 	.word	0x20000dac
 80064b4:	20000db4 	.word	0x20000db4
 80064b8:	20000d9c 	.word	0x20000d9c
 80064bc:	200008c4 	.word	0x200008c4
 80064c0:	200008c0 	.word	0x200008c0
 80064c4:	20000da4 	.word	0x20000da4
 80064c8:	20000da8 	.word	0x20000da8

080064cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <vTaskSwitchContext+0xa4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064da:	4b26      	ldr	r3, [pc, #152]	; (8006574 <vTaskSwitchContext+0xa8>)
 80064dc:	2201      	movs	r2, #1
 80064de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064e0:	e041      	b.n	8006566 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80064e2:	4b24      	ldr	r3, [pc, #144]	; (8006574 <vTaskSwitchContext+0xa8>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064e8:	4b23      	ldr	r3, [pc, #140]	; (8006578 <vTaskSwitchContext+0xac>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e010      	b.n	8006512 <vTaskSwitchContext+0x46>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <vTaskSwitchContext+0x40>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	607b      	str	r3, [r7, #4]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <vTaskSwitchContext+0x3e>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3b01      	subs	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	491a      	ldr	r1, [pc, #104]	; (800657c <vTaskSwitchContext+0xb0>)
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0e4      	beq.n	80064f0 <vTaskSwitchContext+0x24>
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4a12      	ldr	r2, [pc, #72]	; (800657c <vTaskSwitchContext+0xb0>)
 8006532:	4413      	add	r3, r2
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	605a      	str	r2, [r3, #4]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3308      	adds	r3, #8
 8006548:	429a      	cmp	r2, r3
 800654a:	d104      	bne.n	8006556 <vTaskSwitchContext+0x8a>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4a08      	ldr	r2, [pc, #32]	; (8006580 <vTaskSwitchContext+0xb4>)
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4a05      	ldr	r2, [pc, #20]	; (8006578 <vTaskSwitchContext+0xac>)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6013      	str	r3, [r2, #0]
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	20000dbc 	.word	0x20000dbc
 8006574:	20000da8 	.word	0x20000da8
 8006578:	20000d9c 	.word	0x20000d9c
 800657c:	200008c4 	.word	0x200008c4
 8006580:	200008c0 	.word	0x200008c0

08006584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	60fb      	str	r3, [r7, #12]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <vTaskPlaceOnEventList+0x44>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3318      	adds	r3, #24
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fe fcfc 	bl	8004fb0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b8:	2101      	movs	r1, #1
 80065ba:	6838      	ldr	r0, [r7, #0]
 80065bc:	f000 fa80 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	200008c0 	.word	0x200008c0

080065cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	617b      	str	r3, [r7, #20]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <vTaskPlaceOnEventListRestricted+0x54>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3318      	adds	r3, #24
 80065fa:	4619      	mov	r1, r3
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7fe fcb4 	bl	8004f6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	68b8      	ldr	r0, [r7, #8]
 8006612:	f000 fa55 	bl	8006ac0 <prvAddCurrentTaskToDelayedList>
	}
 8006616:	bf00      	nop
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200008c0 	.word	0x200008c0

08006624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60fb      	str	r3, [r7, #12]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fce3 	bl	8005020 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800665a:	4b1e      	ldr	r3, [pc, #120]	; (80066d4 <xTaskRemoveFromEventList+0xb0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11d      	bne.n	800669e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fcda 	bl	8005020 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006670:	4b19      	ldr	r3, [pc, #100]	; (80066d8 <xTaskRemoveFromEventList+0xb4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d903      	bls.n	8006680 <xTaskRemoveFromEventList+0x5c>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <xTaskRemoveFromEventList+0xb4>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <xTaskRemoveFromEventList+0xb8>)
 800668e:	441a      	add	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7fe fc67 	bl	8004f6a <vListInsertEnd>
 800669c:	e005      	b.n	80066aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3318      	adds	r3, #24
 80066a2:	4619      	mov	r1, r3
 80066a4:	480e      	ldr	r0, [pc, #56]	; (80066e0 <xTaskRemoveFromEventList+0xbc>)
 80066a6:	f7fe fc60 	bl	8004f6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <xTaskRemoveFromEventList+0xc0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d905      	bls.n	80066c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <xTaskRemoveFromEventList+0xc4>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e001      	b.n	80066c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066c8:	697b      	ldr	r3, [r7, #20]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000dbc 	.word	0x20000dbc
 80066d8:	20000d9c 	.word	0x20000d9c
 80066dc:	200008c4 	.word	0x200008c4
 80066e0:	20000d54 	.word	0x20000d54
 80066e4:	200008c0 	.word	0x200008c0
 80066e8:	20000da8 	.word	0x20000da8

080066ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066f4:	4b06      	ldr	r3, [pc, #24]	; (8006710 <vTaskInternalSetTimeOutState+0x24>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <vTaskInternalSetTimeOutState+0x28>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	605a      	str	r2, [r3, #4]
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000dac 	.word	0x20000dac
 8006714:	20000d98 	.word	0x20000d98

08006718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	613b      	str	r3, [r7, #16]
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60fb      	str	r3, [r7, #12]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800675a:	f000 fe07 	bl	800736c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800675e:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <xTaskCheckForTimeOut+0xbc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d102      	bne.n	800677e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006778:	2300      	movs	r3, #0
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e023      	b.n	80067c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <xTaskCheckForTimeOut+0xc0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d007      	beq.n	800679a <xTaskCheckForTimeOut+0x82>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	429a      	cmp	r2, r3
 8006792:	d302      	bcc.n	800679a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006794:	2301      	movs	r3, #1
 8006796:	61fb      	str	r3, [r7, #28]
 8006798:	e015      	b.n	80067c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d20b      	bcs.n	80067bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	1ad2      	subs	r2, r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff9b 	bl	80066ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e004      	b.n	80067c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067c6:	f000 fe01 	bl	80073cc <vPortExitCritical>

	return xReturn;
 80067ca:	69fb      	ldr	r3, [r7, #28]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000d98 	.word	0x20000d98
 80067d8:	20000dac 	.word	0x20000dac

080067dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067e0:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <vTaskMissedYield+0x14>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	bf00      	nop
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000da8 	.word	0x20000da8

080067f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067fc:	f000 f852 	bl	80068a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <prvIdleTask+0x28>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d9f9      	bls.n	80067fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <prvIdleTask+0x2c>)
 800680a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006818:	e7f0      	b.n	80067fc <prvIdleTask+0x8>
 800681a:	bf00      	nop
 800681c:	200008c4 	.word	0x200008c4
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
 800682e:	e00c      	b.n	800684a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4a12      	ldr	r2, [pc, #72]	; (8006884 <prvInitialiseTaskLists+0x60>)
 800683c:	4413      	add	r3, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fb68 	bl	8004f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3301      	adds	r3, #1
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b37      	cmp	r3, #55	; 0x37
 800684e:	d9ef      	bls.n	8006830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006850:	480d      	ldr	r0, [pc, #52]	; (8006888 <prvInitialiseTaskLists+0x64>)
 8006852:	f7fe fb5f 	bl	8004f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006856:	480d      	ldr	r0, [pc, #52]	; (800688c <prvInitialiseTaskLists+0x68>)
 8006858:	f7fe fb5c 	bl	8004f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800685c:	480c      	ldr	r0, [pc, #48]	; (8006890 <prvInitialiseTaskLists+0x6c>)
 800685e:	f7fe fb59 	bl	8004f14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006862:	480c      	ldr	r0, [pc, #48]	; (8006894 <prvInitialiseTaskLists+0x70>)
 8006864:	f7fe fb56 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006868:	480b      	ldr	r0, [pc, #44]	; (8006898 <prvInitialiseTaskLists+0x74>)
 800686a:	f7fe fb53 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <prvInitialiseTaskLists+0x78>)
 8006870:	4a05      	ldr	r2, [pc, #20]	; (8006888 <prvInitialiseTaskLists+0x64>)
 8006872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <prvInitialiseTaskLists+0x7c>)
 8006876:	4a05      	ldr	r2, [pc, #20]	; (800688c <prvInitialiseTaskLists+0x68>)
 8006878:	601a      	str	r2, [r3, #0]
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200008c4 	.word	0x200008c4
 8006888:	20000d24 	.word	0x20000d24
 800688c:	20000d38 	.word	0x20000d38
 8006890:	20000d54 	.word	0x20000d54
 8006894:	20000d68 	.word	0x20000d68
 8006898:	20000d80 	.word	0x20000d80
 800689c:	20000d4c 	.word	0x20000d4c
 80068a0:	20000d50 	.word	0x20000d50

080068a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068aa:	e019      	b.n	80068e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068ac:	f000 fd5e 	bl	800736c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068b0:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <prvCheckTasksWaitingTermination+0x50>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe fbaf 	bl	8005020 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <prvCheckTasksWaitingTermination+0x54>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	4a0b      	ldr	r2, [pc, #44]	; (80068f8 <prvCheckTasksWaitingTermination+0x54>)
 80068ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <prvCheckTasksWaitingTermination+0x58>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <prvCheckTasksWaitingTermination+0x58>)
 80068d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068d6:	f000 fd79 	bl	80073cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f810 	bl	8006900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <prvCheckTasksWaitingTermination+0x58>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e1      	bne.n	80068ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000d68 	.word	0x20000d68
 80068f8:	20000d94 	.word	0x20000d94
 80068fc:	20000d7c 	.word	0x20000d7c

08006900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800690e:	2b00      	cmp	r3, #0
 8006910:	d108      	bne.n	8006924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	4618      	mov	r0, r3
 8006918:	f000 feec 	bl	80076f4 <vPortFree>
				vPortFree( pxTCB );
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fee9 	bl	80076f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006922:	e018      	b.n	8006956 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800692a:	2b01      	cmp	r3, #1
 800692c:	d103      	bne.n	8006936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fee0 	bl	80076f4 <vPortFree>
	}
 8006934:	e00f      	b.n	8006956 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800693c:	2b02      	cmp	r3, #2
 800693e:	d00a      	beq.n	8006956 <prvDeleteTCB+0x56>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <prvDeleteTCB+0x54>
	}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <prvResetNextTaskUnblockTime+0x40>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <prvResetNextTaskUnblockTime+0x14>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <prvResetNextTaskUnblockTime+0x16>
 8006974:	2300      	movs	r3, #0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <prvResetNextTaskUnblockTime+0x44>)
 800697c:	f04f 32ff 	mov.w	r2, #4294967295
 8006980:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006982:	e008      	b.n	8006996 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <prvResetNextTaskUnblockTime+0x40>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <prvResetNextTaskUnblockTime+0x44>)
 8006994:	6013      	str	r3, [r2, #0]
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr
 80069a0:	20000d4c 	.word	0x20000d4c
 80069a4:	20000db4 	.word	0x20000db4

080069a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <xTaskGetSchedulerState+0x34>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069b6:	2301      	movs	r3, #1
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e008      	b.n	80069ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <xTaskGetSchedulerState+0x38>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069c4:	2302      	movs	r3, #2
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	e001      	b.n	80069ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069ce:	687b      	ldr	r3, [r7, #4]
	}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000da0 	.word	0x20000da0
 80069e0:	20000dbc 	.word	0x20000dbc

080069e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d056      	beq.n	8006aa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069fa:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <xTaskPriorityDisinherit+0xd0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d00a      	beq.n	8006a1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60bb      	str	r3, [r7, #8]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3c:	1e5a      	subs	r2, r3, #1
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d02c      	beq.n	8006aa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d128      	bne.n	8006aa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fae0 	bl	8005020 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <xTaskPriorityDisinherit+0xd4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d903      	bls.n	8006a88 <xTaskPriorityDisinherit+0xa4>
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a0c      	ldr	r2, [pc, #48]	; (8006ab8 <xTaskPriorityDisinherit+0xd4>)
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4a09      	ldr	r2, [pc, #36]	; (8006abc <xTaskPriorityDisinherit+0xd8>)
 8006a96:	441a      	add	r2, r3
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f7fe fa63 	bl	8004f6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aa8:	697b      	ldr	r3, [r7, #20]
	}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200008c0 	.word	0x200008c0
 8006ab8:	20000d9c 	.word	0x20000d9c
 8006abc:	200008c4 	.word	0x200008c4

08006ac0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe faa2 	bl	8005020 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d10a      	bne.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4819      	ldr	r0, [pc, #100]	; (8006b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8006af4:	f7fe fa39 	bl	8004f6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006af8:	e026      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d209      	bcs.n	8006b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe fa46 	bl	8004fb0 <vListInsert>
}
 8006b24:	e010      	b.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fe fa3c 	bl	8004fb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d202      	bcs.n	8006b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b42:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6013      	str	r3, [r2, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000d98 	.word	0x20000d98
 8006b54:	200008c0 	.word	0x200008c0
 8006b58:	20000d80 	.word	0x20000d80
 8006b5c:	20000d50 	.word	0x20000d50
 8006b60:	20000d4c 	.word	0x20000d4c
 8006b64:	20000db4 	.word	0x20000db4

08006b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	; 0x28
 8006b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b72:	f000 facb 	bl	800710c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <xTimerCreateTimerTask+0x80>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d021      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b86:	1d3a      	adds	r2, r7, #4
 8006b88:	f107 0108 	add.w	r1, r7, #8
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe f9a5 	bl	8004ee0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	9202      	str	r2, [sp, #8]
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	4910      	ldr	r1, [pc, #64]	; (8006bec <xTimerCreateTimerTask+0x84>)
 8006baa:	4811      	ldr	r0, [pc, #68]	; (8006bf0 <xTimerCreateTimerTask+0x88>)
 8006bac:	f7ff f866 	bl	8005c7c <xTaskCreateStatic>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <xTimerCreateTimerTask+0x8c>)
 8006bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <xTimerCreateTimerTask+0x8c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	613b      	str	r3, [r7, #16]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bde:	697b      	ldr	r3, [r7, #20]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000df0 	.word	0x20000df0
 8006bec:	0800a988 	.word	0x0800a988
 8006bf0:	08006d15 	.word	0x08006d15
 8006bf4:	20000df4 	.word	0x20000df4

08006bf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	623b      	str	r3, [r7, #32]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d02a      	beq.n	8006c84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	dc18      	bgt.n	8006c72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c40:	f7ff feb2 	bl	80069a8 <xTaskGetSchedulerState>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d109      	bne.n	8006c5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f107 0110 	add.w	r1, r7, #16
 8006c52:	2300      	movs	r3, #0
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	f7fe fb4d 	bl	80052f4 <xQueueGenericSend>
 8006c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c5c:	e012      	b.n	8006c84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f107 0110 	add.w	r1, r7, #16
 8006c66:	2300      	movs	r3, #0
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f7fe fb43 	bl	80052f4 <xQueueGenericSend>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c70:	e008      	b.n	8006c84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <xTimerGenericCommand+0x98>)
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f107 0110 	add.w	r1, r7, #16
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	f7fe fc37 	bl	80054f0 <xQueueGenericSendFromISR>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3728      	adds	r7, #40	; 0x28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000df0 	.word	0x20000df0

08006c94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <prvProcessExpiredTimer+0x7c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe f9b7 	bl	8005020 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d122      	bne.n	8006d00 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	18d1      	adds	r1, r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	6978      	ldr	r0, [r7, #20]
 8006cc8:	f000 f8c8 	bl	8006e5c <prvInsertTimerInActiveList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6978      	ldr	r0, [r7, #20]
 8006cde:	f7ff ff8b 	bl	8006bf8 <xTimerGenericCommand>
 8006ce2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60fb      	str	r3, [r7, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	6978      	ldr	r0, [r7, #20]
 8006d06:	4798      	blx	r3
}
 8006d08:	bf00      	nop
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000de8 	.word	0x20000de8

08006d14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d1c:	f107 0308 	add.w	r3, r7, #8
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f857 	bl	8006dd4 <prvGetNextExpireTime>
 8006d26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f803 	bl	8006d38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d32:	f000 f8d5 	bl	8006ee0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d36:	e7f1      	b.n	8006d1c <prvTimerTask+0x8>

08006d38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d42:	f7ff fa4b 	bl	80061dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d46:	f107 0308 	add.w	r3, r7, #8
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f866 	bl	8006e1c <prvSampleTimeNow>
 8006d50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d130      	bne.n	8006dba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <prvProcessTimerOrBlockTask+0x3c>
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d806      	bhi.n	8006d74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d66:	f7ff fa47 	bl	80061f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff ff91 	bl	8006c94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d72:	e024      	b.n	8006dbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <prvProcessTimerOrBlockTask+0x90>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <prvProcessTimerOrBlockTask+0x94>)
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f7fe ff3b 	bl	8005c14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d9e:	f7ff fa2b 	bl	80061f8 <xTaskResumeAll>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <prvProcessTimerOrBlockTask+0x98>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
}
 8006db8:	e001      	b.n	8006dbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dba:	f7ff fa1d 	bl	80061f8 <xTaskResumeAll>
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000dec 	.word	0x20000dec
 8006dcc:	20000df0 	.word	0x20000df0
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <prvGetNextExpireTime+0x44>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bf0c      	ite	eq
 8006de6:	2301      	moveq	r3, #1
 8006de8:	2300      	movne	r3, #0
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <prvGetNextExpireTime+0x44>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e001      	b.n	8006e0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20000de8 	.word	0x20000de8

08006e1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e24:	f7ff fa86 	bl	8006334 <xTaskGetTickCount>
 8006e28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvSampleTimeNow+0x3c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d205      	bcs.n	8006e40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e34:	f000 f908 	bl	8007048 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e002      	b.n	8006e46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e46:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <prvSampleTimeNow+0x3c>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000df8 	.word	0x20000df8

08006e5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d812      	bhi.n	8006ea8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e01b      	b.n	8006ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e96:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <prvInsertTimerInActiveList+0x7c>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe f885 	bl	8004fb0 <vListInsert>
 8006ea6:	e012      	b.n	8006ece <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d206      	bcs.n	8006ebe <prvInsertTimerInActiveList+0x62>
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d302      	bcc.n	8006ebe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e007      	b.n	8006ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <prvInsertTimerInActiveList+0x80>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f7fe f871 	bl	8004fb0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ece:	697b      	ldr	r3, [r7, #20]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20000dec 	.word	0x20000dec
 8006edc:	20000de8 	.word	0x20000de8

08006ee0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	; 0x38
 8006ee4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ee6:	e09d      	b.n	8007024 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da18      	bge.n	8006f20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006eee:	1d3b      	adds	r3, r7, #4
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	61fb      	str	r3, [r7, #28]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f16:	6850      	ldr	r0, [r2, #4]
 8006f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f1a:	6892      	ldr	r2, [r2, #8]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	db7d      	blt.n	8007022 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe f872 	bl	8005020 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff ff6c 	bl	8006e1c <prvSampleTimeNow>
 8006f44:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b09      	cmp	r3, #9
 8006f4a:	d86b      	bhi.n	8007024 <prvProcessReceivedCommands+0x144>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <prvProcessReceivedCommands+0x74>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f7d 	.word	0x08006f7d
 8006f5c:	08006f7d 	.word	0x08006f7d
 8006f60:	08007025 	.word	0x08007025
 8006f64:	08006fd9 	.word	0x08006fd9
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f7d 	.word	0x08006f7d
 8006f74:	08007025 	.word	0x08007025
 8006f78:	08006fd9 	.word	0x08006fd9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	18d1      	adds	r1, r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f8a:	f7ff ff67 	bl	8006e5c <prvInsertTimerInActiveList>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d047      	beq.n	8007024 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d13f      	bne.n	8007024 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	441a      	add	r2, r3
 8006fac:	2300      	movs	r3, #0
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb6:	f7ff fe1f 	bl	8006bf8 <xTimerGenericCommand>
 8006fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d130      	bne.n	8007024 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	61bb      	str	r3, [r7, #24]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	617b      	str	r3, [r7, #20]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	18d1      	adds	r1, r2, r3
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700a:	f7ff ff27 	bl	8006e5c <prvInsertTimerInActiveList>
					break;
 800700e:	e009      	b.n	8007024 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800701a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701c:	f000 fb6a 	bl	80076f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007020:	e000      	b.n	8007024 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007022:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <prvProcessReceivedCommands+0x164>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	1d39      	adds	r1, r7, #4
 800702a:	2200      	movs	r2, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe faf7 	bl	8005620 <xQueueReceive>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	f47f af57 	bne.w	8006ee8 <prvProcessReceivedCommands+0x8>
	}
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	3730      	adds	r7, #48	; 0x30
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000df0 	.word	0x20000df0

08007048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800704e:	e045      	b.n	80070dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007050:	4b2c      	ldr	r3, [pc, #176]	; (8007104 <prvSwitchTimerLists+0xbc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800705a:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <prvSwitchTimerLists+0xbc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3304      	adds	r3, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f7fd ffd9 	bl	8005020 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d12e      	bne.n	80070dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	d90e      	bls.n	80070ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800709c:	4b19      	ldr	r3, [pc, #100]	; (8007104 <prvSwitchTimerLists+0xbc>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fd ff82 	bl	8004fb0 <vListInsert>
 80070ac:	e016      	b.n	80070dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ae:	2300      	movs	r3, #0
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	2100      	movs	r1, #0
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff fd9d 	bl	8006bf8 <xTimerGenericCommand>
 80070be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <prvSwitchTimerLists+0x94>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	603b      	str	r3, [r7, #0]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070dc:	4b09      	ldr	r3, [pc, #36]	; (8007104 <prvSwitchTimerLists+0xbc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1b4      	bne.n	8007050 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <prvSwitchTimerLists+0xbc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <prvSwitchTimerLists+0xc0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a04      	ldr	r2, [pc, #16]	; (8007104 <prvSwitchTimerLists+0xbc>)
 80070f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070f4:	4a04      	ldr	r2, [pc, #16]	; (8007108 <prvSwitchTimerLists+0xc0>)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6013      	str	r3, [r2, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000de8 	.word	0x20000de8
 8007108:	20000dec 	.word	0x20000dec

0800710c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007112:	f000 f92b 	bl	800736c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d120      	bne.n	8007160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800711e:	4814      	ldr	r0, [pc, #80]	; (8007170 <prvCheckForValidListAndQueue+0x64>)
 8007120:	f7fd fef8 	bl	8004f14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007124:	4813      	ldr	r0, [pc, #76]	; (8007174 <prvCheckForValidListAndQueue+0x68>)
 8007126:	f7fd fef5 	bl	8004f14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800712a:	4b13      	ldr	r3, [pc, #76]	; (8007178 <prvCheckForValidListAndQueue+0x6c>)
 800712c:	4a10      	ldr	r2, [pc, #64]	; (8007170 <prvCheckForValidListAndQueue+0x64>)
 800712e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007130:	4b12      	ldr	r3, [pc, #72]	; (800717c <prvCheckForValidListAndQueue+0x70>)
 8007132:	4a10      	ldr	r2, [pc, #64]	; (8007174 <prvCheckForValidListAndQueue+0x68>)
 8007134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007136:	2300      	movs	r3, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	4b11      	ldr	r3, [pc, #68]	; (8007180 <prvCheckForValidListAndQueue+0x74>)
 800713c:	4a11      	ldr	r2, [pc, #68]	; (8007184 <prvCheckForValidListAndQueue+0x78>)
 800713e:	2110      	movs	r1, #16
 8007140:	200a      	movs	r0, #10
 8007142:	f7fd ffff 	bl	8005144 <xQueueGenericCreateStatic>
 8007146:	4603      	mov	r3, r0
 8007148:	4a08      	ldr	r2, [pc, #32]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 800714a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <prvCheckForValidListAndQueue+0x60>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	490b      	ldr	r1, [pc, #44]	; (8007188 <prvCheckForValidListAndQueue+0x7c>)
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fd32 	bl	8005bc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007160:	f000 f934 	bl	80073cc <vPortExitCritical>
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000df0 	.word	0x20000df0
 8007170:	20000dc0 	.word	0x20000dc0
 8007174:	20000dd4 	.word	0x20000dd4
 8007178:	20000de8 	.word	0x20000de8
 800717c:	20000dec 	.word	0x20000dec
 8007180:	20000e9c 	.word	0x20000e9c
 8007184:	20000dfc 	.word	0x20000dfc
 8007188:	0800a990 	.word	0x0800a990

0800718c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3b04      	subs	r3, #4
 800719c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3b04      	subs	r3, #4
 80071aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071bc:	4a08      	ldr	r2, [pc, #32]	; (80071e0 <pxPortInitialiseStack+0x54>)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3b14      	subs	r3, #20
 80071c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3b20      	subs	r3, #32
 80071d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr
 80071e0:	080071e5 	.word	0x080071e5

080071e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071ee:	4b12      	ldr	r3, [pc, #72]	; (8007238 <prvTaskExitError+0x54>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f6:	d00a      	beq.n	800720e <prvTaskExitError+0x2a>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60fb      	str	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <prvTaskExitError+0x28>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60bb      	str	r3, [r7, #8]
}
 8007220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007222:	bf00      	nop
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0fc      	beq.n	8007224 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	2000000c 	.word	0x2000000c
 800723c:	00000000 	.word	0x00000000

08007240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <pxCurrentTCBConst2>)
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	6808      	ldr	r0, [r1, #0]
 8007246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800724a:	f380 8809 	msr	PSP, r0
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f380 8811 	msr	BASEPRI, r0
 800725a:	f04e 0e0d 	orr.w	lr, lr, #13
 800725e:	4770      	bx	lr

08007260 <pxCurrentTCBConst2>:
 8007260:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007268:	4806      	ldr	r0, [pc, #24]	; (8007284 <prvPortStartFirstTask+0x1c>)
 800726a:	6800      	ldr	r0, [r0, #0]
 800726c:	6800      	ldr	r0, [r0, #0]
 800726e:	f380 8808 	msr	MSP, r0
 8007272:	b662      	cpsie	i
 8007274:	b661      	cpsie	f
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	df00      	svc	0
 8007280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007282:	bf00      	nop
 8007284:	e000ed08 	.word	0xe000ed08

08007288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800728e:	4b32      	ldr	r3, [pc, #200]	; (8007358 <xPortStartScheduler+0xd0>)
 8007290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	22ff      	movs	r2, #255	; 0xff
 800729e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	4b2a      	ldr	r3, [pc, #168]	; (800735c <xPortStartScheduler+0xd4>)
 80072b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072b6:	4b2a      	ldr	r3, [pc, #168]	; (8007360 <xPortStartScheduler+0xd8>)
 80072b8:	2207      	movs	r2, #7
 80072ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072bc:	e009      	b.n	80072d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80072be:	4b28      	ldr	r3, [pc, #160]	; (8007360 <xPortStartScheduler+0xd8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	4a26      	ldr	r2, [pc, #152]	; (8007360 <xPortStartScheduler+0xd8>)
 80072c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072da:	2b80      	cmp	r3, #128	; 0x80
 80072dc:	d0ef      	beq.n	80072be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072de:	4b20      	ldr	r3, [pc, #128]	; (8007360 <xPortStartScheduler+0xd8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f1c3 0307 	rsb	r3, r3, #7
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d00a      	beq.n	8007300 <xPortStartScheduler+0x78>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	60bb      	str	r3, [r7, #8]
}
 80072fc:	bf00      	nop
 80072fe:	e7fe      	b.n	80072fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007300:	4b17      	ldr	r3, [pc, #92]	; (8007360 <xPortStartScheduler+0xd8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	4a16      	ldr	r2, [pc, #88]	; (8007360 <xPortStartScheduler+0xd8>)
 8007308:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800730a:	4b15      	ldr	r3, [pc, #84]	; (8007360 <xPortStartScheduler+0xd8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007312:	4a13      	ldr	r2, [pc, #76]	; (8007360 <xPortStartScheduler+0xd8>)
 8007314:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	b2da      	uxtb	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800731e:	4b11      	ldr	r3, [pc, #68]	; (8007364 <xPortStartScheduler+0xdc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <xPortStartScheduler+0xdc>)
 8007324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800732a:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <xPortStartScheduler+0xdc>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a0d      	ldr	r2, [pc, #52]	; (8007364 <xPortStartScheduler+0xdc>)
 8007330:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007334:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007336:	f000 f8b9 	bl	80074ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <xPortStartScheduler+0xe0>)
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007340:	f7ff ff92 	bl	8007268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007344:	f7ff f8c2 	bl	80064cc <vTaskSwitchContext>
	prvTaskExitError();
 8007348:	f7ff ff4c 	bl	80071e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	e000e400 	.word	0xe000e400
 800735c:	20000eec 	.word	0x20000eec
 8007360:	20000ef0 	.word	0x20000ef0
 8007364:	e000ed20 	.word	0xe000ed20
 8007368:	2000000c 	.word	0x2000000c

0800736c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	607b      	str	r3, [r7, #4]
}
 8007384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007386:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <vPortEnterCritical+0x58>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	4a0d      	ldr	r2, [pc, #52]	; (80073c4 <vPortEnterCritical+0x58>)
 800738e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007390:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <vPortEnterCritical+0x58>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d10f      	bne.n	80073b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007398:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <vPortEnterCritical+0x5c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	603b      	str	r3, [r7, #0]
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <vPortEnterCritical+0x4a>
	}
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	2000000c 	.word	0x2000000c
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073d2:	4b11      	ldr	r3, [pc, #68]	; (8007418 <vPortExitCritical+0x4c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <vPortExitCritical+0x24>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	607b      	str	r3, [r7, #4]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <vPortExitCritical+0x4c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4a08      	ldr	r2, [pc, #32]	; (8007418 <vPortExitCritical+0x4c>)
 80073f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073fa:	4b07      	ldr	r3, [pc, #28]	; (8007418 <vPortExitCritical+0x4c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d105      	bne.n	800740e <vPortExitCritical+0x42>
 8007402:	2300      	movs	r3, #0
 8007404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f383 8811 	msr	BASEPRI, r3
}
 800740c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr
 8007418:	2000000c 	.word	0x2000000c
 800741c:	00000000 	.word	0x00000000

08007420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007420:	f3ef 8009 	mrs	r0, PSP
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <pxCurrentTCBConst>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007430:	6010      	str	r0, [r2, #0]
 8007432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007436:	f04f 0050 	mov.w	r0, #80	; 0x50
 800743a:	f380 8811 	msr	BASEPRI, r0
 800743e:	f7ff f845 	bl	80064cc <vTaskSwitchContext>
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8811 	msr	BASEPRI, r0
 800744a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	6808      	ldr	r0, [r1, #0]
 8007452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007456:	f380 8809 	msr	PSP, r0
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	4770      	bx	lr

08007460 <pxCurrentTCBConst>:
 8007460:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop

08007468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007482:	f7fe ff65 	bl	8006350 <xTaskIncrementTick>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <SysTick_Handler+0x40>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f383 8811 	msr	BASEPRI, r3
}
 800749e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <vPortSetupTimerInterrupt+0x30>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <vPortSetupTimerInterrupt+0x34>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074bc:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <vPortSetupTimerInterrupt+0x38>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a09      	ldr	r2, [pc, #36]	; (80074e8 <vPortSetupTimerInterrupt+0x3c>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	099b      	lsrs	r3, r3, #6
 80074c8:	4a08      	ldr	r2, [pc, #32]	; (80074ec <vPortSetupTimerInterrupt+0x40>)
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ce:	4b03      	ldr	r3, [pc, #12]	; (80074dc <vPortSetupTimerInterrupt+0x30>)
 80074d0:	2207      	movs	r2, #7
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr
 80074dc:	e000e010 	.word	0xe000e010
 80074e0:	e000e018 	.word	0xe000e018
 80074e4:	20000000 	.word	0x20000000
 80074e8:	10624dd3 	.word	0x10624dd3
 80074ec:	e000e014 	.word	0xe000e014

080074f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074f6:	f3ef 8305 	mrs	r3, IPSR
 80074fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b0f      	cmp	r3, #15
 8007500:	d914      	bls.n	800752c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007502:	4a16      	ldr	r2, [pc, #88]	; (800755c <vPortValidateInterruptPriority+0x6c>)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800750c:	4b14      	ldr	r3, [pc, #80]	; (8007560 <vPortValidateInterruptPriority+0x70>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	7afa      	ldrb	r2, [r7, #11]
 8007512:	429a      	cmp	r2, r3
 8007514:	d20a      	bcs.n	800752c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	607b      	str	r3, [r7, #4]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800752c:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <vPortValidateInterruptPriority+0x74>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007534:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <vPortValidateInterruptPriority+0x78>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d90a      	bls.n	8007552 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	603b      	str	r3, [r7, #0]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <vPortValidateInterruptPriority+0x60>
	}
 8007552:	bf00      	nop
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr
 800755c:	e000e3f0 	.word	0xe000e3f0
 8007560:	20000eec 	.word	0x20000eec
 8007564:	e000ed0c 	.word	0xe000ed0c
 8007568:	20000ef0 	.word	0x20000ef0

0800756c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007578:	f7fe fe30 	bl	80061dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800757c:	4b58      	ldr	r3, [pc, #352]	; (80076e0 <pvPortMalloc+0x174>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007584:	f000 f910 	bl	80077a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007588:	4b56      	ldr	r3, [pc, #344]	; (80076e4 <pvPortMalloc+0x178>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 808e 	bne.w	80076b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01d      	beq.n	80075d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800759c:	2208      	movs	r2, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4413      	add	r3, r2
 80075a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d014      	beq.n	80075d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f023 0307 	bic.w	r3, r3, #7
 80075b4:	3308      	adds	r3, #8
 80075b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <pvPortMalloc+0x6c>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	617b      	str	r3, [r7, #20]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d069      	beq.n	80076b2 <pvPortMalloc+0x146>
 80075de:	4b42      	ldr	r3, [pc, #264]	; (80076e8 <pvPortMalloc+0x17c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d864      	bhi.n	80076b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075e8:	4b40      	ldr	r3, [pc, #256]	; (80076ec <pvPortMalloc+0x180>)
 80075ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075ec:	4b3f      	ldr	r3, [pc, #252]	; (80076ec <pvPortMalloc+0x180>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075f2:	e004      	b.n	80075fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	d903      	bls.n	8007610 <pvPortMalloc+0xa4>
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f1      	bne.n	80075f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007610:	4b33      	ldr	r3, [pc, #204]	; (80076e0 <pvPortMalloc+0x174>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007616:	429a      	cmp	r2, r3
 8007618:	d04b      	beq.n	80076b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2208      	movs	r2, #8
 8007620:	4413      	add	r3, r2
 8007622:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	2308      	movs	r3, #8
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	429a      	cmp	r2, r3
 800763a:	d91f      	bls.n	800767c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <pvPortMalloc+0xf8>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	613b      	str	r3, [r7, #16]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	1ad2      	subs	r2, r2, r3
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007676:	69b8      	ldr	r0, [r7, #24]
 8007678:	f000 f8f8 	bl	800786c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <pvPortMalloc+0x17c>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <pvPortMalloc+0x17c>)
 8007688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800768a:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <pvPortMalloc+0x17c>)
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b18      	ldr	r3, [pc, #96]	; (80076f0 <pvPortMalloc+0x184>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d203      	bcs.n	800769e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007696:	4b14      	ldr	r3, [pc, #80]	; (80076e8 <pvPortMalloc+0x17c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <pvPortMalloc+0x184>)
 800769c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <pvPortMalloc+0x178>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076b2:	f7fe fda1 	bl	80061f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <pvPortMalloc+0x16a>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	60fb      	str	r3, [r7, #12]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <pvPortMalloc+0x168>
	return pvReturn;
 80076d6:	69fb      	ldr	r3, [r7, #28]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3728      	adds	r7, #40	; 0x28
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20001afc 	.word	0x20001afc
 80076e4:	20001b08 	.word	0x20001b08
 80076e8:	20001b00 	.word	0x20001b00
 80076ec:	20001af4 	.word	0x20001af4
 80076f0:	20001b04 	.word	0x20001b04

080076f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d048      	beq.n	8007798 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007706:	2308      	movs	r3, #8
 8007708:	425b      	negs	r3, r3
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <vPortFree+0xac>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4013      	ands	r3, r2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <vPortFree+0x44>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60fb      	str	r3, [r7, #12]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <vPortFree+0x62>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60bb      	str	r3, [r7, #8]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	4b11      	ldr	r3, [pc, #68]	; (80077a0 <vPortFree+0xac>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d019      	beq.n	8007798 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d115      	bne.n	8007798 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <vPortFree+0xac>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	43db      	mvns	r3, r3
 8007776:	401a      	ands	r2, r3
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800777c:	f7fe fd2e 	bl	80061dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <vPortFree+0xb0>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4413      	add	r3, r2
 800778a:	4a06      	ldr	r2, [pc, #24]	; (80077a4 <vPortFree+0xb0>)
 800778c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800778e:	6938      	ldr	r0, [r7, #16]
 8007790:	f000 f86c 	bl	800786c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007794:	f7fe fd30 	bl	80061f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007798:	bf00      	nop
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20001b08 	.word	0x20001b08
 80077a4:	20001b00 	.word	0x20001b00

080077a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80077b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077b4:	4b27      	ldr	r3, [pc, #156]	; (8007854 <prvHeapInit+0xac>)
 80077b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00c      	beq.n	80077dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3307      	adds	r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	4a1f      	ldr	r2, [pc, #124]	; (8007854 <prvHeapInit+0xac>)
 80077d8:	4413      	add	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077e0:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <prvHeapInit+0xb0>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077e6:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <prvHeapInit+0xb0>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	4413      	add	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077f4:	2208      	movs	r2, #8
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0307 	bic.w	r3, r3, #7
 8007802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a15      	ldr	r2, [pc, #84]	; (800785c <prvHeapInit+0xb4>)
 8007808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <prvHeapInit+0xb4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2200      	movs	r2, #0
 8007810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007812:	4b12      	ldr	r3, [pc, #72]	; (800785c <prvHeapInit+0xb4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	1ad2      	subs	r2, r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <prvHeapInit+0xb4>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	4a0a      	ldr	r2, [pc, #40]	; (8007860 <prvHeapInit+0xb8>)
 8007836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a09      	ldr	r2, [pc, #36]	; (8007864 <prvHeapInit+0xbc>)
 800783e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007840:	4b09      	ldr	r3, [pc, #36]	; (8007868 <prvHeapInit+0xc0>)
 8007842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007846:	601a      	str	r2, [r3, #0]
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000ef4 	.word	0x20000ef4
 8007858:	20001af4 	.word	0x20001af4
 800785c:	20001afc 	.word	0x20001afc
 8007860:	20001b04 	.word	0x20001b04
 8007864:	20001b00 	.word	0x20001b00
 8007868:	20001b08 	.word	0x20001b08

0800786c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007874:	4b27      	ldr	r3, [pc, #156]	; (8007914 <prvInsertBlockIntoFreeList+0xa8>)
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e002      	b.n	8007880 <prvInsertBlockIntoFreeList+0x14>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	429a      	cmp	r2, r3
 8007888:	d8f7      	bhi.n	800787a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	4413      	add	r3, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	429a      	cmp	r2, r3
 800789a:	d108      	bne.n	80078ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	441a      	add	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d118      	bne.n	80078f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <prvInsertBlockIntoFreeList+0xac>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d00d      	beq.n	80078ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	441a      	add	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e008      	b.n	80078fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <prvInsertBlockIntoFreeList+0xac>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e003      	b.n	80078fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d002      	beq.n	800790a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr
 8007914:	20001af4 	.word	0x20001af4
 8007918:	20001afc 	.word	0x20001afc

0800791c <__errno>:
 800791c:	4b01      	ldr	r3, [pc, #4]	; (8007924 <__errno+0x8>)
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000010 	.word	0x20000010

08007928 <__libc_init_array>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	2600      	movs	r6, #0
 800792c:	4d0c      	ldr	r5, [pc, #48]	; (8007960 <__libc_init_array+0x38>)
 800792e:	4c0d      	ldr	r4, [pc, #52]	; (8007964 <__libc_init_array+0x3c>)
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	42a6      	cmp	r6, r4
 8007936:	d109      	bne.n	800794c <__libc_init_array+0x24>
 8007938:	f002 febc 	bl	800a6b4 <_init>
 800793c:	2600      	movs	r6, #0
 800793e:	4d0a      	ldr	r5, [pc, #40]	; (8007968 <__libc_init_array+0x40>)
 8007940:	4c0a      	ldr	r4, [pc, #40]	; (800796c <__libc_init_array+0x44>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	42a6      	cmp	r6, r4
 8007948:	d105      	bne.n	8007956 <__libc_init_array+0x2e>
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007950:	4798      	blx	r3
 8007952:	3601      	adds	r6, #1
 8007954:	e7ee      	b.n	8007934 <__libc_init_array+0xc>
 8007956:	f855 3b04 	ldr.w	r3, [r5], #4
 800795a:	4798      	blx	r3
 800795c:	3601      	adds	r6, #1
 800795e:	e7f2      	b.n	8007946 <__libc_init_array+0x1e>
 8007960:	0800ae14 	.word	0x0800ae14
 8007964:	0800ae14 	.word	0x0800ae14
 8007968:	0800ae14 	.word	0x0800ae14
 800796c:	0800ae18 	.word	0x0800ae18

08007970 <malloc>:
 8007970:	4b02      	ldr	r3, [pc, #8]	; (800797c <malloc+0xc>)
 8007972:	4601      	mov	r1, r0
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f000 b865 	b.w	8007a44 <_malloc_r>
 800797a:	bf00      	nop
 800797c:	20000010 	.word	0x20000010

08007980 <memcpy>:
 8007980:	440a      	add	r2, r1
 8007982:	4291      	cmp	r1, r2
 8007984:	f100 33ff 	add.w	r3, r0, #4294967295
 8007988:	d100      	bne.n	800798c <memcpy+0xc>
 800798a:	4770      	bx	lr
 800798c:	b510      	push	{r4, lr}
 800798e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007992:	4291      	cmp	r1, r2
 8007994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007998:	d1f9      	bne.n	800798e <memcpy+0xe>
 800799a:	bd10      	pop	{r4, pc}

0800799c <memset>:
 800799c:	4603      	mov	r3, r0
 800799e:	4402      	add	r2, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <_free_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4605      	mov	r5, r0
 80079b0:	2900      	cmp	r1, #0
 80079b2:	d043      	beq.n	8007a3c <_free_r+0x90>
 80079b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b8:	1f0c      	subs	r4, r1, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfb8      	it	lt
 80079be:	18e4      	addlt	r4, r4, r3
 80079c0:	f001 fbba 	bl	8009138 <__malloc_lock>
 80079c4:	4a1e      	ldr	r2, [pc, #120]	; (8007a40 <_free_r+0x94>)
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	4610      	mov	r0, r2
 80079ca:	b933      	cbnz	r3, 80079da <_free_r+0x2e>
 80079cc:	6063      	str	r3, [r4, #4]
 80079ce:	6014      	str	r4, [r2, #0]
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d6:	f001 bbb5 	b.w	8009144 <__malloc_unlock>
 80079da:	42a3      	cmp	r3, r4
 80079dc:	d90a      	bls.n	80079f4 <_free_r+0x48>
 80079de:	6821      	ldr	r1, [r4, #0]
 80079e0:	1862      	adds	r2, r4, r1
 80079e2:	4293      	cmp	r3, r2
 80079e4:	bf01      	itttt	eq
 80079e6:	681a      	ldreq	r2, [r3, #0]
 80079e8:	685b      	ldreq	r3, [r3, #4]
 80079ea:	1852      	addeq	r2, r2, r1
 80079ec:	6022      	streq	r2, [r4, #0]
 80079ee:	6063      	str	r3, [r4, #4]
 80079f0:	6004      	str	r4, [r0, #0]
 80079f2:	e7ed      	b.n	80079d0 <_free_r+0x24>
 80079f4:	461a      	mov	r2, r3
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	b10b      	cbz	r3, 80079fe <_free_r+0x52>
 80079fa:	42a3      	cmp	r3, r4
 80079fc:	d9fa      	bls.n	80079f4 <_free_r+0x48>
 80079fe:	6811      	ldr	r1, [r2, #0]
 8007a00:	1850      	adds	r0, r2, r1
 8007a02:	42a0      	cmp	r0, r4
 8007a04:	d10b      	bne.n	8007a1e <_free_r+0x72>
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	4401      	add	r1, r0
 8007a0a:	1850      	adds	r0, r2, r1
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	6011      	str	r1, [r2, #0]
 8007a10:	d1de      	bne.n	80079d0 <_free_r+0x24>
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	4401      	add	r1, r0
 8007a18:	6011      	str	r1, [r2, #0]
 8007a1a:	6053      	str	r3, [r2, #4]
 8007a1c:	e7d8      	b.n	80079d0 <_free_r+0x24>
 8007a1e:	d902      	bls.n	8007a26 <_free_r+0x7a>
 8007a20:	230c      	movs	r3, #12
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	e7d4      	b.n	80079d0 <_free_r+0x24>
 8007a26:	6820      	ldr	r0, [r4, #0]
 8007a28:	1821      	adds	r1, r4, r0
 8007a2a:	428b      	cmp	r3, r1
 8007a2c:	bf01      	itttt	eq
 8007a2e:	6819      	ldreq	r1, [r3, #0]
 8007a30:	685b      	ldreq	r3, [r3, #4]
 8007a32:	1809      	addeq	r1, r1, r0
 8007a34:	6021      	streq	r1, [r4, #0]
 8007a36:	6063      	str	r3, [r4, #4]
 8007a38:	6054      	str	r4, [r2, #4]
 8007a3a:	e7c9      	b.n	80079d0 <_free_r+0x24>
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
 8007a3e:	bf00      	nop
 8007a40:	20001b0c 	.word	0x20001b0c

08007a44 <_malloc_r>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	1ccd      	adds	r5, r1, #3
 8007a48:	f025 0503 	bic.w	r5, r5, #3
 8007a4c:	3508      	adds	r5, #8
 8007a4e:	2d0c      	cmp	r5, #12
 8007a50:	bf38      	it	cc
 8007a52:	250c      	movcc	r5, #12
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	4606      	mov	r6, r0
 8007a58:	db01      	blt.n	8007a5e <_malloc_r+0x1a>
 8007a5a:	42a9      	cmp	r1, r5
 8007a5c:	d903      	bls.n	8007a66 <_malloc_r+0x22>
 8007a5e:	230c      	movs	r3, #12
 8007a60:	6033      	str	r3, [r6, #0]
 8007a62:	2000      	movs	r0, #0
 8007a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a66:	f001 fb67 	bl	8009138 <__malloc_lock>
 8007a6a:	4921      	ldr	r1, [pc, #132]	; (8007af0 <_malloc_r+0xac>)
 8007a6c:	680a      	ldr	r2, [r1, #0]
 8007a6e:	4614      	mov	r4, r2
 8007a70:	b99c      	cbnz	r4, 8007a9a <_malloc_r+0x56>
 8007a72:	4f20      	ldr	r7, [pc, #128]	; (8007af4 <_malloc_r+0xb0>)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b923      	cbnz	r3, 8007a82 <_malloc_r+0x3e>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 fc9c 	bl	80083b8 <_sbrk_r>
 8007a80:	6038      	str	r0, [r7, #0]
 8007a82:	4629      	mov	r1, r5
 8007a84:	4630      	mov	r0, r6
 8007a86:	f000 fc97 	bl	80083b8 <_sbrk_r>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	d123      	bne.n	8007ad6 <_malloc_r+0x92>
 8007a8e:	230c      	movs	r3, #12
 8007a90:	4630      	mov	r0, r6
 8007a92:	6033      	str	r3, [r6, #0]
 8007a94:	f001 fb56 	bl	8009144 <__malloc_unlock>
 8007a98:	e7e3      	b.n	8007a62 <_malloc_r+0x1e>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	1b5b      	subs	r3, r3, r5
 8007a9e:	d417      	bmi.n	8007ad0 <_malloc_r+0x8c>
 8007aa0:	2b0b      	cmp	r3, #11
 8007aa2:	d903      	bls.n	8007aac <_malloc_r+0x68>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	441c      	add	r4, r3
 8007aa8:	6025      	str	r5, [r4, #0]
 8007aaa:	e004      	b.n	8007ab6 <_malloc_r+0x72>
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	42a2      	cmp	r2, r4
 8007ab0:	bf0c      	ite	eq
 8007ab2:	600b      	streq	r3, [r1, #0]
 8007ab4:	6053      	strne	r3, [r2, #4]
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f001 fb44 	bl	8009144 <__malloc_unlock>
 8007abc:	f104 000b 	add.w	r0, r4, #11
 8007ac0:	1d23      	adds	r3, r4, #4
 8007ac2:	f020 0007 	bic.w	r0, r0, #7
 8007ac6:	1ac2      	subs	r2, r0, r3
 8007ac8:	d0cc      	beq.n	8007a64 <_malloc_r+0x20>
 8007aca:	1a1b      	subs	r3, r3, r0
 8007acc:	50a3      	str	r3, [r4, r2]
 8007ace:	e7c9      	b.n	8007a64 <_malloc_r+0x20>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	6864      	ldr	r4, [r4, #4]
 8007ad4:	e7cc      	b.n	8007a70 <_malloc_r+0x2c>
 8007ad6:	1cc4      	adds	r4, r0, #3
 8007ad8:	f024 0403 	bic.w	r4, r4, #3
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d0e3      	beq.n	8007aa8 <_malloc_r+0x64>
 8007ae0:	1a21      	subs	r1, r4, r0
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 fc68 	bl	80083b8 <_sbrk_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d1dd      	bne.n	8007aa8 <_malloc_r+0x64>
 8007aec:	e7cf      	b.n	8007a8e <_malloc_r+0x4a>
 8007aee:	bf00      	nop
 8007af0:	20001b0c 	.word	0x20001b0c
 8007af4:	20001b10 	.word	0x20001b10

08007af8 <__cvt>:
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afe:	461f      	mov	r7, r3
 8007b00:	bfbb      	ittet	lt
 8007b02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007b06:	461f      	movlt	r7, r3
 8007b08:	2300      	movge	r3, #0
 8007b0a:	232d      	movlt	r3, #45	; 0x2d
 8007b0c:	b088      	sub	sp, #32
 8007b0e:	4614      	mov	r4, r2
 8007b10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007b14:	7013      	strb	r3, [r2, #0]
 8007b16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b18:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007b1c:	f023 0820 	bic.w	r8, r3, #32
 8007b20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b24:	d005      	beq.n	8007b32 <__cvt+0x3a>
 8007b26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b2a:	d100      	bne.n	8007b2e <__cvt+0x36>
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e000      	b.n	8007b34 <__cvt+0x3c>
 8007b32:	2303      	movs	r3, #3
 8007b34:	aa07      	add	r2, sp, #28
 8007b36:	9204      	str	r2, [sp, #16]
 8007b38:	aa06      	add	r2, sp, #24
 8007b3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007b3e:	e9cd 3500 	strd	r3, r5, [sp]
 8007b42:	4622      	mov	r2, r4
 8007b44:	463b      	mov	r3, r7
 8007b46:	f000 fcf7 	bl	8008538 <_dtoa_r>
 8007b4a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b4e:	4606      	mov	r6, r0
 8007b50:	d102      	bne.n	8007b58 <__cvt+0x60>
 8007b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b54:	07db      	lsls	r3, r3, #31
 8007b56:	d522      	bpl.n	8007b9e <__cvt+0xa6>
 8007b58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b5c:	eb06 0905 	add.w	r9, r6, r5
 8007b60:	d110      	bne.n	8007b84 <__cvt+0x8c>
 8007b62:	7833      	ldrb	r3, [r6, #0]
 8007b64:	2b30      	cmp	r3, #48	; 0x30
 8007b66:	d10a      	bne.n	8007b7e <__cvt+0x86>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 ff1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007b74:	b918      	cbnz	r0, 8007b7e <__cvt+0x86>
 8007b76:	f1c5 0501 	rsb	r5, r5, #1
 8007b7a:	f8ca 5000 	str.w	r5, [sl]
 8007b7e:	f8da 3000 	ldr.w	r3, [sl]
 8007b82:	4499      	add	r9, r3
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 ff0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007b90:	b108      	cbz	r0, 8007b96 <__cvt+0x9e>
 8007b92:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b96:	2230      	movs	r2, #48	; 0x30
 8007b98:	9b07      	ldr	r3, [sp, #28]
 8007b9a:	454b      	cmp	r3, r9
 8007b9c:	d307      	bcc.n	8007bae <__cvt+0xb6>
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ba4:	1b9b      	subs	r3, r3, r6
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	b008      	add	sp, #32
 8007baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bae:	1c59      	adds	r1, r3, #1
 8007bb0:	9107      	str	r1, [sp, #28]
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e7f0      	b.n	8007b98 <__cvt+0xa0>

08007bb6 <__exponent>:
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bba:	2900      	cmp	r1, #0
 8007bbc:	f803 2b02 	strb.w	r2, [r3], #2
 8007bc0:	bfb6      	itet	lt
 8007bc2:	222d      	movlt	r2, #45	; 0x2d
 8007bc4:	222b      	movge	r2, #43	; 0x2b
 8007bc6:	4249      	neglt	r1, r1
 8007bc8:	2909      	cmp	r1, #9
 8007bca:	7042      	strb	r2, [r0, #1]
 8007bcc:	dd2b      	ble.n	8007c26 <__exponent+0x70>
 8007bce:	f10d 0407 	add.w	r4, sp, #7
 8007bd2:	46a4      	mov	ip, r4
 8007bd4:	270a      	movs	r7, #10
 8007bd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bda:	460a      	mov	r2, r1
 8007bdc:	46a6      	mov	lr, r4
 8007bde:	fb07 1516 	mls	r5, r7, r6, r1
 8007be2:	2a63      	cmp	r2, #99	; 0x63
 8007be4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007be8:	4631      	mov	r1, r6
 8007bea:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007bf2:	dcf0      	bgt.n	8007bd6 <__exponent+0x20>
 8007bf4:	3130      	adds	r1, #48	; 0x30
 8007bf6:	f1ae 0502 	sub.w	r5, lr, #2
 8007bfa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bfe:	4629      	mov	r1, r5
 8007c00:	1c44      	adds	r4, r0, #1
 8007c02:	4561      	cmp	r1, ip
 8007c04:	d30a      	bcc.n	8007c1c <__exponent+0x66>
 8007c06:	f10d 0209 	add.w	r2, sp, #9
 8007c0a:	eba2 020e 	sub.w	r2, r2, lr
 8007c0e:	4565      	cmp	r5, ip
 8007c10:	bf88      	it	hi
 8007c12:	2200      	movhi	r2, #0
 8007c14:	4413      	add	r3, r2
 8007c16:	1a18      	subs	r0, r3, r0
 8007c18:	b003      	add	sp, #12
 8007c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c20:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c24:	e7ed      	b.n	8007c02 <__exponent+0x4c>
 8007c26:	2330      	movs	r3, #48	; 0x30
 8007c28:	3130      	adds	r1, #48	; 0x30
 8007c2a:	7083      	strb	r3, [r0, #2]
 8007c2c:	70c1      	strb	r1, [r0, #3]
 8007c2e:	1d03      	adds	r3, r0, #4
 8007c30:	e7f1      	b.n	8007c16 <__exponent+0x60>
	...

08007c34 <_printf_float>:
 8007c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	b091      	sub	sp, #68	; 0x44
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007c40:	4616      	mov	r6, r2
 8007c42:	461f      	mov	r7, r3
 8007c44:	4605      	mov	r5, r0
 8007c46:	f001 fa65 	bl	8009114 <_localeconv_r>
 8007c4a:	6803      	ldr	r3, [r0, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	f7f8 fa7e 	bl	8000150 <strlen>
 8007c54:	2300      	movs	r3, #0
 8007c56:	930e      	str	r3, [sp, #56]	; 0x38
 8007c58:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5c:	900a      	str	r0, [sp, #40]	; 0x28
 8007c5e:	3307      	adds	r3, #7
 8007c60:	f023 0307 	bic.w	r3, r3, #7
 8007c64:	f103 0208 	add.w	r2, r3, #8
 8007c68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c6c:	f8d4 b000 	ldr.w	fp, [r4]
 8007c70:	f8c8 2000 	str.w	r2, [r8]
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c7c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007c80:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4b9c      	ldr	r3, [pc, #624]	; (8007f00 <_printf_float+0x2cc>)
 8007c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c90:	f7f8 febc 	bl	8000a0c <__aeabi_dcmpun>
 8007c94:	bb70      	cbnz	r0, 8007cf4 <_printf_float+0xc0>
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4b98      	ldr	r3, [pc, #608]	; (8007f00 <_printf_float+0x2cc>)
 8007c9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ca0:	f7f8 fe96 	bl	80009d0 <__aeabi_dcmple>
 8007ca4:	bb30      	cbnz	r0, 8007cf4 <_printf_float+0xc0>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4640      	mov	r0, r8
 8007cac:	4651      	mov	r1, sl
 8007cae:	f7f8 fe85 	bl	80009bc <__aeabi_dcmplt>
 8007cb2:	b110      	cbz	r0, 8007cba <_printf_float+0x86>
 8007cb4:	232d      	movs	r3, #45	; 0x2d
 8007cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cba:	4b92      	ldr	r3, [pc, #584]	; (8007f04 <_printf_float+0x2d0>)
 8007cbc:	4892      	ldr	r0, [pc, #584]	; (8007f08 <_printf_float+0x2d4>)
 8007cbe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007cc2:	bf94      	ite	ls
 8007cc4:	4698      	movls	r8, r3
 8007cc6:	4680      	movhi	r8, r0
 8007cc8:	2303      	movs	r3, #3
 8007cca:	f04f 0a00 	mov.w	sl, #0
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	f02b 0304 	bic.w	r3, fp, #4
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	4633      	mov	r3, r6
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	9700      	str	r7, [sp, #0]
 8007cde:	aa0f      	add	r2, sp, #60	; 0x3c
 8007ce0:	f000 f9d4 	bl	800808c <_printf_common>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	f040 8090 	bne.w	8007e0a <_printf_float+0x1d6>
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	b011      	add	sp, #68	; 0x44
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	4653      	mov	r3, sl
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	f7f8 fe86 	bl	8000a0c <__aeabi_dcmpun>
 8007d00:	b148      	cbz	r0, 8007d16 <_printf_float+0xe2>
 8007d02:	f1ba 0f00 	cmp.w	sl, #0
 8007d06:	bfb8      	it	lt
 8007d08:	232d      	movlt	r3, #45	; 0x2d
 8007d0a:	4880      	ldr	r0, [pc, #512]	; (8007f0c <_printf_float+0x2d8>)
 8007d0c:	bfb8      	it	lt
 8007d0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d12:	4b7f      	ldr	r3, [pc, #508]	; (8007f10 <_printf_float+0x2dc>)
 8007d14:	e7d3      	b.n	8007cbe <_printf_float+0x8a>
 8007d16:	6863      	ldr	r3, [r4, #4]
 8007d18:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	d142      	bne.n	8007da6 <_printf_float+0x172>
 8007d20:	2306      	movs	r3, #6
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	9206      	str	r2, [sp, #24]
 8007d28:	aa0e      	add	r2, sp, #56	; 0x38
 8007d2a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007d2e:	aa0d      	add	r2, sp, #52	; 0x34
 8007d30:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007d34:	9203      	str	r2, [sp, #12]
 8007d36:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007d3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	6863      	ldr	r3, [r4, #4]
 8007d42:	4642      	mov	r2, r8
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4628      	mov	r0, r5
 8007d48:	4653      	mov	r3, sl
 8007d4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d4c:	f7ff fed4 	bl	8007af8 <__cvt>
 8007d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d52:	4680      	mov	r8, r0
 8007d54:	2947      	cmp	r1, #71	; 0x47
 8007d56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d58:	d108      	bne.n	8007d6c <_printf_float+0x138>
 8007d5a:	1cc8      	adds	r0, r1, #3
 8007d5c:	db02      	blt.n	8007d64 <_printf_float+0x130>
 8007d5e:	6863      	ldr	r3, [r4, #4]
 8007d60:	4299      	cmp	r1, r3
 8007d62:	dd40      	ble.n	8007de6 <_printf_float+0x1b2>
 8007d64:	f1a9 0902 	sub.w	r9, r9, #2
 8007d68:	fa5f f989 	uxtb.w	r9, r9
 8007d6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d70:	d81f      	bhi.n	8007db2 <_printf_float+0x17e>
 8007d72:	464a      	mov	r2, r9
 8007d74:	3901      	subs	r1, #1
 8007d76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d7a:	910d      	str	r1, [sp, #52]	; 0x34
 8007d7c:	f7ff ff1b 	bl	8007bb6 <__exponent>
 8007d80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d82:	4682      	mov	sl, r0
 8007d84:	1813      	adds	r3, r2, r0
 8007d86:	2a01      	cmp	r2, #1
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	dc02      	bgt.n	8007d92 <_printf_float+0x15e>
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	07d2      	lsls	r2, r2, #31
 8007d90:	d501      	bpl.n	8007d96 <_printf_float+0x162>
 8007d92:	3301      	adds	r3, #1
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d09b      	beq.n	8007cd6 <_printf_float+0xa2>
 8007d9e:	232d      	movs	r3, #45	; 0x2d
 8007da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da4:	e797      	b.n	8007cd6 <_printf_float+0xa2>
 8007da6:	2947      	cmp	r1, #71	; 0x47
 8007da8:	d1bc      	bne.n	8007d24 <_printf_float+0xf0>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1ba      	bne.n	8007d24 <_printf_float+0xf0>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e7b7      	b.n	8007d22 <_printf_float+0xee>
 8007db2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007db6:	d118      	bne.n	8007dea <_printf_float+0x1b6>
 8007db8:	2900      	cmp	r1, #0
 8007dba:	6863      	ldr	r3, [r4, #4]
 8007dbc:	dd0b      	ble.n	8007dd6 <_printf_float+0x1a2>
 8007dbe:	6121      	str	r1, [r4, #16]
 8007dc0:	b913      	cbnz	r3, 8007dc8 <_printf_float+0x194>
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	07d0      	lsls	r0, r2, #31
 8007dc6:	d502      	bpl.n	8007dce <_printf_float+0x19a>
 8007dc8:	3301      	adds	r3, #1
 8007dca:	440b      	add	r3, r1
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	f04f 0a00 	mov.w	sl, #0
 8007dd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dd4:	e7df      	b.n	8007d96 <_printf_float+0x162>
 8007dd6:	b913      	cbnz	r3, 8007dde <_printf_float+0x1aa>
 8007dd8:	6822      	ldr	r2, [r4, #0]
 8007dda:	07d2      	lsls	r2, r2, #31
 8007ddc:	d501      	bpl.n	8007de2 <_printf_float+0x1ae>
 8007dde:	3302      	adds	r3, #2
 8007de0:	e7f4      	b.n	8007dcc <_printf_float+0x198>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e7f2      	b.n	8007dcc <_printf_float+0x198>
 8007de6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dec:	4299      	cmp	r1, r3
 8007dee:	db05      	blt.n	8007dfc <_printf_float+0x1c8>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	6121      	str	r1, [r4, #16]
 8007df4:	07d8      	lsls	r0, r3, #31
 8007df6:	d5ea      	bpl.n	8007dce <_printf_float+0x19a>
 8007df8:	1c4b      	adds	r3, r1, #1
 8007dfa:	e7e7      	b.n	8007dcc <_printf_float+0x198>
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	bfcc      	ite	gt
 8007e00:	2201      	movgt	r2, #1
 8007e02:	f1c1 0202 	rsble	r2, r1, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	e7e0      	b.n	8007dcc <_printf_float+0x198>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	055a      	lsls	r2, r3, #21
 8007e0e:	d407      	bmi.n	8007e20 <_printf_float+0x1ec>
 8007e10:	6923      	ldr	r3, [r4, #16]
 8007e12:	4642      	mov	r2, r8
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d12b      	bne.n	8007e76 <_printf_float+0x242>
 8007e1e:	e764      	b.n	8007cea <_printf_float+0xb6>
 8007e20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e24:	f240 80dd 	bls.w	8007fe2 <_printf_float+0x3ae>
 8007e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f7f8 fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d033      	beq.n	8007ea0 <_printf_float+0x26c>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	4a35      	ldr	r2, [pc, #212]	; (8007f14 <_printf_float+0x2e0>)
 8007e40:	47b8      	blx	r7
 8007e42:	3001      	adds	r0, #1
 8007e44:	f43f af51 	beq.w	8007cea <_printf_float+0xb6>
 8007e48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	db02      	blt.n	8007e56 <_printf_float+0x222>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	07d8      	lsls	r0, r3, #31
 8007e54:	d50f      	bpl.n	8007e76 <_printf_float+0x242>
 8007e56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f af42 	beq.w	8007cea <_printf_float+0xb6>
 8007e66:	f04f 0800 	mov.w	r8, #0
 8007e6a:	f104 091a 	add.w	r9, r4, #26
 8007e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e70:	3b01      	subs	r3, #1
 8007e72:	4543      	cmp	r3, r8
 8007e74:	dc09      	bgt.n	8007e8a <_printf_float+0x256>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	079b      	lsls	r3, r3, #30
 8007e7a:	f100 8102 	bmi.w	8008082 <_printf_float+0x44e>
 8007e7e:	68e0      	ldr	r0, [r4, #12]
 8007e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e82:	4298      	cmp	r0, r3
 8007e84:	bfb8      	it	lt
 8007e86:	4618      	movlt	r0, r3
 8007e88:	e731      	b.n	8007cee <_printf_float+0xba>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	464a      	mov	r2, r9
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	f43f af28 	beq.w	8007cea <_printf_float+0xb6>
 8007e9a:	f108 0801 	add.w	r8, r8, #1
 8007e9e:	e7e6      	b.n	8007e6e <_printf_float+0x23a>
 8007ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dc38      	bgt.n	8007f18 <_printf_float+0x2e4>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	4a19      	ldr	r2, [pc, #100]	; (8007f14 <_printf_float+0x2e0>)
 8007eae:	47b8      	blx	r7
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	f43f af1a 	beq.w	8007cea <_printf_float+0xb6>
 8007eb6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	d102      	bne.n	8007ec4 <_printf_float+0x290>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	07d9      	lsls	r1, r3, #31
 8007ec2:	d5d8      	bpl.n	8007e76 <_printf_float+0x242>
 8007ec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f af0b 	beq.w	8007cea <_printf_float+0xb6>
 8007ed4:	f04f 0900 	mov.w	r9, #0
 8007ed8:	f104 0a1a 	add.w	sl, r4, #26
 8007edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ede:	425b      	negs	r3, r3
 8007ee0:	454b      	cmp	r3, r9
 8007ee2:	dc01      	bgt.n	8007ee8 <_printf_float+0x2b4>
 8007ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ee6:	e794      	b.n	8007e12 <_printf_float+0x1de>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4652      	mov	r2, sl
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f aef9 	beq.w	8007cea <_printf_float+0xb6>
 8007ef8:	f109 0901 	add.w	r9, r9, #1
 8007efc:	e7ee      	b.n	8007edc <_printf_float+0x2a8>
 8007efe:	bf00      	nop
 8007f00:	7fefffff 	.word	0x7fefffff
 8007f04:	0800aa34 	.word	0x0800aa34
 8007f08:	0800aa38 	.word	0x0800aa38
 8007f0c:	0800aa40 	.word	0x0800aa40
 8007f10:	0800aa3c 	.word	0x0800aa3c
 8007f14:	0800aa44 	.word	0x0800aa44
 8007f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	bfa8      	it	ge
 8007f20:	461a      	movge	r2, r3
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	4691      	mov	r9, r2
 8007f26:	dc37      	bgt.n	8007f98 <_printf_float+0x364>
 8007f28:	f04f 0b00 	mov.w	fp, #0
 8007f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f30:	f104 021a 	add.w	r2, r4, #26
 8007f34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007f38:	ebaa 0309 	sub.w	r3, sl, r9
 8007f3c:	455b      	cmp	r3, fp
 8007f3e:	dc33      	bgt.n	8007fa8 <_printf_float+0x374>
 8007f40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f44:	429a      	cmp	r2, r3
 8007f46:	db3b      	blt.n	8007fc0 <_printf_float+0x38c>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d438      	bmi.n	8007fc0 <_printf_float+0x38c>
 8007f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f52:	eba2 030a 	sub.w	r3, r2, sl
 8007f56:	eba2 0901 	sub.w	r9, r2, r1
 8007f5a:	4599      	cmp	r9, r3
 8007f5c:	bfa8      	it	ge
 8007f5e:	4699      	movge	r9, r3
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	dc34      	bgt.n	8007fd0 <_printf_float+0x39c>
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6e:	f104 0a1a 	add.w	sl, r4, #26
 8007f72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	eba3 0309 	sub.w	r3, r3, r9
 8007f7c:	4543      	cmp	r3, r8
 8007f7e:	f77f af7a 	ble.w	8007e76 <_printf_float+0x242>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4652      	mov	r2, sl
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f43f aeac 	beq.w	8007cea <_printf_float+0xb6>
 8007f92:	f108 0801 	add.w	r8, r8, #1
 8007f96:	e7ec      	b.n	8007f72 <_printf_float+0x33e>
 8007f98:	4613      	mov	r3, r2
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d1c0      	bne.n	8007f28 <_printf_float+0x2f4>
 8007fa6:	e6a0      	b.n	8007cea <_printf_float+0xb6>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f ae99 	beq.w	8007cea <_printf_float+0xb6>
 8007fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fba:	f10b 0b01 	add.w	fp, fp, #1
 8007fbe:	e7b9      	b.n	8007f34 <_printf_float+0x300>
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d1bf      	bne.n	8007f4e <_printf_float+0x31a>
 8007fce:	e68c      	b.n	8007cea <_printf_float+0xb6>
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	eb08 020a 	add.w	r2, r8, sl
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1c2      	bne.n	8007f66 <_printf_float+0x332>
 8007fe0:	e683      	b.n	8007cea <_printf_float+0xb6>
 8007fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fe4:	2a01      	cmp	r2, #1
 8007fe6:	dc01      	bgt.n	8007fec <_printf_float+0x3b8>
 8007fe8:	07db      	lsls	r3, r3, #31
 8007fea:	d537      	bpl.n	800805c <_printf_float+0x428>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4642      	mov	r2, r8
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f ae77 	beq.w	8007cea <_printf_float+0xb6>
 8007ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f ae6f 	beq.w	8007cea <_printf_float+0xb6>
 800800c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008010:	2200      	movs	r2, #0
 8008012:	2300      	movs	r3, #0
 8008014:	f7f8 fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8008018:	b9d8      	cbnz	r0, 8008052 <_printf_float+0x41e>
 800801a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800801c:	f108 0201 	add.w	r2, r8, #1
 8008020:	3b01      	subs	r3, #1
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d10e      	bne.n	800804a <_printf_float+0x416>
 800802c:	e65d      	b.n	8007cea <_printf_float+0xb6>
 800802e:	2301      	movs	r3, #1
 8008030:	464a      	mov	r2, r9
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f ae56 	beq.w	8007cea <_printf_float+0xb6>
 800803e:	f108 0801 	add.w	r8, r8, #1
 8008042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008044:	3b01      	subs	r3, #1
 8008046:	4543      	cmp	r3, r8
 8008048:	dcf1      	bgt.n	800802e <_printf_float+0x3fa>
 800804a:	4653      	mov	r3, sl
 800804c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008050:	e6e0      	b.n	8007e14 <_printf_float+0x1e0>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	f104 091a 	add.w	r9, r4, #26
 800805a:	e7f2      	b.n	8008042 <_printf_float+0x40e>
 800805c:	2301      	movs	r3, #1
 800805e:	4642      	mov	r2, r8
 8008060:	e7df      	b.n	8008022 <_printf_float+0x3ee>
 8008062:	2301      	movs	r3, #1
 8008064:	464a      	mov	r2, r9
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f ae3c 	beq.w	8007cea <_printf_float+0xb6>
 8008072:	f108 0801 	add.w	r8, r8, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	4543      	cmp	r3, r8
 800807e:	dcf0      	bgt.n	8008062 <_printf_float+0x42e>
 8008080:	e6fd      	b.n	8007e7e <_printf_float+0x24a>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	f104 0919 	add.w	r9, r4, #25
 800808a:	e7f4      	b.n	8008076 <_printf_float+0x442>

0800808c <_printf_common>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	4616      	mov	r6, r2
 8008092:	4699      	mov	r9, r3
 8008094:	688a      	ldr	r2, [r1, #8]
 8008096:	690b      	ldr	r3, [r1, #16]
 8008098:	4607      	mov	r7, r0
 800809a:	4293      	cmp	r3, r2
 800809c:	bfb8      	it	lt
 800809e:	4613      	movlt	r3, r2
 80080a0:	6033      	str	r3, [r6, #0]
 80080a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080a6:	460c      	mov	r4, r1
 80080a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080ac:	b10a      	cbz	r2, 80080b2 <_printf_common+0x26>
 80080ae:	3301      	adds	r3, #1
 80080b0:	6033      	str	r3, [r6, #0]
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	0699      	lsls	r1, r3, #26
 80080b6:	bf42      	ittt	mi
 80080b8:	6833      	ldrmi	r3, [r6, #0]
 80080ba:	3302      	addmi	r3, #2
 80080bc:	6033      	strmi	r3, [r6, #0]
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	f015 0506 	ands.w	r5, r5, #6
 80080c4:	d106      	bne.n	80080d4 <_printf_common+0x48>
 80080c6:	f104 0a19 	add.w	sl, r4, #25
 80080ca:	68e3      	ldr	r3, [r4, #12]
 80080cc:	6832      	ldr	r2, [r6, #0]
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	42ab      	cmp	r3, r5
 80080d2:	dc28      	bgt.n	8008126 <_printf_common+0x9a>
 80080d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080d8:	1e13      	subs	r3, r2, #0
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	bf18      	it	ne
 80080de:	2301      	movne	r3, #1
 80080e0:	0692      	lsls	r2, r2, #26
 80080e2:	d42d      	bmi.n	8008140 <_printf_common+0xb4>
 80080e4:	4649      	mov	r1, r9
 80080e6:	4638      	mov	r0, r7
 80080e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ec:	47c0      	blx	r8
 80080ee:	3001      	adds	r0, #1
 80080f0:	d020      	beq.n	8008134 <_printf_common+0xa8>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	68e5      	ldr	r5, [r4, #12]
 80080f6:	f003 0306 	and.w	r3, r3, #6
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	bf18      	it	ne
 80080fe:	2500      	movne	r5, #0
 8008100:	6832      	ldr	r2, [r6, #0]
 8008102:	f04f 0600 	mov.w	r6, #0
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	bf08      	it	eq
 800810a:	1aad      	subeq	r5, r5, r2
 800810c:	6922      	ldr	r2, [r4, #16]
 800810e:	bf08      	it	eq
 8008110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008114:	4293      	cmp	r3, r2
 8008116:	bfc4      	itt	gt
 8008118:	1a9b      	subgt	r3, r3, r2
 800811a:	18ed      	addgt	r5, r5, r3
 800811c:	341a      	adds	r4, #26
 800811e:	42b5      	cmp	r5, r6
 8008120:	d11a      	bne.n	8008158 <_printf_common+0xcc>
 8008122:	2000      	movs	r0, #0
 8008124:	e008      	b.n	8008138 <_printf_common+0xac>
 8008126:	2301      	movs	r3, #1
 8008128:	4652      	mov	r2, sl
 800812a:	4649      	mov	r1, r9
 800812c:	4638      	mov	r0, r7
 800812e:	47c0      	blx	r8
 8008130:	3001      	adds	r0, #1
 8008132:	d103      	bne.n	800813c <_printf_common+0xb0>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813c:	3501      	adds	r5, #1
 800813e:	e7c4      	b.n	80080ca <_printf_common+0x3e>
 8008140:	2030      	movs	r0, #48	; 0x30
 8008142:	18e1      	adds	r1, r4, r3
 8008144:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800814e:	4422      	add	r2, r4
 8008150:	3302      	adds	r3, #2
 8008152:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008156:	e7c5      	b.n	80080e4 <_printf_common+0x58>
 8008158:	2301      	movs	r3, #1
 800815a:	4622      	mov	r2, r4
 800815c:	4649      	mov	r1, r9
 800815e:	4638      	mov	r0, r7
 8008160:	47c0      	blx	r8
 8008162:	3001      	adds	r0, #1
 8008164:	d0e6      	beq.n	8008134 <_printf_common+0xa8>
 8008166:	3601      	adds	r6, #1
 8008168:	e7d9      	b.n	800811e <_printf_common+0x92>
	...

0800816c <_printf_i>:
 800816c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	460c      	mov	r4, r1
 8008172:	7e27      	ldrb	r7, [r4, #24]
 8008174:	4691      	mov	r9, r2
 8008176:	2f78      	cmp	r7, #120	; 0x78
 8008178:	4680      	mov	r8, r0
 800817a:	469a      	mov	sl, r3
 800817c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800817e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008182:	d807      	bhi.n	8008194 <_printf_i+0x28>
 8008184:	2f62      	cmp	r7, #98	; 0x62
 8008186:	d80a      	bhi.n	800819e <_printf_i+0x32>
 8008188:	2f00      	cmp	r7, #0
 800818a:	f000 80d9 	beq.w	8008340 <_printf_i+0x1d4>
 800818e:	2f58      	cmp	r7, #88	; 0x58
 8008190:	f000 80a4 	beq.w	80082dc <_printf_i+0x170>
 8008194:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800819c:	e03a      	b.n	8008214 <_printf_i+0xa8>
 800819e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081a2:	2b15      	cmp	r3, #21
 80081a4:	d8f6      	bhi.n	8008194 <_printf_i+0x28>
 80081a6:	a001      	add	r0, pc, #4	; (adr r0, 80081ac <_printf_i+0x40>)
 80081a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081ac:	08008205 	.word	0x08008205
 80081b0:	08008219 	.word	0x08008219
 80081b4:	08008195 	.word	0x08008195
 80081b8:	08008195 	.word	0x08008195
 80081bc:	08008195 	.word	0x08008195
 80081c0:	08008195 	.word	0x08008195
 80081c4:	08008219 	.word	0x08008219
 80081c8:	08008195 	.word	0x08008195
 80081cc:	08008195 	.word	0x08008195
 80081d0:	08008195 	.word	0x08008195
 80081d4:	08008195 	.word	0x08008195
 80081d8:	08008327 	.word	0x08008327
 80081dc:	08008249 	.word	0x08008249
 80081e0:	08008309 	.word	0x08008309
 80081e4:	08008195 	.word	0x08008195
 80081e8:	08008195 	.word	0x08008195
 80081ec:	08008349 	.word	0x08008349
 80081f0:	08008195 	.word	0x08008195
 80081f4:	08008249 	.word	0x08008249
 80081f8:	08008195 	.word	0x08008195
 80081fc:	08008195 	.word	0x08008195
 8008200:	08008311 	.word	0x08008311
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800820a:	1d1a      	adds	r2, r3, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	600a      	str	r2, [r1, #0]
 8008210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008214:	2301      	movs	r3, #1
 8008216:	e0a4      	b.n	8008362 <_printf_i+0x1f6>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	6808      	ldr	r0, [r1, #0]
 800821c:	062e      	lsls	r6, r5, #24
 800821e:	f100 0304 	add.w	r3, r0, #4
 8008222:	d50a      	bpl.n	800823a <_printf_i+0xce>
 8008224:	6805      	ldr	r5, [r0, #0]
 8008226:	600b      	str	r3, [r1, #0]
 8008228:	2d00      	cmp	r5, #0
 800822a:	da03      	bge.n	8008234 <_printf_i+0xc8>
 800822c:	232d      	movs	r3, #45	; 0x2d
 800822e:	426d      	negs	r5, r5
 8008230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008234:	230a      	movs	r3, #10
 8008236:	485e      	ldr	r0, [pc, #376]	; (80083b0 <_printf_i+0x244>)
 8008238:	e019      	b.n	800826e <_printf_i+0x102>
 800823a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800823e:	6805      	ldr	r5, [r0, #0]
 8008240:	600b      	str	r3, [r1, #0]
 8008242:	bf18      	it	ne
 8008244:	b22d      	sxthne	r5, r5
 8008246:	e7ef      	b.n	8008228 <_printf_i+0xbc>
 8008248:	680b      	ldr	r3, [r1, #0]
 800824a:	6825      	ldr	r5, [r4, #0]
 800824c:	1d18      	adds	r0, r3, #4
 800824e:	6008      	str	r0, [r1, #0]
 8008250:	0628      	lsls	r0, r5, #24
 8008252:	d501      	bpl.n	8008258 <_printf_i+0xec>
 8008254:	681d      	ldr	r5, [r3, #0]
 8008256:	e002      	b.n	800825e <_printf_i+0xf2>
 8008258:	0669      	lsls	r1, r5, #25
 800825a:	d5fb      	bpl.n	8008254 <_printf_i+0xe8>
 800825c:	881d      	ldrh	r5, [r3, #0]
 800825e:	2f6f      	cmp	r7, #111	; 0x6f
 8008260:	bf0c      	ite	eq
 8008262:	2308      	moveq	r3, #8
 8008264:	230a      	movne	r3, #10
 8008266:	4852      	ldr	r0, [pc, #328]	; (80083b0 <_printf_i+0x244>)
 8008268:	2100      	movs	r1, #0
 800826a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800826e:	6866      	ldr	r6, [r4, #4]
 8008270:	2e00      	cmp	r6, #0
 8008272:	bfa8      	it	ge
 8008274:	6821      	ldrge	r1, [r4, #0]
 8008276:	60a6      	str	r6, [r4, #8]
 8008278:	bfa4      	itt	ge
 800827a:	f021 0104 	bicge.w	r1, r1, #4
 800827e:	6021      	strge	r1, [r4, #0]
 8008280:	b90d      	cbnz	r5, 8008286 <_printf_i+0x11a>
 8008282:	2e00      	cmp	r6, #0
 8008284:	d04d      	beq.n	8008322 <_printf_i+0x1b6>
 8008286:	4616      	mov	r6, r2
 8008288:	fbb5 f1f3 	udiv	r1, r5, r3
 800828c:	fb03 5711 	mls	r7, r3, r1, r5
 8008290:	5dc7      	ldrb	r7, [r0, r7]
 8008292:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008296:	462f      	mov	r7, r5
 8008298:	42bb      	cmp	r3, r7
 800829a:	460d      	mov	r5, r1
 800829c:	d9f4      	bls.n	8008288 <_printf_i+0x11c>
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d10b      	bne.n	80082ba <_printf_i+0x14e>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	07df      	lsls	r7, r3, #31
 80082a6:	d508      	bpl.n	80082ba <_printf_i+0x14e>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6861      	ldr	r1, [r4, #4]
 80082ac:	4299      	cmp	r1, r3
 80082ae:	bfde      	ittt	le
 80082b0:	2330      	movle	r3, #48	; 0x30
 80082b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082ba:	1b92      	subs	r2, r2, r6
 80082bc:	6122      	str	r2, [r4, #16]
 80082be:	464b      	mov	r3, r9
 80082c0:	4621      	mov	r1, r4
 80082c2:	4640      	mov	r0, r8
 80082c4:	f8cd a000 	str.w	sl, [sp]
 80082c8:	aa03      	add	r2, sp, #12
 80082ca:	f7ff fedf 	bl	800808c <_printf_common>
 80082ce:	3001      	adds	r0, #1
 80082d0:	d14c      	bne.n	800836c <_printf_i+0x200>
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	b004      	add	sp, #16
 80082d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082dc:	4834      	ldr	r0, [pc, #208]	; (80083b0 <_printf_i+0x244>)
 80082de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082e2:	680e      	ldr	r6, [r1, #0]
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80082ea:	061f      	lsls	r7, r3, #24
 80082ec:	600e      	str	r6, [r1, #0]
 80082ee:	d514      	bpl.n	800831a <_printf_i+0x1ae>
 80082f0:	07d9      	lsls	r1, r3, #31
 80082f2:	bf44      	itt	mi
 80082f4:	f043 0320 	orrmi.w	r3, r3, #32
 80082f8:	6023      	strmi	r3, [r4, #0]
 80082fa:	b91d      	cbnz	r5, 8008304 <_printf_i+0x198>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	f023 0320 	bic.w	r3, r3, #32
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	2310      	movs	r3, #16
 8008306:	e7af      	b.n	8008268 <_printf_i+0xfc>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	f043 0320 	orr.w	r3, r3, #32
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	2378      	movs	r3, #120	; 0x78
 8008312:	4828      	ldr	r0, [pc, #160]	; (80083b4 <_printf_i+0x248>)
 8008314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008318:	e7e3      	b.n	80082e2 <_printf_i+0x176>
 800831a:	065e      	lsls	r6, r3, #25
 800831c:	bf48      	it	mi
 800831e:	b2ad      	uxthmi	r5, r5
 8008320:	e7e6      	b.n	80082f0 <_printf_i+0x184>
 8008322:	4616      	mov	r6, r2
 8008324:	e7bb      	b.n	800829e <_printf_i+0x132>
 8008326:	680b      	ldr	r3, [r1, #0]
 8008328:	6826      	ldr	r6, [r4, #0]
 800832a:	1d1d      	adds	r5, r3, #4
 800832c:	6960      	ldr	r0, [r4, #20]
 800832e:	600d      	str	r5, [r1, #0]
 8008330:	0635      	lsls	r5, r6, #24
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	d501      	bpl.n	800833a <_printf_i+0x1ce>
 8008336:	6018      	str	r0, [r3, #0]
 8008338:	e002      	b.n	8008340 <_printf_i+0x1d4>
 800833a:	0671      	lsls	r1, r6, #25
 800833c:	d5fb      	bpl.n	8008336 <_printf_i+0x1ca>
 800833e:	8018      	strh	r0, [r3, #0]
 8008340:	2300      	movs	r3, #0
 8008342:	4616      	mov	r6, r2
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	e7ba      	b.n	80082be <_printf_i+0x152>
 8008348:	680b      	ldr	r3, [r1, #0]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	600a      	str	r2, [r1, #0]
 800834e:	681e      	ldr	r6, [r3, #0]
 8008350:	2100      	movs	r1, #0
 8008352:	4630      	mov	r0, r6
 8008354:	6862      	ldr	r2, [r4, #4]
 8008356:	f000 fee1 	bl	800911c <memchr>
 800835a:	b108      	cbz	r0, 8008360 <_printf_i+0x1f4>
 800835c:	1b80      	subs	r0, r0, r6
 800835e:	6060      	str	r0, [r4, #4]
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	6123      	str	r3, [r4, #16]
 8008364:	2300      	movs	r3, #0
 8008366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836a:	e7a8      	b.n	80082be <_printf_i+0x152>
 800836c:	4632      	mov	r2, r6
 800836e:	4649      	mov	r1, r9
 8008370:	4640      	mov	r0, r8
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	47d0      	blx	sl
 8008376:	3001      	adds	r0, #1
 8008378:	d0ab      	beq.n	80082d2 <_printf_i+0x166>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	079b      	lsls	r3, r3, #30
 800837e:	d413      	bmi.n	80083a8 <_printf_i+0x23c>
 8008380:	68e0      	ldr	r0, [r4, #12]
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	4298      	cmp	r0, r3
 8008386:	bfb8      	it	lt
 8008388:	4618      	movlt	r0, r3
 800838a:	e7a4      	b.n	80082d6 <_printf_i+0x16a>
 800838c:	2301      	movs	r3, #1
 800838e:	4632      	mov	r2, r6
 8008390:	4649      	mov	r1, r9
 8008392:	4640      	mov	r0, r8
 8008394:	47d0      	blx	sl
 8008396:	3001      	adds	r0, #1
 8008398:	d09b      	beq.n	80082d2 <_printf_i+0x166>
 800839a:	3501      	adds	r5, #1
 800839c:	68e3      	ldr	r3, [r4, #12]
 800839e:	9903      	ldr	r1, [sp, #12]
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	42ab      	cmp	r3, r5
 80083a4:	dcf2      	bgt.n	800838c <_printf_i+0x220>
 80083a6:	e7eb      	b.n	8008380 <_printf_i+0x214>
 80083a8:	2500      	movs	r5, #0
 80083aa:	f104 0619 	add.w	r6, r4, #25
 80083ae:	e7f5      	b.n	800839c <_printf_i+0x230>
 80083b0:	0800aa46 	.word	0x0800aa46
 80083b4:	0800aa57 	.word	0x0800aa57

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	2300      	movs	r3, #0
 80083bc:	4d05      	ldr	r5, [pc, #20]	; (80083d4 <_sbrk_r+0x1c>)
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f9 fa20 	bl	8001808 <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20001d18 	.word	0x20001d18

080083d8 <siprintf>:
 80083d8:	b40e      	push	{r1, r2, r3}
 80083da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083de:	b500      	push	{lr}
 80083e0:	b09c      	sub	sp, #112	; 0x70
 80083e2:	ab1d      	add	r3, sp, #116	; 0x74
 80083e4:	9002      	str	r0, [sp, #8]
 80083e6:	9006      	str	r0, [sp, #24]
 80083e8:	9107      	str	r1, [sp, #28]
 80083ea:	9104      	str	r1, [sp, #16]
 80083ec:	4808      	ldr	r0, [pc, #32]	; (8008410 <siprintf+0x38>)
 80083ee:	4909      	ldr	r1, [pc, #36]	; (8008414 <siprintf+0x3c>)
 80083f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f4:	9105      	str	r1, [sp, #20]
 80083f6:	6800      	ldr	r0, [r0, #0]
 80083f8:	a902      	add	r1, sp, #8
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	f001 fa94 	bl	8009928 <_svfiprintf_r>
 8008400:	2200      	movs	r2, #0
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	b01c      	add	sp, #112	; 0x70
 8008408:	f85d eb04 	ldr.w	lr, [sp], #4
 800840c:	b003      	add	sp, #12
 800840e:	4770      	bx	lr
 8008410:	20000010 	.word	0x20000010
 8008414:	ffff0208 	.word	0xffff0208

08008418 <quorem>:
 8008418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	6903      	ldr	r3, [r0, #16]
 800841e:	690c      	ldr	r4, [r1, #16]
 8008420:	4607      	mov	r7, r0
 8008422:	42a3      	cmp	r3, r4
 8008424:	f2c0 8083 	blt.w	800852e <quorem+0x116>
 8008428:	3c01      	subs	r4, #1
 800842a:	f100 0514 	add.w	r5, r0, #20
 800842e:	f101 0814 	add.w	r8, r1, #20
 8008432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800843c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008440:	3301      	adds	r3, #1
 8008442:	429a      	cmp	r2, r3
 8008444:	fbb2 f6f3 	udiv	r6, r2, r3
 8008448:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800844c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008450:	d332      	bcc.n	80084b8 <quorem+0xa0>
 8008452:	f04f 0e00 	mov.w	lr, #0
 8008456:	4640      	mov	r0, r8
 8008458:	46ac      	mov	ip, r5
 800845a:	46f2      	mov	sl, lr
 800845c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008460:	b293      	uxth	r3, r2
 8008462:	fb06 e303 	mla	r3, r6, r3, lr
 8008466:	0c12      	lsrs	r2, r2, #16
 8008468:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800846c:	fb06 e202 	mla	r2, r6, r2, lr
 8008470:	b29b      	uxth	r3, r3
 8008472:	ebaa 0303 	sub.w	r3, sl, r3
 8008476:	f8dc a000 	ldr.w	sl, [ip]
 800847a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800847e:	fa1f fa8a 	uxth.w	sl, sl
 8008482:	4453      	add	r3, sl
 8008484:	fa1f fa82 	uxth.w	sl, r2
 8008488:	f8dc 2000 	ldr.w	r2, [ip]
 800848c:	4581      	cmp	r9, r0
 800848e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008492:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008496:	b29b      	uxth	r3, r3
 8008498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800849c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084a0:	f84c 3b04 	str.w	r3, [ip], #4
 80084a4:	d2da      	bcs.n	800845c <quorem+0x44>
 80084a6:	f855 300b 	ldr.w	r3, [r5, fp]
 80084aa:	b92b      	cbnz	r3, 80084b8 <quorem+0xa0>
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	3b04      	subs	r3, #4
 80084b0:	429d      	cmp	r5, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	d32f      	bcc.n	8008516 <quorem+0xfe>
 80084b6:	613c      	str	r4, [r7, #16]
 80084b8:	4638      	mov	r0, r7
 80084ba:	f001 f8c3 	bl	8009644 <__mcmp>
 80084be:	2800      	cmp	r0, #0
 80084c0:	db25      	blt.n	800850e <quorem+0xf6>
 80084c2:	4628      	mov	r0, r5
 80084c4:	f04f 0c00 	mov.w	ip, #0
 80084c8:	3601      	adds	r6, #1
 80084ca:	f858 1b04 	ldr.w	r1, [r8], #4
 80084ce:	f8d0 e000 	ldr.w	lr, [r0]
 80084d2:	b28b      	uxth	r3, r1
 80084d4:	ebac 0303 	sub.w	r3, ip, r3
 80084d8:	fa1f f28e 	uxth.w	r2, lr
 80084dc:	4413      	add	r3, r2
 80084de:	0c0a      	lsrs	r2, r1, #16
 80084e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084ee:	45c1      	cmp	r9, r8
 80084f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084f4:	f840 3b04 	str.w	r3, [r0], #4
 80084f8:	d2e7      	bcs.n	80084ca <quorem+0xb2>
 80084fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008502:	b922      	cbnz	r2, 800850e <quorem+0xf6>
 8008504:	3b04      	subs	r3, #4
 8008506:	429d      	cmp	r5, r3
 8008508:	461a      	mov	r2, r3
 800850a:	d30a      	bcc.n	8008522 <quorem+0x10a>
 800850c:	613c      	str	r4, [r7, #16]
 800850e:	4630      	mov	r0, r6
 8008510:	b003      	add	sp, #12
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	3b04      	subs	r3, #4
 800851a:	2a00      	cmp	r2, #0
 800851c:	d1cb      	bne.n	80084b6 <quorem+0x9e>
 800851e:	3c01      	subs	r4, #1
 8008520:	e7c6      	b.n	80084b0 <quorem+0x98>
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	3b04      	subs	r3, #4
 8008526:	2a00      	cmp	r2, #0
 8008528:	d1f0      	bne.n	800850c <quorem+0xf4>
 800852a:	3c01      	subs	r4, #1
 800852c:	e7eb      	b.n	8008506 <quorem+0xee>
 800852e:	2000      	movs	r0, #0
 8008530:	e7ee      	b.n	8008510 <quorem+0xf8>
 8008532:	0000      	movs	r0, r0
 8008534:	0000      	movs	r0, r0
	...

08008538 <_dtoa_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	4616      	mov	r6, r2
 800853e:	461f      	mov	r7, r3
 8008540:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008542:	b099      	sub	sp, #100	; 0x64
 8008544:	4605      	mov	r5, r0
 8008546:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800854a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800854e:	b974      	cbnz	r4, 800856e <_dtoa_r+0x36>
 8008550:	2010      	movs	r0, #16
 8008552:	f7ff fa0d 	bl	8007970 <malloc>
 8008556:	4602      	mov	r2, r0
 8008558:	6268      	str	r0, [r5, #36]	; 0x24
 800855a:	b920      	cbnz	r0, 8008566 <_dtoa_r+0x2e>
 800855c:	21ea      	movs	r1, #234	; 0xea
 800855e:	4bae      	ldr	r3, [pc, #696]	; (8008818 <_dtoa_r+0x2e0>)
 8008560:	48ae      	ldr	r0, [pc, #696]	; (800881c <_dtoa_r+0x2e4>)
 8008562:	f001 fae1 	bl	8009b28 <__assert_func>
 8008566:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800856a:	6004      	str	r4, [r0, #0]
 800856c:	60c4      	str	r4, [r0, #12]
 800856e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008570:	6819      	ldr	r1, [r3, #0]
 8008572:	b151      	cbz	r1, 800858a <_dtoa_r+0x52>
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	2301      	movs	r3, #1
 8008578:	4093      	lsls	r3, r2
 800857a:	604a      	str	r2, [r1, #4]
 800857c:	608b      	str	r3, [r1, #8]
 800857e:	4628      	mov	r0, r5
 8008580:	f000 fe26 	bl	80091d0 <_Bfree>
 8008584:	2200      	movs	r2, #0
 8008586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	1e3b      	subs	r3, r7, #0
 800858c:	bfaf      	iteee	ge
 800858e:	2300      	movge	r3, #0
 8008590:	2201      	movlt	r2, #1
 8008592:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008596:	9305      	strlt	r3, [sp, #20]
 8008598:	bfa8      	it	ge
 800859a:	f8c8 3000 	strge.w	r3, [r8]
 800859e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80085a2:	4b9f      	ldr	r3, [pc, #636]	; (8008820 <_dtoa_r+0x2e8>)
 80085a4:	bfb8      	it	lt
 80085a6:	f8c8 2000 	strlt.w	r2, [r8]
 80085aa:	ea33 0309 	bics.w	r3, r3, r9
 80085ae:	d119      	bne.n	80085e4 <_dtoa_r+0xac>
 80085b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80085b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085bc:	4333      	orrs	r3, r6
 80085be:	f000 8580 	beq.w	80090c2 <_dtoa_r+0xb8a>
 80085c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085c4:	b953      	cbnz	r3, 80085dc <_dtoa_r+0xa4>
 80085c6:	4b97      	ldr	r3, [pc, #604]	; (8008824 <_dtoa_r+0x2ec>)
 80085c8:	e022      	b.n	8008610 <_dtoa_r+0xd8>
 80085ca:	4b97      	ldr	r3, [pc, #604]	; (8008828 <_dtoa_r+0x2f0>)
 80085cc:	9308      	str	r3, [sp, #32]
 80085ce:	3308      	adds	r3, #8
 80085d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	9808      	ldr	r0, [sp, #32]
 80085d6:	b019      	add	sp, #100	; 0x64
 80085d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085dc:	4b91      	ldr	r3, [pc, #580]	; (8008824 <_dtoa_r+0x2ec>)
 80085de:	9308      	str	r3, [sp, #32]
 80085e0:	3303      	adds	r3, #3
 80085e2:	e7f5      	b.n	80085d0 <_dtoa_r+0x98>
 80085e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80085ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085f0:	2200      	movs	r2, #0
 80085f2:	2300      	movs	r3, #0
 80085f4:	f7f8 f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80085f8:	4680      	mov	r8, r0
 80085fa:	b158      	cbz	r0, 8008614 <_dtoa_r+0xdc>
 80085fc:	2301      	movs	r3, #1
 80085fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 8559 	beq.w	80090bc <_dtoa_r+0xb84>
 800860a:	4888      	ldr	r0, [pc, #544]	; (800882c <_dtoa_r+0x2f4>)
 800860c:	6018      	str	r0, [r3, #0]
 800860e:	1e43      	subs	r3, r0, #1
 8008610:	9308      	str	r3, [sp, #32]
 8008612:	e7df      	b.n	80085d4 <_dtoa_r+0x9c>
 8008614:	ab16      	add	r3, sp, #88	; 0x58
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	ab17      	add	r3, sp, #92	; 0x5c
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4628      	mov	r0, r5
 800861e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008622:	f001 f8bb 	bl	800979c <__d2b>
 8008626:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800862a:	4682      	mov	sl, r0
 800862c:	2c00      	cmp	r4, #0
 800862e:	d07e      	beq.n	800872e <_dtoa_r+0x1f6>
 8008630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008636:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800863a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800863e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008642:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008646:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800864a:	2200      	movs	r2, #0
 800864c:	4b78      	ldr	r3, [pc, #480]	; (8008830 <_dtoa_r+0x2f8>)
 800864e:	f7f7 fd8b 	bl	8000168 <__aeabi_dsub>
 8008652:	a36b      	add	r3, pc, #428	; (adr r3, 8008800 <_dtoa_r+0x2c8>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f7f7 ff3e 	bl	80004d8 <__aeabi_dmul>
 800865c:	a36a      	add	r3, pc, #424	; (adr r3, 8008808 <_dtoa_r+0x2d0>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f7 fd83 	bl	800016c <__adddf3>
 8008666:	4606      	mov	r6, r0
 8008668:	4620      	mov	r0, r4
 800866a:	460f      	mov	r7, r1
 800866c:	f7f7 feca 	bl	8000404 <__aeabi_i2d>
 8008670:	a367      	add	r3, pc, #412	; (adr r3, 8008810 <_dtoa_r+0x2d8>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f7 ff2f 	bl	80004d8 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f7 fd73 	bl	800016c <__adddf3>
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	f7f8 f9d5 	bl	8000a38 <__aeabi_d2iz>
 800868e:	2200      	movs	r2, #0
 8008690:	4681      	mov	r9, r0
 8008692:	2300      	movs	r3, #0
 8008694:	4630      	mov	r0, r6
 8008696:	4639      	mov	r1, r7
 8008698:	f7f8 f990 	bl	80009bc <__aeabi_dcmplt>
 800869c:	b148      	cbz	r0, 80086b2 <_dtoa_r+0x17a>
 800869e:	4648      	mov	r0, r9
 80086a0:	f7f7 feb0 	bl	8000404 <__aeabi_i2d>
 80086a4:	4632      	mov	r2, r6
 80086a6:	463b      	mov	r3, r7
 80086a8:	f7f8 f97e 	bl	80009a8 <__aeabi_dcmpeq>
 80086ac:	b908      	cbnz	r0, 80086b2 <_dtoa_r+0x17a>
 80086ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80086b2:	f1b9 0f16 	cmp.w	r9, #22
 80086b6:	d857      	bhi.n	8008768 <_dtoa_r+0x230>
 80086b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086bc:	4b5d      	ldr	r3, [pc, #372]	; (8008834 <_dtoa_r+0x2fc>)
 80086be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f7f8 f979 	bl	80009bc <__aeabi_dcmplt>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d04e      	beq.n	800876c <_dtoa_r+0x234>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80086d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80086d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086d8:	1b1c      	subs	r4, r3, r4
 80086da:	1e63      	subs	r3, r4, #1
 80086dc:	9309      	str	r3, [sp, #36]	; 0x24
 80086de:	bf49      	itett	mi
 80086e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80086e4:	2300      	movpl	r3, #0
 80086e6:	9306      	strmi	r3, [sp, #24]
 80086e8:	2300      	movmi	r3, #0
 80086ea:	bf54      	ite	pl
 80086ec:	9306      	strpl	r3, [sp, #24]
 80086ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80086f0:	f1b9 0f00 	cmp.w	r9, #0
 80086f4:	db3c      	blt.n	8008770 <_dtoa_r+0x238>
 80086f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086fc:	444b      	add	r3, r9
 80086fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008700:	2300      	movs	r3, #0
 8008702:	930a      	str	r3, [sp, #40]	; 0x28
 8008704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008706:	2b09      	cmp	r3, #9
 8008708:	d86c      	bhi.n	80087e4 <_dtoa_r+0x2ac>
 800870a:	2b05      	cmp	r3, #5
 800870c:	bfc4      	itt	gt
 800870e:	3b04      	subgt	r3, #4
 8008710:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008714:	bfc8      	it	gt
 8008716:	2400      	movgt	r4, #0
 8008718:	f1a3 0302 	sub.w	r3, r3, #2
 800871c:	bfd8      	it	le
 800871e:	2401      	movle	r4, #1
 8008720:	2b03      	cmp	r3, #3
 8008722:	f200 808b 	bhi.w	800883c <_dtoa_r+0x304>
 8008726:	e8df f003 	tbb	[pc, r3]
 800872a:	4f2d      	.short	0x4f2d
 800872c:	5b4d      	.short	0x5b4d
 800872e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008732:	441c      	add	r4, r3
 8008734:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008738:	2b20      	cmp	r3, #32
 800873a:	bfc3      	ittte	gt
 800873c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008740:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008744:	fa09 f303 	lslgt.w	r3, r9, r3
 8008748:	f1c3 0320 	rsble	r3, r3, #32
 800874c:	bfc6      	itte	gt
 800874e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008752:	4318      	orrgt	r0, r3
 8008754:	fa06 f003 	lslle.w	r0, r6, r3
 8008758:	f7f7 fe44 	bl	80003e4 <__aeabi_ui2d>
 800875c:	2301      	movs	r3, #1
 800875e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008762:	3c01      	subs	r4, #1
 8008764:	9313      	str	r3, [sp, #76]	; 0x4c
 8008766:	e770      	b.n	800864a <_dtoa_r+0x112>
 8008768:	2301      	movs	r3, #1
 800876a:	e7b3      	b.n	80086d4 <_dtoa_r+0x19c>
 800876c:	900f      	str	r0, [sp, #60]	; 0x3c
 800876e:	e7b2      	b.n	80086d6 <_dtoa_r+0x19e>
 8008770:	9b06      	ldr	r3, [sp, #24]
 8008772:	eba3 0309 	sub.w	r3, r3, r9
 8008776:	9306      	str	r3, [sp, #24]
 8008778:	f1c9 0300 	rsb	r3, r9, #0
 800877c:	930a      	str	r3, [sp, #40]	; 0x28
 800877e:	2300      	movs	r3, #0
 8008780:	930e      	str	r3, [sp, #56]	; 0x38
 8008782:	e7bf      	b.n	8008704 <_dtoa_r+0x1cc>
 8008784:	2300      	movs	r3, #0
 8008786:	930b      	str	r3, [sp, #44]	; 0x2c
 8008788:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800878a:	2b00      	cmp	r3, #0
 800878c:	dc59      	bgt.n	8008842 <_dtoa_r+0x30a>
 800878e:	f04f 0b01 	mov.w	fp, #1
 8008792:	465b      	mov	r3, fp
 8008794:	f8cd b008 	str.w	fp, [sp, #8]
 8008798:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800879c:	2200      	movs	r2, #0
 800879e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80087a0:	6042      	str	r2, [r0, #4]
 80087a2:	2204      	movs	r2, #4
 80087a4:	f102 0614 	add.w	r6, r2, #20
 80087a8:	429e      	cmp	r6, r3
 80087aa:	6841      	ldr	r1, [r0, #4]
 80087ac:	d94f      	bls.n	800884e <_dtoa_r+0x316>
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 fcce 	bl	8009150 <_Balloc>
 80087b4:	9008      	str	r0, [sp, #32]
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d14d      	bne.n	8008856 <_dtoa_r+0x31e>
 80087ba:	4602      	mov	r2, r0
 80087bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80087c0:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <_dtoa_r+0x300>)
 80087c2:	e6cd      	b.n	8008560 <_dtoa_r+0x28>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e7de      	b.n	8008786 <_dtoa_r+0x24e>
 80087c8:	2300      	movs	r3, #0
 80087ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80087cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087ce:	eb09 0b03 	add.w	fp, r9, r3
 80087d2:	f10b 0301 	add.w	r3, fp, #1
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	9302      	str	r3, [sp, #8]
 80087da:	bfb8      	it	lt
 80087dc:	2301      	movlt	r3, #1
 80087de:	e7dd      	b.n	800879c <_dtoa_r+0x264>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7f2      	b.n	80087ca <_dtoa_r+0x292>
 80087e4:	2401      	movs	r4, #1
 80087e6:	2300      	movs	r3, #0
 80087e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80087ea:	9322      	str	r3, [sp, #136]	; 0x88
 80087ec:	f04f 3bff 	mov.w	fp, #4294967295
 80087f0:	2200      	movs	r2, #0
 80087f2:	2312      	movs	r3, #18
 80087f4:	f8cd b008 	str.w	fp, [sp, #8]
 80087f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80087fa:	e7cf      	b.n	800879c <_dtoa_r+0x264>
 80087fc:	f3af 8000 	nop.w
 8008800:	636f4361 	.word	0x636f4361
 8008804:	3fd287a7 	.word	0x3fd287a7
 8008808:	8b60c8b3 	.word	0x8b60c8b3
 800880c:	3fc68a28 	.word	0x3fc68a28
 8008810:	509f79fb 	.word	0x509f79fb
 8008814:	3fd34413 	.word	0x3fd34413
 8008818:	0800ab76 	.word	0x0800ab76
 800881c:	0800ab8d 	.word	0x0800ab8d
 8008820:	7ff00000 	.word	0x7ff00000
 8008824:	0800ab72 	.word	0x0800ab72
 8008828:	0800ab69 	.word	0x0800ab69
 800882c:	0800aa45 	.word	0x0800aa45
 8008830:	3ff80000 	.word	0x3ff80000
 8008834:	0800ac88 	.word	0x0800ac88
 8008838:	0800abec 	.word	0x0800abec
 800883c:	2301      	movs	r3, #1
 800883e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008840:	e7d4      	b.n	80087ec <_dtoa_r+0x2b4>
 8008842:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008846:	465b      	mov	r3, fp
 8008848:	f8cd b008 	str.w	fp, [sp, #8]
 800884c:	e7a6      	b.n	800879c <_dtoa_r+0x264>
 800884e:	3101      	adds	r1, #1
 8008850:	6041      	str	r1, [r0, #4]
 8008852:	0052      	lsls	r2, r2, #1
 8008854:	e7a6      	b.n	80087a4 <_dtoa_r+0x26c>
 8008856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008858:	9a08      	ldr	r2, [sp, #32]
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	2b0e      	cmp	r3, #14
 8008860:	f200 80a8 	bhi.w	80089b4 <_dtoa_r+0x47c>
 8008864:	2c00      	cmp	r4, #0
 8008866:	f000 80a5 	beq.w	80089b4 <_dtoa_r+0x47c>
 800886a:	f1b9 0f00 	cmp.w	r9, #0
 800886e:	dd34      	ble.n	80088da <_dtoa_r+0x3a2>
 8008870:	4a9a      	ldr	r2, [pc, #616]	; (8008adc <_dtoa_r+0x5a4>)
 8008872:	f009 030f 	and.w	r3, r9, #15
 8008876:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800887a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800887e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008882:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008886:	ea4f 1429 	mov.w	r4, r9, asr #4
 800888a:	d016      	beq.n	80088ba <_dtoa_r+0x382>
 800888c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008890:	4b93      	ldr	r3, [pc, #588]	; (8008ae0 <_dtoa_r+0x5a8>)
 8008892:	2703      	movs	r7, #3
 8008894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008898:	f7f7 ff48 	bl	800072c <__aeabi_ddiv>
 800889c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088a0:	f004 040f 	and.w	r4, r4, #15
 80088a4:	4e8e      	ldr	r6, [pc, #568]	; (8008ae0 <_dtoa_r+0x5a8>)
 80088a6:	b954      	cbnz	r4, 80088be <_dtoa_r+0x386>
 80088a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088b0:	f7f7 ff3c 	bl	800072c <__aeabi_ddiv>
 80088b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088b8:	e029      	b.n	800890e <_dtoa_r+0x3d6>
 80088ba:	2702      	movs	r7, #2
 80088bc:	e7f2      	b.n	80088a4 <_dtoa_r+0x36c>
 80088be:	07e1      	lsls	r1, r4, #31
 80088c0:	d508      	bpl.n	80088d4 <_dtoa_r+0x39c>
 80088c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088ca:	f7f7 fe05 	bl	80004d8 <__aeabi_dmul>
 80088ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088d2:	3701      	adds	r7, #1
 80088d4:	1064      	asrs	r4, r4, #1
 80088d6:	3608      	adds	r6, #8
 80088d8:	e7e5      	b.n	80088a6 <_dtoa_r+0x36e>
 80088da:	f000 80a5 	beq.w	8008a28 <_dtoa_r+0x4f0>
 80088de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088e2:	f1c9 0400 	rsb	r4, r9, #0
 80088e6:	4b7d      	ldr	r3, [pc, #500]	; (8008adc <_dtoa_r+0x5a4>)
 80088e8:	f004 020f 	and.w	r2, r4, #15
 80088ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f7f7 fdf0 	bl	80004d8 <__aeabi_dmul>
 80088f8:	2702      	movs	r7, #2
 80088fa:	2300      	movs	r3, #0
 80088fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008900:	4e77      	ldr	r6, [pc, #476]	; (8008ae0 <_dtoa_r+0x5a8>)
 8008902:	1124      	asrs	r4, r4, #4
 8008904:	2c00      	cmp	r4, #0
 8008906:	f040 8084 	bne.w	8008a12 <_dtoa_r+0x4da>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1d2      	bne.n	80088b4 <_dtoa_r+0x37c>
 800890e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 808b 	beq.w	8008a2c <_dtoa_r+0x4f4>
 8008916:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800891a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800891e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008922:	2200      	movs	r2, #0
 8008924:	4b6f      	ldr	r3, [pc, #444]	; (8008ae4 <_dtoa_r+0x5ac>)
 8008926:	f7f8 f849 	bl	80009bc <__aeabi_dcmplt>
 800892a:	2800      	cmp	r0, #0
 800892c:	d07e      	beq.n	8008a2c <_dtoa_r+0x4f4>
 800892e:	9b02      	ldr	r3, [sp, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d07b      	beq.n	8008a2c <_dtoa_r+0x4f4>
 8008934:	f1bb 0f00 	cmp.w	fp, #0
 8008938:	dd38      	ble.n	80089ac <_dtoa_r+0x474>
 800893a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800893e:	2200      	movs	r2, #0
 8008940:	4b69      	ldr	r3, [pc, #420]	; (8008ae8 <_dtoa_r+0x5b0>)
 8008942:	f7f7 fdc9 	bl	80004d8 <__aeabi_dmul>
 8008946:	465c      	mov	r4, fp
 8008948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800894c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008950:	3701      	adds	r7, #1
 8008952:	4638      	mov	r0, r7
 8008954:	f7f7 fd56 	bl	8000404 <__aeabi_i2d>
 8008958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800895c:	f7f7 fdbc 	bl	80004d8 <__aeabi_dmul>
 8008960:	2200      	movs	r2, #0
 8008962:	4b62      	ldr	r3, [pc, #392]	; (8008aec <_dtoa_r+0x5b4>)
 8008964:	f7f7 fc02 	bl	800016c <__adddf3>
 8008968:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800896c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008970:	9611      	str	r6, [sp, #68]	; 0x44
 8008972:	2c00      	cmp	r4, #0
 8008974:	d15d      	bne.n	8008a32 <_dtoa_r+0x4fa>
 8008976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800897a:	2200      	movs	r2, #0
 800897c:	4b5c      	ldr	r3, [pc, #368]	; (8008af0 <_dtoa_r+0x5b8>)
 800897e:	f7f7 fbf3 	bl	8000168 <__aeabi_dsub>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800898a:	4633      	mov	r3, r6
 800898c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800898e:	f7f8 f833 	bl	80009f8 <__aeabi_dcmpgt>
 8008992:	2800      	cmp	r0, #0
 8008994:	f040 829e 	bne.w	8008ed4 <_dtoa_r+0x99c>
 8008998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800899c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800899e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80089a2:	f7f8 f80b 	bl	80009bc <__aeabi_dcmplt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f040 8292 	bne.w	8008ed0 <_dtoa_r+0x998>
 80089ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80089b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f2c0 8153 	blt.w	8008c62 <_dtoa_r+0x72a>
 80089bc:	f1b9 0f0e 	cmp.w	r9, #14
 80089c0:	f300 814f 	bgt.w	8008c62 <_dtoa_r+0x72a>
 80089c4:	4b45      	ldr	r3, [pc, #276]	; (8008adc <_dtoa_r+0x5a4>)
 80089c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80089ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80089d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f280 80db 	bge.w	8008b90 <_dtoa_r+0x658>
 80089da:	9b02      	ldr	r3, [sp, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f300 80d7 	bgt.w	8008b90 <_dtoa_r+0x658>
 80089e2:	f040 8274 	bne.w	8008ece <_dtoa_r+0x996>
 80089e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ea:	2200      	movs	r2, #0
 80089ec:	4b40      	ldr	r3, [pc, #256]	; (8008af0 <_dtoa_r+0x5b8>)
 80089ee:	f7f7 fd73 	bl	80004d8 <__aeabi_dmul>
 80089f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f6:	f7f7 fff5 	bl	80009e4 <__aeabi_dcmpge>
 80089fa:	9c02      	ldr	r4, [sp, #8]
 80089fc:	4626      	mov	r6, r4
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f040 824a 	bne.w	8008e98 <_dtoa_r+0x960>
 8008a04:	2331      	movs	r3, #49	; 0x31
 8008a06:	9f08      	ldr	r7, [sp, #32]
 8008a08:	f109 0901 	add.w	r9, r9, #1
 8008a0c:	f807 3b01 	strb.w	r3, [r7], #1
 8008a10:	e246      	b.n	8008ea0 <_dtoa_r+0x968>
 8008a12:	07e2      	lsls	r2, r4, #31
 8008a14:	d505      	bpl.n	8008a22 <_dtoa_r+0x4ea>
 8008a16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a1a:	f7f7 fd5d 	bl	80004d8 <__aeabi_dmul>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	3701      	adds	r7, #1
 8008a22:	1064      	asrs	r4, r4, #1
 8008a24:	3608      	adds	r6, #8
 8008a26:	e76d      	b.n	8008904 <_dtoa_r+0x3cc>
 8008a28:	2702      	movs	r7, #2
 8008a2a:	e770      	b.n	800890e <_dtoa_r+0x3d6>
 8008a2c:	46c8      	mov	r8, r9
 8008a2e:	9c02      	ldr	r4, [sp, #8]
 8008a30:	e78f      	b.n	8008952 <_dtoa_r+0x41a>
 8008a32:	9908      	ldr	r1, [sp, #32]
 8008a34:	4b29      	ldr	r3, [pc, #164]	; (8008adc <_dtoa_r+0x5a4>)
 8008a36:	4421      	add	r1, r4
 8008a38:	9112      	str	r1, [sp, #72]	; 0x48
 8008a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a40:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008a44:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d055      	beq.n	8008af8 <_dtoa_r+0x5c0>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	4929      	ldr	r1, [pc, #164]	; (8008af4 <_dtoa_r+0x5bc>)
 8008a50:	f7f7 fe6c 	bl	800072c <__aeabi_ddiv>
 8008a54:	463b      	mov	r3, r7
 8008a56:	4632      	mov	r2, r6
 8008a58:	f7f7 fb86 	bl	8000168 <__aeabi_dsub>
 8008a5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a60:	9f08      	ldr	r7, [sp, #32]
 8008a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a66:	f7f7 ffe7 	bl	8000a38 <__aeabi_d2iz>
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	f7f7 fcca 	bl	8000404 <__aeabi_i2d>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a78:	f7f7 fb76 	bl	8000168 <__aeabi_dsub>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	3430      	adds	r4, #48	; 0x30
 8008a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a8a:	f807 4b01 	strb.w	r4, [r7], #1
 8008a8e:	f7f7 ff95 	bl	80009bc <__aeabi_dcmplt>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d174      	bne.n	8008b80 <_dtoa_r+0x648>
 8008a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	4911      	ldr	r1, [pc, #68]	; (8008ae4 <_dtoa_r+0x5ac>)
 8008a9e:	f7f7 fb63 	bl	8000168 <__aeabi_dsub>
 8008aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008aa6:	f7f7 ff89 	bl	80009bc <__aeabi_dcmplt>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	f040 80b6 	bne.w	8008c1c <_dtoa_r+0x6e4>
 8008ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ab2:	429f      	cmp	r7, r3
 8008ab4:	f43f af7a 	beq.w	80089ac <_dtoa_r+0x474>
 8008ab8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008abc:	2200      	movs	r2, #0
 8008abe:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <_dtoa_r+0x5b0>)
 8008ac0:	f7f7 fd0a 	bl	80004d8 <__aeabi_dmul>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ace:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <_dtoa_r+0x5b0>)
 8008ad0:	f7f7 fd02 	bl	80004d8 <__aeabi_dmul>
 8008ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad8:	e7c3      	b.n	8008a62 <_dtoa_r+0x52a>
 8008ada:	bf00      	nop
 8008adc:	0800ac88 	.word	0x0800ac88
 8008ae0:	0800ac60 	.word	0x0800ac60
 8008ae4:	3ff00000 	.word	0x3ff00000
 8008ae8:	40240000 	.word	0x40240000
 8008aec:	401c0000 	.word	0x401c0000
 8008af0:	40140000 	.word	0x40140000
 8008af4:	3fe00000 	.word	0x3fe00000
 8008af8:	4630      	mov	r0, r6
 8008afa:	4639      	mov	r1, r7
 8008afc:	f7f7 fcec 	bl	80004d8 <__aeabi_dmul>
 8008b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b06:	9c08      	ldr	r4, [sp, #32]
 8008b08:	9314      	str	r3, [sp, #80]	; 0x50
 8008b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b0e:	f7f7 ff93 	bl	8000a38 <__aeabi_d2iz>
 8008b12:	9015      	str	r0, [sp, #84]	; 0x54
 8008b14:	f7f7 fc76 	bl	8000404 <__aeabi_i2d>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b20:	f7f7 fb22 	bl	8000168 <__aeabi_dsub>
 8008b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b26:	4606      	mov	r6, r0
 8008b28:	3330      	adds	r3, #48	; 0x30
 8008b2a:	f804 3b01 	strb.w	r3, [r4], #1
 8008b2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b30:	460f      	mov	r7, r1
 8008b32:	429c      	cmp	r4, r3
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	d124      	bne.n	8008b84 <_dtoa_r+0x64c>
 8008b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b3e:	4bb3      	ldr	r3, [pc, #716]	; (8008e0c <_dtoa_r+0x8d4>)
 8008b40:	f7f7 fb14 	bl	800016c <__adddf3>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 ff54 	bl	80009f8 <__aeabi_dcmpgt>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d162      	bne.n	8008c1a <_dtoa_r+0x6e2>
 8008b54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b58:	2000      	movs	r0, #0
 8008b5a:	49ac      	ldr	r1, [pc, #688]	; (8008e0c <_dtoa_r+0x8d4>)
 8008b5c:	f7f7 fb04 	bl	8000168 <__aeabi_dsub>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4630      	mov	r0, r6
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f7 ff28 	bl	80009bc <__aeabi_dcmplt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f43f af1d 	beq.w	80089ac <_dtoa_r+0x474>
 8008b72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b74:	1e7b      	subs	r3, r7, #1
 8008b76:	9314      	str	r3, [sp, #80]	; 0x50
 8008b78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008b7c:	2b30      	cmp	r3, #48	; 0x30
 8008b7e:	d0f8      	beq.n	8008b72 <_dtoa_r+0x63a>
 8008b80:	46c1      	mov	r9, r8
 8008b82:	e03a      	b.n	8008bfa <_dtoa_r+0x6c2>
 8008b84:	4ba2      	ldr	r3, [pc, #648]	; (8008e10 <_dtoa_r+0x8d8>)
 8008b86:	f7f7 fca7 	bl	80004d8 <__aeabi_dmul>
 8008b8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b8e:	e7bc      	b.n	8008b0a <_dtoa_r+0x5d2>
 8008b90:	9f08      	ldr	r7, [sp, #32]
 8008b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b9a:	f7f7 fdc7 	bl	800072c <__aeabi_ddiv>
 8008b9e:	f7f7 ff4b 	bl	8000a38 <__aeabi_d2iz>
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	f7f7 fc2e 	bl	8000404 <__aeabi_i2d>
 8008ba8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bac:	f7f7 fc94 	bl	80004d8 <__aeabi_dmul>
 8008bb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bbc:	f7f7 fad4 	bl	8000168 <__aeabi_dsub>
 8008bc0:	f807 6b01 	strb.w	r6, [r7], #1
 8008bc4:	9e08      	ldr	r6, [sp, #32]
 8008bc6:	9b02      	ldr	r3, [sp, #8]
 8008bc8:	1bbe      	subs	r6, r7, r6
 8008bca:	42b3      	cmp	r3, r6
 8008bcc:	d13a      	bne.n	8008c44 <_dtoa_r+0x70c>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	f7f7 facb 	bl	800016c <__adddf3>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008be2:	f7f7 ff09 	bl	80009f8 <__aeabi_dcmpgt>
 8008be6:	bb58      	cbnz	r0, 8008c40 <_dtoa_r+0x708>
 8008be8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf0:	f7f7 feda 	bl	80009a8 <__aeabi_dcmpeq>
 8008bf4:	b108      	cbz	r0, 8008bfa <_dtoa_r+0x6c2>
 8008bf6:	07e1      	lsls	r1, r4, #31
 8008bf8:	d422      	bmi.n	8008c40 <_dtoa_r+0x708>
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	4651      	mov	r1, sl
 8008bfe:	f000 fae7 	bl	80091d0 <_Bfree>
 8008c02:	2300      	movs	r3, #0
 8008c04:	703b      	strb	r3, [r7, #0]
 8008c06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c08:	f109 0001 	add.w	r0, r9, #1
 8008c0c:	6018      	str	r0, [r3, #0]
 8008c0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f43f acdf 	beq.w	80085d4 <_dtoa_r+0x9c>
 8008c16:	601f      	str	r7, [r3, #0]
 8008c18:	e4dc      	b.n	80085d4 <_dtoa_r+0x9c>
 8008c1a:	4627      	mov	r7, r4
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	461f      	mov	r7, r3
 8008c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c24:	2a39      	cmp	r2, #57	; 0x39
 8008c26:	d107      	bne.n	8008c38 <_dtoa_r+0x700>
 8008c28:	9a08      	ldr	r2, [sp, #32]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d1f7      	bne.n	8008c1e <_dtoa_r+0x6e6>
 8008c2e:	2230      	movs	r2, #48	; 0x30
 8008c30:	9908      	ldr	r1, [sp, #32]
 8008c32:	f108 0801 	add.w	r8, r8, #1
 8008c36:	700a      	strb	r2, [r1, #0]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	3201      	adds	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e79f      	b.n	8008b80 <_dtoa_r+0x648>
 8008c40:	46c8      	mov	r8, r9
 8008c42:	e7eb      	b.n	8008c1c <_dtoa_r+0x6e4>
 8008c44:	2200      	movs	r2, #0
 8008c46:	4b72      	ldr	r3, [pc, #456]	; (8008e10 <_dtoa_r+0x8d8>)
 8008c48:	f7f7 fc46 	bl	80004d8 <__aeabi_dmul>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c54:	2200      	movs	r2, #0
 8008c56:	2300      	movs	r3, #0
 8008c58:	f7f7 fea6 	bl	80009a8 <__aeabi_dcmpeq>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d098      	beq.n	8008b92 <_dtoa_r+0x65a>
 8008c60:	e7cb      	b.n	8008bfa <_dtoa_r+0x6c2>
 8008c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c64:	2a00      	cmp	r2, #0
 8008c66:	f000 80cd 	beq.w	8008e04 <_dtoa_r+0x8cc>
 8008c6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c6c:	2a01      	cmp	r2, #1
 8008c6e:	f300 80af 	bgt.w	8008dd0 <_dtoa_r+0x898>
 8008c72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	f000 80a7 	beq.w	8008dc8 <_dtoa_r+0x890>
 8008c7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c80:	9f06      	ldr	r7, [sp, #24]
 8008c82:	9a06      	ldr	r2, [sp, #24]
 8008c84:	2101      	movs	r1, #1
 8008c86:	441a      	add	r2, r3
 8008c88:	9206      	str	r2, [sp, #24]
 8008c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	441a      	add	r2, r3
 8008c90:	9209      	str	r2, [sp, #36]	; 0x24
 8008c92:	f000 fb57 	bl	8009344 <__i2b>
 8008c96:	4606      	mov	r6, r0
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	dd0c      	ble.n	8008cb6 <_dtoa_r+0x77e>
 8008c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd09      	ble.n	8008cb6 <_dtoa_r+0x77e>
 8008ca2:	42bb      	cmp	r3, r7
 8008ca4:	bfa8      	it	ge
 8008ca6:	463b      	movge	r3, r7
 8008ca8:	9a06      	ldr	r2, [sp, #24]
 8008caa:	1aff      	subs	r7, r7, r3
 8008cac:	1ad2      	subs	r2, r2, r3
 8008cae:	9206      	str	r2, [sp, #24]
 8008cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb8:	b1f3      	cbz	r3, 8008cf8 <_dtoa_r+0x7c0>
 8008cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 80a9 	beq.w	8008e14 <_dtoa_r+0x8dc>
 8008cc2:	2c00      	cmp	r4, #0
 8008cc4:	dd10      	ble.n	8008ce8 <_dtoa_r+0x7b0>
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 fbf4 	bl	80094b8 <__pow5mult>
 8008cd0:	4652      	mov	r2, sl
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 fb4a 	bl	8009370 <__multiply>
 8008cdc:	4680      	mov	r8, r0
 8008cde:	4651      	mov	r1, sl
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 fa75 	bl	80091d0 <_Bfree>
 8008ce6:	46c2      	mov	sl, r8
 8008ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cea:	1b1a      	subs	r2, r3, r4
 8008cec:	d004      	beq.n	8008cf8 <_dtoa_r+0x7c0>
 8008cee:	4651      	mov	r1, sl
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f000 fbe1 	bl	80094b8 <__pow5mult>
 8008cf6:	4682      	mov	sl, r0
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f000 fb22 	bl	8009344 <__i2b>
 8008d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d02:	4604      	mov	r4, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f340 8087 	ble.w	8008e18 <_dtoa_r+0x8e0>
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 fbd2 	bl	80094b8 <__pow5mult>
 8008d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d16:	4604      	mov	r4, r0
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	f340 8080 	ble.w	8008e1e <_dtoa_r+0x8e6>
 8008d1e:	f04f 0800 	mov.w	r8, #0
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d28:	6918      	ldr	r0, [r3, #16]
 8008d2a:	f000 fabd 	bl	80092a8 <__hi0bits>
 8008d2e:	f1c0 0020 	rsb	r0, r0, #32
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	4418      	add	r0, r3
 8008d36:	f010 001f 	ands.w	r0, r0, #31
 8008d3a:	f000 8092 	beq.w	8008e62 <_dtoa_r+0x92a>
 8008d3e:	f1c0 0320 	rsb	r3, r0, #32
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	f340 808a 	ble.w	8008e5c <_dtoa_r+0x924>
 8008d48:	f1c0 001c 	rsb	r0, r0, #28
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	4407      	add	r7, r0
 8008d50:	4403      	add	r3, r0
 8008d52:	9306      	str	r3, [sp, #24]
 8008d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d56:	4403      	add	r3, r0
 8008d58:	9309      	str	r3, [sp, #36]	; 0x24
 8008d5a:	9b06      	ldr	r3, [sp, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd05      	ble.n	8008d6c <_dtoa_r+0x834>
 8008d60:	4651      	mov	r1, sl
 8008d62:	461a      	mov	r2, r3
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 fc01 	bl	800956c <__lshift>
 8008d6a:	4682      	mov	sl, r0
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dd05      	ble.n	8008d7e <_dtoa_r+0x846>
 8008d72:	4621      	mov	r1, r4
 8008d74:	461a      	mov	r2, r3
 8008d76:	4628      	mov	r0, r5
 8008d78:	f000 fbf8 	bl	800956c <__lshift>
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d070      	beq.n	8008e66 <_dtoa_r+0x92e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4650      	mov	r0, sl
 8008d88:	f000 fc5c 	bl	8009644 <__mcmp>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	da6a      	bge.n	8008e66 <_dtoa_r+0x92e>
 8008d90:	2300      	movs	r3, #0
 8008d92:	4651      	mov	r1, sl
 8008d94:	220a      	movs	r2, #10
 8008d96:	4628      	mov	r0, r5
 8008d98:	f000 fa3c 	bl	8009214 <__multadd>
 8008d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d9e:	4682      	mov	sl, r0
 8008da0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8193 	beq.w	80090d0 <_dtoa_r+0xb98>
 8008daa:	4631      	mov	r1, r6
 8008dac:	2300      	movs	r3, #0
 8008dae:	220a      	movs	r2, #10
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 fa2f 	bl	8009214 <__multadd>
 8008db6:	f1bb 0f00 	cmp.w	fp, #0
 8008dba:	4606      	mov	r6, r0
 8008dbc:	f300 8093 	bgt.w	8008ee6 <_dtoa_r+0x9ae>
 8008dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	dc57      	bgt.n	8008e76 <_dtoa_r+0x93e>
 8008dc6:	e08e      	b.n	8008ee6 <_dtoa_r+0x9ae>
 8008dc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008dca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dce:	e756      	b.n	8008c7e <_dtoa_r+0x746>
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	1e5c      	subs	r4, r3, #1
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	bfb7      	itett	lt
 8008dda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ddc:	1b1c      	subge	r4, r3, r4
 8008dde:	1ae2      	sublt	r2, r4, r3
 8008de0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008de2:	bfbe      	ittt	lt
 8008de4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008de6:	189b      	addlt	r3, r3, r2
 8008de8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	bfb8      	it	lt
 8008dee:	2400      	movlt	r4, #0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bfbb      	ittet	lt
 8008df4:	9b06      	ldrlt	r3, [sp, #24]
 8008df6:	9a02      	ldrlt	r2, [sp, #8]
 8008df8:	9f06      	ldrge	r7, [sp, #24]
 8008dfa:	1a9f      	sublt	r7, r3, r2
 8008dfc:	bfac      	ite	ge
 8008dfe:	9b02      	ldrge	r3, [sp, #8]
 8008e00:	2300      	movlt	r3, #0
 8008e02:	e73e      	b.n	8008c82 <_dtoa_r+0x74a>
 8008e04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e06:	9f06      	ldr	r7, [sp, #24]
 8008e08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008e0a:	e745      	b.n	8008c98 <_dtoa_r+0x760>
 8008e0c:	3fe00000 	.word	0x3fe00000
 8008e10:	40240000 	.word	0x40240000
 8008e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e16:	e76a      	b.n	8008cee <_dtoa_r+0x7b6>
 8008e18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	dc19      	bgt.n	8008e52 <_dtoa_r+0x91a>
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	b9bb      	cbnz	r3, 8008e52 <_dtoa_r+0x91a>
 8008e22:	9b05      	ldr	r3, [sp, #20]
 8008e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e28:	b99b      	cbnz	r3, 8008e52 <_dtoa_r+0x91a>
 8008e2a:	9b05      	ldr	r3, [sp, #20]
 8008e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e30:	0d1b      	lsrs	r3, r3, #20
 8008e32:	051b      	lsls	r3, r3, #20
 8008e34:	b183      	cbz	r3, 8008e58 <_dtoa_r+0x920>
 8008e36:	f04f 0801 	mov.w	r8, #1
 8008e3a:	9b06      	ldr	r3, [sp, #24]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	9306      	str	r3, [sp, #24]
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	3301      	adds	r3, #1
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f47f af6a 	bne.w	8008d22 <_dtoa_r+0x7ea>
 8008e4e:	2001      	movs	r0, #1
 8008e50:	e76f      	b.n	8008d32 <_dtoa_r+0x7fa>
 8008e52:	f04f 0800 	mov.w	r8, #0
 8008e56:	e7f6      	b.n	8008e46 <_dtoa_r+0x90e>
 8008e58:	4698      	mov	r8, r3
 8008e5a:	e7f4      	b.n	8008e46 <_dtoa_r+0x90e>
 8008e5c:	f43f af7d 	beq.w	8008d5a <_dtoa_r+0x822>
 8008e60:	4618      	mov	r0, r3
 8008e62:	301c      	adds	r0, #28
 8008e64:	e772      	b.n	8008d4c <_dtoa_r+0x814>
 8008e66:	9b02      	ldr	r3, [sp, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc36      	bgt.n	8008eda <_dtoa_r+0x9a2>
 8008e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dd33      	ble.n	8008eda <_dtoa_r+0x9a2>
 8008e72:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008e76:	f1bb 0f00 	cmp.w	fp, #0
 8008e7a:	d10d      	bne.n	8008e98 <_dtoa_r+0x960>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	465b      	mov	r3, fp
 8008e80:	2205      	movs	r2, #5
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f9c6 	bl	8009214 <__multadd>
 8008e88:	4601      	mov	r1, r0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4650      	mov	r0, sl
 8008e8e:	f000 fbd9 	bl	8009644 <__mcmp>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f73f adb6 	bgt.w	8008a04 <_dtoa_r+0x4cc>
 8008e98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e9a:	9f08      	ldr	r7, [sp, #32]
 8008e9c:	ea6f 0903 	mvn.w	r9, r3
 8008ea0:	f04f 0800 	mov.w	r8, #0
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f992 	bl	80091d0 <_Bfree>
 8008eac:	2e00      	cmp	r6, #0
 8008eae:	f43f aea4 	beq.w	8008bfa <_dtoa_r+0x6c2>
 8008eb2:	f1b8 0f00 	cmp.w	r8, #0
 8008eb6:	d005      	beq.n	8008ec4 <_dtoa_r+0x98c>
 8008eb8:	45b0      	cmp	r8, r6
 8008eba:	d003      	beq.n	8008ec4 <_dtoa_r+0x98c>
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f986 	bl	80091d0 <_Bfree>
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 f982 	bl	80091d0 <_Bfree>
 8008ecc:	e695      	b.n	8008bfa <_dtoa_r+0x6c2>
 8008ece:	2400      	movs	r4, #0
 8008ed0:	4626      	mov	r6, r4
 8008ed2:	e7e1      	b.n	8008e98 <_dtoa_r+0x960>
 8008ed4:	46c1      	mov	r9, r8
 8008ed6:	4626      	mov	r6, r4
 8008ed8:	e594      	b.n	8008a04 <_dtoa_r+0x4cc>
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 80fc 	beq.w	80090de <_dtoa_r+0xba6>
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	dd05      	ble.n	8008ef6 <_dtoa_r+0x9be>
 8008eea:	4631      	mov	r1, r6
 8008eec:	463a      	mov	r2, r7
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 fb3c 	bl	800956c <__lshift>
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	f1b8 0f00 	cmp.w	r8, #0
 8008efa:	d05c      	beq.n	8008fb6 <_dtoa_r+0xa7e>
 8008efc:	4628      	mov	r0, r5
 8008efe:	6871      	ldr	r1, [r6, #4]
 8008f00:	f000 f926 	bl	8009150 <_Balloc>
 8008f04:	4607      	mov	r7, r0
 8008f06:	b928      	cbnz	r0, 8008f14 <_dtoa_r+0x9dc>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f0e:	4b7e      	ldr	r3, [pc, #504]	; (8009108 <_dtoa_r+0xbd0>)
 8008f10:	f7ff bb26 	b.w	8008560 <_dtoa_r+0x28>
 8008f14:	6932      	ldr	r2, [r6, #16]
 8008f16:	f106 010c 	add.w	r1, r6, #12
 8008f1a:	3202      	adds	r2, #2
 8008f1c:	0092      	lsls	r2, r2, #2
 8008f1e:	300c      	adds	r0, #12
 8008f20:	f7fe fd2e 	bl	8007980 <memcpy>
 8008f24:	2201      	movs	r2, #1
 8008f26:	4639      	mov	r1, r7
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f000 fb1f 	bl	800956c <__lshift>
 8008f2e:	46b0      	mov	r8, r6
 8008f30:	4606      	mov	r6, r0
 8008f32:	9b08      	ldr	r3, [sp, #32]
 8008f34:	3301      	adds	r3, #1
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	9b08      	ldr	r3, [sp, #32]
 8008f3a:	445b      	add	r3, fp
 8008f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	9309      	str	r3, [sp, #36]	; 0x24
 8008f46:	9b02      	ldr	r3, [sp, #8]
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008f50:	f7ff fa62 	bl	8008418 <quorem>
 8008f54:	4603      	mov	r3, r0
 8008f56:	4641      	mov	r1, r8
 8008f58:	3330      	adds	r3, #48	; 0x30
 8008f5a:	9004      	str	r0, [sp, #16]
 8008f5c:	4650      	mov	r0, sl
 8008f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f60:	f000 fb70 	bl	8009644 <__mcmp>
 8008f64:	4632      	mov	r2, r6
 8008f66:	9006      	str	r0, [sp, #24]
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 fb86 	bl	800967c <__mdiff>
 8008f70:	68c2      	ldr	r2, [r0, #12]
 8008f72:	4607      	mov	r7, r0
 8008f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f76:	bb02      	cbnz	r2, 8008fba <_dtoa_r+0xa82>
 8008f78:	4601      	mov	r1, r0
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	f000 fb62 	bl	8009644 <__mcmp>
 8008f80:	4602      	mov	r2, r0
 8008f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f84:	4639      	mov	r1, r7
 8008f86:	4628      	mov	r0, r5
 8008f88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008f8c:	f000 f920 	bl	80091d0 <_Bfree>
 8008f90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f94:	9f02      	ldr	r7, [sp, #8]
 8008f96:	ea43 0102 	orr.w	r1, r3, r2
 8008f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa0:	d10d      	bne.n	8008fbe <_dtoa_r+0xa86>
 8008fa2:	2b39      	cmp	r3, #57	; 0x39
 8008fa4:	d027      	beq.n	8008ff6 <_dtoa_r+0xabe>
 8008fa6:	9a06      	ldr	r2, [sp, #24]
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	dd01      	ble.n	8008fb0 <_dtoa_r+0xa78>
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	3331      	adds	r3, #49	; 0x31
 8008fb0:	f88b 3000 	strb.w	r3, [fp]
 8008fb4:	e776      	b.n	8008ea4 <_dtoa_r+0x96c>
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	e7b9      	b.n	8008f2e <_dtoa_r+0x9f6>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	e7e2      	b.n	8008f84 <_dtoa_r+0xa4c>
 8008fbe:	9906      	ldr	r1, [sp, #24]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	db04      	blt.n	8008fce <_dtoa_r+0xa96>
 8008fc4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008fc6:	4301      	orrs	r1, r0
 8008fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fca:	4301      	orrs	r1, r0
 8008fcc:	d120      	bne.n	8009010 <_dtoa_r+0xad8>
 8008fce:	2a00      	cmp	r2, #0
 8008fd0:	ddee      	ble.n	8008fb0 <_dtoa_r+0xa78>
 8008fd2:	4651      	mov	r1, sl
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	9302      	str	r3, [sp, #8]
 8008fda:	f000 fac7 	bl	800956c <__lshift>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	f000 fb2f 	bl	8009644 <__mcmp>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	dc02      	bgt.n	8008ff2 <_dtoa_r+0xaba>
 8008fec:	d1e0      	bne.n	8008fb0 <_dtoa_r+0xa78>
 8008fee:	07da      	lsls	r2, r3, #31
 8008ff0:	d5de      	bpl.n	8008fb0 <_dtoa_r+0xa78>
 8008ff2:	2b39      	cmp	r3, #57	; 0x39
 8008ff4:	d1da      	bne.n	8008fac <_dtoa_r+0xa74>
 8008ff6:	2339      	movs	r3, #57	; 0x39
 8008ff8:	f88b 3000 	strb.w	r3, [fp]
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	461f      	mov	r7, r3
 8009000:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009004:	3b01      	subs	r3, #1
 8009006:	2a39      	cmp	r2, #57	; 0x39
 8009008:	d050      	beq.n	80090ac <_dtoa_r+0xb74>
 800900a:	3201      	adds	r2, #1
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	e749      	b.n	8008ea4 <_dtoa_r+0x96c>
 8009010:	2a00      	cmp	r2, #0
 8009012:	dd03      	ble.n	800901c <_dtoa_r+0xae4>
 8009014:	2b39      	cmp	r3, #57	; 0x39
 8009016:	d0ee      	beq.n	8008ff6 <_dtoa_r+0xabe>
 8009018:	3301      	adds	r3, #1
 800901a:	e7c9      	b.n	8008fb0 <_dtoa_r+0xa78>
 800901c:	9a02      	ldr	r2, [sp, #8]
 800901e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009020:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009024:	428a      	cmp	r2, r1
 8009026:	d02a      	beq.n	800907e <_dtoa_r+0xb46>
 8009028:	4651      	mov	r1, sl
 800902a:	2300      	movs	r3, #0
 800902c:	220a      	movs	r2, #10
 800902e:	4628      	mov	r0, r5
 8009030:	f000 f8f0 	bl	8009214 <__multadd>
 8009034:	45b0      	cmp	r8, r6
 8009036:	4682      	mov	sl, r0
 8009038:	f04f 0300 	mov.w	r3, #0
 800903c:	f04f 020a 	mov.w	r2, #10
 8009040:	4641      	mov	r1, r8
 8009042:	4628      	mov	r0, r5
 8009044:	d107      	bne.n	8009056 <_dtoa_r+0xb1e>
 8009046:	f000 f8e5 	bl	8009214 <__multadd>
 800904a:	4680      	mov	r8, r0
 800904c:	4606      	mov	r6, r0
 800904e:	9b02      	ldr	r3, [sp, #8]
 8009050:	3301      	adds	r3, #1
 8009052:	9302      	str	r3, [sp, #8]
 8009054:	e777      	b.n	8008f46 <_dtoa_r+0xa0e>
 8009056:	f000 f8dd 	bl	8009214 <__multadd>
 800905a:	4631      	mov	r1, r6
 800905c:	4680      	mov	r8, r0
 800905e:	2300      	movs	r3, #0
 8009060:	220a      	movs	r2, #10
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f8d6 	bl	8009214 <__multadd>
 8009068:	4606      	mov	r6, r0
 800906a:	e7f0      	b.n	800904e <_dtoa_r+0xb16>
 800906c:	f1bb 0f00 	cmp.w	fp, #0
 8009070:	bfcc      	ite	gt
 8009072:	465f      	movgt	r7, fp
 8009074:	2701      	movle	r7, #1
 8009076:	f04f 0800 	mov.w	r8, #0
 800907a:	9a08      	ldr	r2, [sp, #32]
 800907c:	4417      	add	r7, r2
 800907e:	4651      	mov	r1, sl
 8009080:	2201      	movs	r2, #1
 8009082:	4628      	mov	r0, r5
 8009084:	9302      	str	r3, [sp, #8]
 8009086:	f000 fa71 	bl	800956c <__lshift>
 800908a:	4621      	mov	r1, r4
 800908c:	4682      	mov	sl, r0
 800908e:	f000 fad9 	bl	8009644 <__mcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	dcb2      	bgt.n	8008ffc <_dtoa_r+0xac4>
 8009096:	d102      	bne.n	800909e <_dtoa_r+0xb66>
 8009098:	9b02      	ldr	r3, [sp, #8]
 800909a:	07db      	lsls	r3, r3, #31
 800909c:	d4ae      	bmi.n	8008ffc <_dtoa_r+0xac4>
 800909e:	463b      	mov	r3, r7
 80090a0:	461f      	mov	r7, r3
 80090a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090a6:	2a30      	cmp	r2, #48	; 0x30
 80090a8:	d0fa      	beq.n	80090a0 <_dtoa_r+0xb68>
 80090aa:	e6fb      	b.n	8008ea4 <_dtoa_r+0x96c>
 80090ac:	9a08      	ldr	r2, [sp, #32]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d1a5      	bne.n	8008ffe <_dtoa_r+0xac6>
 80090b2:	2331      	movs	r3, #49	; 0x31
 80090b4:	f109 0901 	add.w	r9, r9, #1
 80090b8:	7013      	strb	r3, [r2, #0]
 80090ba:	e6f3      	b.n	8008ea4 <_dtoa_r+0x96c>
 80090bc:	4b13      	ldr	r3, [pc, #76]	; (800910c <_dtoa_r+0xbd4>)
 80090be:	f7ff baa7 	b.w	8008610 <_dtoa_r+0xd8>
 80090c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f47f aa80 	bne.w	80085ca <_dtoa_r+0x92>
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <_dtoa_r+0xbd8>)
 80090cc:	f7ff baa0 	b.w	8008610 <_dtoa_r+0xd8>
 80090d0:	f1bb 0f00 	cmp.w	fp, #0
 80090d4:	dc03      	bgt.n	80090de <_dtoa_r+0xba6>
 80090d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090d8:	2b02      	cmp	r3, #2
 80090da:	f73f aecc 	bgt.w	8008e76 <_dtoa_r+0x93e>
 80090de:	9f08      	ldr	r7, [sp, #32]
 80090e0:	4621      	mov	r1, r4
 80090e2:	4650      	mov	r0, sl
 80090e4:	f7ff f998 	bl	8008418 <quorem>
 80090e8:	9a08      	ldr	r2, [sp, #32]
 80090ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80090ee:	f807 3b01 	strb.w	r3, [r7], #1
 80090f2:	1aba      	subs	r2, r7, r2
 80090f4:	4593      	cmp	fp, r2
 80090f6:	ddb9      	ble.n	800906c <_dtoa_r+0xb34>
 80090f8:	4651      	mov	r1, sl
 80090fa:	2300      	movs	r3, #0
 80090fc:	220a      	movs	r2, #10
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 f888 	bl	8009214 <__multadd>
 8009104:	4682      	mov	sl, r0
 8009106:	e7eb      	b.n	80090e0 <_dtoa_r+0xba8>
 8009108:	0800abec 	.word	0x0800abec
 800910c:	0800aa44 	.word	0x0800aa44
 8009110:	0800ab69 	.word	0x0800ab69

08009114 <_localeconv_r>:
 8009114:	4800      	ldr	r0, [pc, #0]	; (8009118 <_localeconv_r+0x4>)
 8009116:	4770      	bx	lr
 8009118:	20000164 	.word	0x20000164

0800911c <memchr>:
 800911c:	4603      	mov	r3, r0
 800911e:	b510      	push	{r4, lr}
 8009120:	b2c9      	uxtb	r1, r1
 8009122:	4402      	add	r2, r0
 8009124:	4293      	cmp	r3, r2
 8009126:	4618      	mov	r0, r3
 8009128:	d101      	bne.n	800912e <memchr+0x12>
 800912a:	2000      	movs	r0, #0
 800912c:	e003      	b.n	8009136 <memchr+0x1a>
 800912e:	7804      	ldrb	r4, [r0, #0]
 8009130:	3301      	adds	r3, #1
 8009132:	428c      	cmp	r4, r1
 8009134:	d1f6      	bne.n	8009124 <memchr+0x8>
 8009136:	bd10      	pop	{r4, pc}

08009138 <__malloc_lock>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__malloc_lock+0x8>)
 800913a:	f000 bd26 	b.w	8009b8a <__retarget_lock_acquire_recursive>
 800913e:	bf00      	nop
 8009140:	20001d20 	.word	0x20001d20

08009144 <__malloc_unlock>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__malloc_unlock+0x8>)
 8009146:	f000 bd21 	b.w	8009b8c <__retarget_lock_release_recursive>
 800914a:	bf00      	nop
 800914c:	20001d20 	.word	0x20001d20

08009150 <_Balloc>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009154:	4604      	mov	r4, r0
 8009156:	460d      	mov	r5, r1
 8009158:	b976      	cbnz	r6, 8009178 <_Balloc+0x28>
 800915a:	2010      	movs	r0, #16
 800915c:	f7fe fc08 	bl	8007970 <malloc>
 8009160:	4602      	mov	r2, r0
 8009162:	6260      	str	r0, [r4, #36]	; 0x24
 8009164:	b920      	cbnz	r0, 8009170 <_Balloc+0x20>
 8009166:	2166      	movs	r1, #102	; 0x66
 8009168:	4b17      	ldr	r3, [pc, #92]	; (80091c8 <_Balloc+0x78>)
 800916a:	4818      	ldr	r0, [pc, #96]	; (80091cc <_Balloc+0x7c>)
 800916c:	f000 fcdc 	bl	8009b28 <__assert_func>
 8009170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009174:	6006      	str	r6, [r0, #0]
 8009176:	60c6      	str	r6, [r0, #12]
 8009178:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800917a:	68f3      	ldr	r3, [r6, #12]
 800917c:	b183      	cbz	r3, 80091a0 <_Balloc+0x50>
 800917e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009186:	b9b8      	cbnz	r0, 80091b8 <_Balloc+0x68>
 8009188:	2101      	movs	r1, #1
 800918a:	fa01 f605 	lsl.w	r6, r1, r5
 800918e:	1d72      	adds	r2, r6, #5
 8009190:	4620      	mov	r0, r4
 8009192:	0092      	lsls	r2, r2, #2
 8009194:	f000 fb5e 	bl	8009854 <_calloc_r>
 8009198:	b160      	cbz	r0, 80091b4 <_Balloc+0x64>
 800919a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800919e:	e00e      	b.n	80091be <_Balloc+0x6e>
 80091a0:	2221      	movs	r2, #33	; 0x21
 80091a2:	2104      	movs	r1, #4
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fb55 	bl	8009854 <_calloc_r>
 80091aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ac:	60f0      	str	r0, [r6, #12]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e4      	bne.n	800917e <_Balloc+0x2e>
 80091b4:	2000      	movs	r0, #0
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	6802      	ldr	r2, [r0, #0]
 80091ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091be:	2300      	movs	r3, #0
 80091c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091c4:	e7f7      	b.n	80091b6 <_Balloc+0x66>
 80091c6:	bf00      	nop
 80091c8:	0800ab76 	.word	0x0800ab76
 80091cc:	0800abfd 	.word	0x0800abfd

080091d0 <_Bfree>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091d4:	4605      	mov	r5, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	b976      	cbnz	r6, 80091f8 <_Bfree+0x28>
 80091da:	2010      	movs	r0, #16
 80091dc:	f7fe fbc8 	bl	8007970 <malloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6268      	str	r0, [r5, #36]	; 0x24
 80091e4:	b920      	cbnz	r0, 80091f0 <_Bfree+0x20>
 80091e6:	218a      	movs	r1, #138	; 0x8a
 80091e8:	4b08      	ldr	r3, [pc, #32]	; (800920c <_Bfree+0x3c>)
 80091ea:	4809      	ldr	r0, [pc, #36]	; (8009210 <_Bfree+0x40>)
 80091ec:	f000 fc9c 	bl	8009b28 <__assert_func>
 80091f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091f4:	6006      	str	r6, [r0, #0]
 80091f6:	60c6      	str	r6, [r0, #12]
 80091f8:	b13c      	cbz	r4, 800920a <_Bfree+0x3a>
 80091fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091fc:	6862      	ldr	r2, [r4, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009204:	6021      	str	r1, [r4, #0]
 8009206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	0800ab76 	.word	0x0800ab76
 8009210:	0800abfd 	.word	0x0800abfd

08009214 <__multadd>:
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	4698      	mov	r8, r3
 800921a:	460c      	mov	r4, r1
 800921c:	2300      	movs	r3, #0
 800921e:	690e      	ldr	r6, [r1, #16]
 8009220:	4607      	mov	r7, r0
 8009222:	f101 0014 	add.w	r0, r1, #20
 8009226:	6805      	ldr	r5, [r0, #0]
 8009228:	3301      	adds	r3, #1
 800922a:	b2a9      	uxth	r1, r5
 800922c:	fb02 8101 	mla	r1, r2, r1, r8
 8009230:	0c2d      	lsrs	r5, r5, #16
 8009232:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009236:	fb02 c505 	mla	r5, r2, r5, ip
 800923a:	b289      	uxth	r1, r1
 800923c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009240:	429e      	cmp	r6, r3
 8009242:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009246:	f840 1b04 	str.w	r1, [r0], #4
 800924a:	dcec      	bgt.n	8009226 <__multadd+0x12>
 800924c:	f1b8 0f00 	cmp.w	r8, #0
 8009250:	d022      	beq.n	8009298 <__multadd+0x84>
 8009252:	68a3      	ldr	r3, [r4, #8]
 8009254:	42b3      	cmp	r3, r6
 8009256:	dc19      	bgt.n	800928c <__multadd+0x78>
 8009258:	6861      	ldr	r1, [r4, #4]
 800925a:	4638      	mov	r0, r7
 800925c:	3101      	adds	r1, #1
 800925e:	f7ff ff77 	bl	8009150 <_Balloc>
 8009262:	4605      	mov	r5, r0
 8009264:	b928      	cbnz	r0, 8009272 <__multadd+0x5e>
 8009266:	4602      	mov	r2, r0
 8009268:	21b5      	movs	r1, #181	; 0xb5
 800926a:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <__multadd+0x8c>)
 800926c:	480d      	ldr	r0, [pc, #52]	; (80092a4 <__multadd+0x90>)
 800926e:	f000 fc5b 	bl	8009b28 <__assert_func>
 8009272:	6922      	ldr	r2, [r4, #16]
 8009274:	f104 010c 	add.w	r1, r4, #12
 8009278:	3202      	adds	r2, #2
 800927a:	0092      	lsls	r2, r2, #2
 800927c:	300c      	adds	r0, #12
 800927e:	f7fe fb7f 	bl	8007980 <memcpy>
 8009282:	4621      	mov	r1, r4
 8009284:	4638      	mov	r0, r7
 8009286:	f7ff ffa3 	bl	80091d0 <_Bfree>
 800928a:	462c      	mov	r4, r5
 800928c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009290:	3601      	adds	r6, #1
 8009292:	f8c3 8014 	str.w	r8, [r3, #20]
 8009296:	6126      	str	r6, [r4, #16]
 8009298:	4620      	mov	r0, r4
 800929a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929e:	bf00      	nop
 80092a0:	0800abec 	.word	0x0800abec
 80092a4:	0800abfd 	.word	0x0800abfd

080092a8 <__hi0bits>:
 80092a8:	0c02      	lsrs	r2, r0, #16
 80092aa:	0412      	lsls	r2, r2, #16
 80092ac:	4603      	mov	r3, r0
 80092ae:	b9ca      	cbnz	r2, 80092e4 <__hi0bits+0x3c>
 80092b0:	0403      	lsls	r3, r0, #16
 80092b2:	2010      	movs	r0, #16
 80092b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80092b8:	bf04      	itt	eq
 80092ba:	021b      	lsleq	r3, r3, #8
 80092bc:	3008      	addeq	r0, #8
 80092be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80092c2:	bf04      	itt	eq
 80092c4:	011b      	lsleq	r3, r3, #4
 80092c6:	3004      	addeq	r0, #4
 80092c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80092cc:	bf04      	itt	eq
 80092ce:	009b      	lsleq	r3, r3, #2
 80092d0:	3002      	addeq	r0, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	db05      	blt.n	80092e2 <__hi0bits+0x3a>
 80092d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80092da:	f100 0001 	add.w	r0, r0, #1
 80092de:	bf08      	it	eq
 80092e0:	2020      	moveq	r0, #32
 80092e2:	4770      	bx	lr
 80092e4:	2000      	movs	r0, #0
 80092e6:	e7e5      	b.n	80092b4 <__hi0bits+0xc>

080092e8 <__lo0bits>:
 80092e8:	6803      	ldr	r3, [r0, #0]
 80092ea:	4602      	mov	r2, r0
 80092ec:	f013 0007 	ands.w	r0, r3, #7
 80092f0:	d00b      	beq.n	800930a <__lo0bits+0x22>
 80092f2:	07d9      	lsls	r1, r3, #31
 80092f4:	d422      	bmi.n	800933c <__lo0bits+0x54>
 80092f6:	0798      	lsls	r0, r3, #30
 80092f8:	bf49      	itett	mi
 80092fa:	085b      	lsrmi	r3, r3, #1
 80092fc:	089b      	lsrpl	r3, r3, #2
 80092fe:	2001      	movmi	r0, #1
 8009300:	6013      	strmi	r3, [r2, #0]
 8009302:	bf5c      	itt	pl
 8009304:	2002      	movpl	r0, #2
 8009306:	6013      	strpl	r3, [r2, #0]
 8009308:	4770      	bx	lr
 800930a:	b299      	uxth	r1, r3
 800930c:	b909      	cbnz	r1, 8009312 <__lo0bits+0x2a>
 800930e:	2010      	movs	r0, #16
 8009310:	0c1b      	lsrs	r3, r3, #16
 8009312:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009316:	bf04      	itt	eq
 8009318:	0a1b      	lsreq	r3, r3, #8
 800931a:	3008      	addeq	r0, #8
 800931c:	0719      	lsls	r1, r3, #28
 800931e:	bf04      	itt	eq
 8009320:	091b      	lsreq	r3, r3, #4
 8009322:	3004      	addeq	r0, #4
 8009324:	0799      	lsls	r1, r3, #30
 8009326:	bf04      	itt	eq
 8009328:	089b      	lsreq	r3, r3, #2
 800932a:	3002      	addeq	r0, #2
 800932c:	07d9      	lsls	r1, r3, #31
 800932e:	d403      	bmi.n	8009338 <__lo0bits+0x50>
 8009330:	085b      	lsrs	r3, r3, #1
 8009332:	f100 0001 	add.w	r0, r0, #1
 8009336:	d003      	beq.n	8009340 <__lo0bits+0x58>
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	4770      	bx	lr
 800933c:	2000      	movs	r0, #0
 800933e:	4770      	bx	lr
 8009340:	2020      	movs	r0, #32
 8009342:	4770      	bx	lr

08009344 <__i2b>:
 8009344:	b510      	push	{r4, lr}
 8009346:	460c      	mov	r4, r1
 8009348:	2101      	movs	r1, #1
 800934a:	f7ff ff01 	bl	8009150 <_Balloc>
 800934e:	4602      	mov	r2, r0
 8009350:	b928      	cbnz	r0, 800935e <__i2b+0x1a>
 8009352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009356:	4b04      	ldr	r3, [pc, #16]	; (8009368 <__i2b+0x24>)
 8009358:	4804      	ldr	r0, [pc, #16]	; (800936c <__i2b+0x28>)
 800935a:	f000 fbe5 	bl	8009b28 <__assert_func>
 800935e:	2301      	movs	r3, #1
 8009360:	6144      	str	r4, [r0, #20]
 8009362:	6103      	str	r3, [r0, #16]
 8009364:	bd10      	pop	{r4, pc}
 8009366:	bf00      	nop
 8009368:	0800abec 	.word	0x0800abec
 800936c:	0800abfd 	.word	0x0800abfd

08009370 <__multiply>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	4614      	mov	r4, r2
 8009376:	690a      	ldr	r2, [r1, #16]
 8009378:	6923      	ldr	r3, [r4, #16]
 800937a:	460d      	mov	r5, r1
 800937c:	429a      	cmp	r2, r3
 800937e:	bfbe      	ittt	lt
 8009380:	460b      	movlt	r3, r1
 8009382:	4625      	movlt	r5, r4
 8009384:	461c      	movlt	r4, r3
 8009386:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800938a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800938e:	68ab      	ldr	r3, [r5, #8]
 8009390:	6869      	ldr	r1, [r5, #4]
 8009392:	eb0a 0709 	add.w	r7, sl, r9
 8009396:	42bb      	cmp	r3, r7
 8009398:	b085      	sub	sp, #20
 800939a:	bfb8      	it	lt
 800939c:	3101      	addlt	r1, #1
 800939e:	f7ff fed7 	bl	8009150 <_Balloc>
 80093a2:	b930      	cbnz	r0, 80093b2 <__multiply+0x42>
 80093a4:	4602      	mov	r2, r0
 80093a6:	f240 115d 	movw	r1, #349	; 0x15d
 80093aa:	4b41      	ldr	r3, [pc, #260]	; (80094b0 <__multiply+0x140>)
 80093ac:	4841      	ldr	r0, [pc, #260]	; (80094b4 <__multiply+0x144>)
 80093ae:	f000 fbbb 	bl	8009b28 <__assert_func>
 80093b2:	f100 0614 	add.w	r6, r0, #20
 80093b6:	4633      	mov	r3, r6
 80093b8:	2200      	movs	r2, #0
 80093ba:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80093be:	4543      	cmp	r3, r8
 80093c0:	d31e      	bcc.n	8009400 <__multiply+0x90>
 80093c2:	f105 0c14 	add.w	ip, r5, #20
 80093c6:	f104 0314 	add.w	r3, r4, #20
 80093ca:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80093ce:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80093d2:	9202      	str	r2, [sp, #8]
 80093d4:	ebac 0205 	sub.w	r2, ip, r5
 80093d8:	3a15      	subs	r2, #21
 80093da:	f022 0203 	bic.w	r2, r2, #3
 80093de:	3204      	adds	r2, #4
 80093e0:	f105 0115 	add.w	r1, r5, #21
 80093e4:	458c      	cmp	ip, r1
 80093e6:	bf38      	it	cc
 80093e8:	2204      	movcc	r2, #4
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	9a02      	ldr	r2, [sp, #8]
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d808      	bhi.n	8009406 <__multiply+0x96>
 80093f4:	2f00      	cmp	r7, #0
 80093f6:	dc55      	bgt.n	80094a4 <__multiply+0x134>
 80093f8:	6107      	str	r7, [r0, #16]
 80093fa:	b005      	add	sp, #20
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	f843 2b04 	str.w	r2, [r3], #4
 8009404:	e7db      	b.n	80093be <__multiply+0x4e>
 8009406:	f8b3 a000 	ldrh.w	sl, [r3]
 800940a:	f1ba 0f00 	cmp.w	sl, #0
 800940e:	d020      	beq.n	8009452 <__multiply+0xe2>
 8009410:	46b1      	mov	r9, r6
 8009412:	2200      	movs	r2, #0
 8009414:	f105 0e14 	add.w	lr, r5, #20
 8009418:	f85e 4b04 	ldr.w	r4, [lr], #4
 800941c:	f8d9 b000 	ldr.w	fp, [r9]
 8009420:	b2a1      	uxth	r1, r4
 8009422:	fa1f fb8b 	uxth.w	fp, fp
 8009426:	fb0a b101 	mla	r1, sl, r1, fp
 800942a:	4411      	add	r1, r2
 800942c:	f8d9 2000 	ldr.w	r2, [r9]
 8009430:	0c24      	lsrs	r4, r4, #16
 8009432:	0c12      	lsrs	r2, r2, #16
 8009434:	fb0a 2404 	mla	r4, sl, r4, r2
 8009438:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800943c:	b289      	uxth	r1, r1
 800943e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009442:	45f4      	cmp	ip, lr
 8009444:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009448:	f849 1b04 	str.w	r1, [r9], #4
 800944c:	d8e4      	bhi.n	8009418 <__multiply+0xa8>
 800944e:	9901      	ldr	r1, [sp, #4]
 8009450:	5072      	str	r2, [r6, r1]
 8009452:	9a03      	ldr	r2, [sp, #12]
 8009454:	3304      	adds	r3, #4
 8009456:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800945a:	f1b9 0f00 	cmp.w	r9, #0
 800945e:	d01f      	beq.n	80094a0 <__multiply+0x130>
 8009460:	46b6      	mov	lr, r6
 8009462:	f04f 0a00 	mov.w	sl, #0
 8009466:	6834      	ldr	r4, [r6, #0]
 8009468:	f105 0114 	add.w	r1, r5, #20
 800946c:	880a      	ldrh	r2, [r1, #0]
 800946e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009472:	b2a4      	uxth	r4, r4
 8009474:	fb09 b202 	mla	r2, r9, r2, fp
 8009478:	4492      	add	sl, r2
 800947a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800947e:	f84e 4b04 	str.w	r4, [lr], #4
 8009482:	f851 4b04 	ldr.w	r4, [r1], #4
 8009486:	f8be 2000 	ldrh.w	r2, [lr]
 800948a:	0c24      	lsrs	r4, r4, #16
 800948c:	fb09 2404 	mla	r4, r9, r4, r2
 8009490:	458c      	cmp	ip, r1
 8009492:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009496:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800949a:	d8e7      	bhi.n	800946c <__multiply+0xfc>
 800949c:	9a01      	ldr	r2, [sp, #4]
 800949e:	50b4      	str	r4, [r6, r2]
 80094a0:	3604      	adds	r6, #4
 80094a2:	e7a3      	b.n	80093ec <__multiply+0x7c>
 80094a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1a5      	bne.n	80093f8 <__multiply+0x88>
 80094ac:	3f01      	subs	r7, #1
 80094ae:	e7a1      	b.n	80093f4 <__multiply+0x84>
 80094b0:	0800abec 	.word	0x0800abec
 80094b4:	0800abfd 	.word	0x0800abfd

080094b8 <__pow5mult>:
 80094b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094bc:	4615      	mov	r5, r2
 80094be:	f012 0203 	ands.w	r2, r2, #3
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	d007      	beq.n	80094d8 <__pow5mult+0x20>
 80094c8:	4c25      	ldr	r4, [pc, #148]	; (8009560 <__pow5mult+0xa8>)
 80094ca:	3a01      	subs	r2, #1
 80094cc:	2300      	movs	r3, #0
 80094ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094d2:	f7ff fe9f 	bl	8009214 <__multadd>
 80094d6:	4607      	mov	r7, r0
 80094d8:	10ad      	asrs	r5, r5, #2
 80094da:	d03d      	beq.n	8009558 <__pow5mult+0xa0>
 80094dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094de:	b97c      	cbnz	r4, 8009500 <__pow5mult+0x48>
 80094e0:	2010      	movs	r0, #16
 80094e2:	f7fe fa45 	bl	8007970 <malloc>
 80094e6:	4602      	mov	r2, r0
 80094e8:	6270      	str	r0, [r6, #36]	; 0x24
 80094ea:	b928      	cbnz	r0, 80094f8 <__pow5mult+0x40>
 80094ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094f0:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <__pow5mult+0xac>)
 80094f2:	481d      	ldr	r0, [pc, #116]	; (8009568 <__pow5mult+0xb0>)
 80094f4:	f000 fb18 	bl	8009b28 <__assert_func>
 80094f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094fc:	6004      	str	r4, [r0, #0]
 80094fe:	60c4      	str	r4, [r0, #12]
 8009500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009508:	b94c      	cbnz	r4, 800951e <__pow5mult+0x66>
 800950a:	f240 2171 	movw	r1, #625	; 0x271
 800950e:	4630      	mov	r0, r6
 8009510:	f7ff ff18 	bl	8009344 <__i2b>
 8009514:	2300      	movs	r3, #0
 8009516:	4604      	mov	r4, r0
 8009518:	f8c8 0008 	str.w	r0, [r8, #8]
 800951c:	6003      	str	r3, [r0, #0]
 800951e:	f04f 0900 	mov.w	r9, #0
 8009522:	07eb      	lsls	r3, r5, #31
 8009524:	d50a      	bpl.n	800953c <__pow5mult+0x84>
 8009526:	4639      	mov	r1, r7
 8009528:	4622      	mov	r2, r4
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ff20 	bl	8009370 <__multiply>
 8009530:	4680      	mov	r8, r0
 8009532:	4639      	mov	r1, r7
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff fe4b 	bl	80091d0 <_Bfree>
 800953a:	4647      	mov	r7, r8
 800953c:	106d      	asrs	r5, r5, #1
 800953e:	d00b      	beq.n	8009558 <__pow5mult+0xa0>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	b938      	cbnz	r0, 8009554 <__pow5mult+0x9c>
 8009544:	4622      	mov	r2, r4
 8009546:	4621      	mov	r1, r4
 8009548:	4630      	mov	r0, r6
 800954a:	f7ff ff11 	bl	8009370 <__multiply>
 800954e:	6020      	str	r0, [r4, #0]
 8009550:	f8c0 9000 	str.w	r9, [r0]
 8009554:	4604      	mov	r4, r0
 8009556:	e7e4      	b.n	8009522 <__pow5mult+0x6a>
 8009558:	4638      	mov	r0, r7
 800955a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955e:	bf00      	nop
 8009560:	0800ad50 	.word	0x0800ad50
 8009564:	0800ab76 	.word	0x0800ab76
 8009568:	0800abfd 	.word	0x0800abfd

0800956c <__lshift>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	460c      	mov	r4, r1
 8009572:	4607      	mov	r7, r0
 8009574:	4691      	mov	r9, r2
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	6849      	ldr	r1, [r1, #4]
 800957a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800957e:	68a3      	ldr	r3, [r4, #8]
 8009580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009584:	f108 0601 	add.w	r6, r8, #1
 8009588:	42b3      	cmp	r3, r6
 800958a:	db0b      	blt.n	80095a4 <__lshift+0x38>
 800958c:	4638      	mov	r0, r7
 800958e:	f7ff fddf 	bl	8009150 <_Balloc>
 8009592:	4605      	mov	r5, r0
 8009594:	b948      	cbnz	r0, 80095aa <__lshift+0x3e>
 8009596:	4602      	mov	r2, r0
 8009598:	f240 11d9 	movw	r1, #473	; 0x1d9
 800959c:	4b27      	ldr	r3, [pc, #156]	; (800963c <__lshift+0xd0>)
 800959e:	4828      	ldr	r0, [pc, #160]	; (8009640 <__lshift+0xd4>)
 80095a0:	f000 fac2 	bl	8009b28 <__assert_func>
 80095a4:	3101      	adds	r1, #1
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	e7ee      	b.n	8009588 <__lshift+0x1c>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f100 0114 	add.w	r1, r0, #20
 80095b0:	f100 0210 	add.w	r2, r0, #16
 80095b4:	4618      	mov	r0, r3
 80095b6:	4553      	cmp	r3, sl
 80095b8:	db33      	blt.n	8009622 <__lshift+0xb6>
 80095ba:	6920      	ldr	r0, [r4, #16]
 80095bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095c0:	f104 0314 	add.w	r3, r4, #20
 80095c4:	f019 091f 	ands.w	r9, r9, #31
 80095c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095d0:	d02b      	beq.n	800962a <__lshift+0xbe>
 80095d2:	468a      	mov	sl, r1
 80095d4:	2200      	movs	r2, #0
 80095d6:	f1c9 0e20 	rsb	lr, r9, #32
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	fa00 f009 	lsl.w	r0, r0, r9
 80095e0:	4302      	orrs	r2, r0
 80095e2:	f84a 2b04 	str.w	r2, [sl], #4
 80095e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ea:	459c      	cmp	ip, r3
 80095ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80095f0:	d8f3      	bhi.n	80095da <__lshift+0x6e>
 80095f2:	ebac 0304 	sub.w	r3, ip, r4
 80095f6:	3b15      	subs	r3, #21
 80095f8:	f023 0303 	bic.w	r3, r3, #3
 80095fc:	3304      	adds	r3, #4
 80095fe:	f104 0015 	add.w	r0, r4, #21
 8009602:	4584      	cmp	ip, r0
 8009604:	bf38      	it	cc
 8009606:	2304      	movcc	r3, #4
 8009608:	50ca      	str	r2, [r1, r3]
 800960a:	b10a      	cbz	r2, 8009610 <__lshift+0xa4>
 800960c:	f108 0602 	add.w	r6, r8, #2
 8009610:	3e01      	subs	r6, #1
 8009612:	4638      	mov	r0, r7
 8009614:	4621      	mov	r1, r4
 8009616:	612e      	str	r6, [r5, #16]
 8009618:	f7ff fdda 	bl	80091d0 <_Bfree>
 800961c:	4628      	mov	r0, r5
 800961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009622:	f842 0f04 	str.w	r0, [r2, #4]!
 8009626:	3301      	adds	r3, #1
 8009628:	e7c5      	b.n	80095b6 <__lshift+0x4a>
 800962a:	3904      	subs	r1, #4
 800962c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009630:	459c      	cmp	ip, r3
 8009632:	f841 2f04 	str.w	r2, [r1, #4]!
 8009636:	d8f9      	bhi.n	800962c <__lshift+0xc0>
 8009638:	e7ea      	b.n	8009610 <__lshift+0xa4>
 800963a:	bf00      	nop
 800963c:	0800abec 	.word	0x0800abec
 8009640:	0800abfd 	.word	0x0800abfd

08009644 <__mcmp>:
 8009644:	4603      	mov	r3, r0
 8009646:	690a      	ldr	r2, [r1, #16]
 8009648:	6900      	ldr	r0, [r0, #16]
 800964a:	b530      	push	{r4, r5, lr}
 800964c:	1a80      	subs	r0, r0, r2
 800964e:	d10d      	bne.n	800966c <__mcmp+0x28>
 8009650:	3314      	adds	r3, #20
 8009652:	3114      	adds	r1, #20
 8009654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800965c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009664:	4295      	cmp	r5, r2
 8009666:	d002      	beq.n	800966e <__mcmp+0x2a>
 8009668:	d304      	bcc.n	8009674 <__mcmp+0x30>
 800966a:	2001      	movs	r0, #1
 800966c:	bd30      	pop	{r4, r5, pc}
 800966e:	42a3      	cmp	r3, r4
 8009670:	d3f4      	bcc.n	800965c <__mcmp+0x18>
 8009672:	e7fb      	b.n	800966c <__mcmp+0x28>
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e7f8      	b.n	800966c <__mcmp+0x28>
	...

0800967c <__mdiff>:
 800967c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	4606      	mov	r6, r0
 8009684:	4611      	mov	r1, r2
 8009686:	4620      	mov	r0, r4
 8009688:	4692      	mov	sl, r2
 800968a:	f7ff ffdb 	bl	8009644 <__mcmp>
 800968e:	1e05      	subs	r5, r0, #0
 8009690:	d111      	bne.n	80096b6 <__mdiff+0x3a>
 8009692:	4629      	mov	r1, r5
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff fd5b 	bl	8009150 <_Balloc>
 800969a:	4602      	mov	r2, r0
 800969c:	b928      	cbnz	r0, 80096aa <__mdiff+0x2e>
 800969e:	f240 2132 	movw	r1, #562	; 0x232
 80096a2:	4b3c      	ldr	r3, [pc, #240]	; (8009794 <__mdiff+0x118>)
 80096a4:	483c      	ldr	r0, [pc, #240]	; (8009798 <__mdiff+0x11c>)
 80096a6:	f000 fa3f 	bl	8009b28 <__assert_func>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096b0:	4610      	mov	r0, r2
 80096b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	bfa4      	itt	ge
 80096b8:	4653      	movge	r3, sl
 80096ba:	46a2      	movge	sl, r4
 80096bc:	4630      	mov	r0, r6
 80096be:	f8da 1004 	ldr.w	r1, [sl, #4]
 80096c2:	bfa6      	itte	ge
 80096c4:	461c      	movge	r4, r3
 80096c6:	2500      	movge	r5, #0
 80096c8:	2501      	movlt	r5, #1
 80096ca:	f7ff fd41 	bl	8009150 <_Balloc>
 80096ce:	4602      	mov	r2, r0
 80096d0:	b918      	cbnz	r0, 80096da <__mdiff+0x5e>
 80096d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096d6:	4b2f      	ldr	r3, [pc, #188]	; (8009794 <__mdiff+0x118>)
 80096d8:	e7e4      	b.n	80096a4 <__mdiff+0x28>
 80096da:	f100 0814 	add.w	r8, r0, #20
 80096de:	f8da 7010 	ldr.w	r7, [sl, #16]
 80096e2:	60c5      	str	r5, [r0, #12]
 80096e4:	f04f 0c00 	mov.w	ip, #0
 80096e8:	f10a 0514 	add.w	r5, sl, #20
 80096ec:	f10a 0010 	add.w	r0, sl, #16
 80096f0:	46c2      	mov	sl, r8
 80096f2:	6926      	ldr	r6, [r4, #16]
 80096f4:	f104 0914 	add.w	r9, r4, #20
 80096f8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80096fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009700:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009704:	f859 3b04 	ldr.w	r3, [r9], #4
 8009708:	fa1f f18b 	uxth.w	r1, fp
 800970c:	4461      	add	r1, ip
 800970e:	fa1f fc83 	uxth.w	ip, r3
 8009712:	0c1b      	lsrs	r3, r3, #16
 8009714:	eba1 010c 	sub.w	r1, r1, ip
 8009718:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800971c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009720:	b289      	uxth	r1, r1
 8009722:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009726:	454e      	cmp	r6, r9
 8009728:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800972c:	f84a 3b04 	str.w	r3, [sl], #4
 8009730:	d8e6      	bhi.n	8009700 <__mdiff+0x84>
 8009732:	1b33      	subs	r3, r6, r4
 8009734:	3b15      	subs	r3, #21
 8009736:	f023 0303 	bic.w	r3, r3, #3
 800973a:	3415      	adds	r4, #21
 800973c:	3304      	adds	r3, #4
 800973e:	42a6      	cmp	r6, r4
 8009740:	bf38      	it	cc
 8009742:	2304      	movcc	r3, #4
 8009744:	441d      	add	r5, r3
 8009746:	4443      	add	r3, r8
 8009748:	461e      	mov	r6, r3
 800974a:	462c      	mov	r4, r5
 800974c:	4574      	cmp	r4, lr
 800974e:	d30e      	bcc.n	800976e <__mdiff+0xf2>
 8009750:	f10e 0103 	add.w	r1, lr, #3
 8009754:	1b49      	subs	r1, r1, r5
 8009756:	f021 0103 	bic.w	r1, r1, #3
 800975a:	3d03      	subs	r5, #3
 800975c:	45ae      	cmp	lr, r5
 800975e:	bf38      	it	cc
 8009760:	2100      	movcc	r1, #0
 8009762:	4419      	add	r1, r3
 8009764:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009768:	b18b      	cbz	r3, 800978e <__mdiff+0x112>
 800976a:	6117      	str	r7, [r2, #16]
 800976c:	e7a0      	b.n	80096b0 <__mdiff+0x34>
 800976e:	f854 8b04 	ldr.w	r8, [r4], #4
 8009772:	fa1f f188 	uxth.w	r1, r8
 8009776:	4461      	add	r1, ip
 8009778:	1408      	asrs	r0, r1, #16
 800977a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800977e:	b289      	uxth	r1, r1
 8009780:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009784:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009788:	f846 1b04 	str.w	r1, [r6], #4
 800978c:	e7de      	b.n	800974c <__mdiff+0xd0>
 800978e:	3f01      	subs	r7, #1
 8009790:	e7e8      	b.n	8009764 <__mdiff+0xe8>
 8009792:	bf00      	nop
 8009794:	0800abec 	.word	0x0800abec
 8009798:	0800abfd 	.word	0x0800abfd

0800979c <__d2b>:
 800979c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80097a0:	2101      	movs	r1, #1
 80097a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80097a6:	4690      	mov	r8, r2
 80097a8:	461d      	mov	r5, r3
 80097aa:	f7ff fcd1 	bl	8009150 <_Balloc>
 80097ae:	4604      	mov	r4, r0
 80097b0:	b930      	cbnz	r0, 80097c0 <__d2b+0x24>
 80097b2:	4602      	mov	r2, r0
 80097b4:	f240 310a 	movw	r1, #778	; 0x30a
 80097b8:	4b24      	ldr	r3, [pc, #144]	; (800984c <__d2b+0xb0>)
 80097ba:	4825      	ldr	r0, [pc, #148]	; (8009850 <__d2b+0xb4>)
 80097bc:	f000 f9b4 	bl	8009b28 <__assert_func>
 80097c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80097c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80097c8:	bb2d      	cbnz	r5, 8009816 <__d2b+0x7a>
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	f1b8 0300 	subs.w	r3, r8, #0
 80097d0:	d026      	beq.n	8009820 <__d2b+0x84>
 80097d2:	4668      	mov	r0, sp
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	f7ff fd87 	bl	80092e8 <__lo0bits>
 80097da:	9900      	ldr	r1, [sp, #0]
 80097dc:	b1f0      	cbz	r0, 800981c <__d2b+0x80>
 80097de:	9a01      	ldr	r2, [sp, #4]
 80097e0:	f1c0 0320 	rsb	r3, r0, #32
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	430b      	orrs	r3, r1
 80097ea:	40c2      	lsrs	r2, r0
 80097ec:	6163      	str	r3, [r4, #20]
 80097ee:	9201      	str	r2, [sp, #4]
 80097f0:	9b01      	ldr	r3, [sp, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bf14      	ite	ne
 80097f6:	2102      	movne	r1, #2
 80097f8:	2101      	moveq	r1, #1
 80097fa:	61a3      	str	r3, [r4, #24]
 80097fc:	6121      	str	r1, [r4, #16]
 80097fe:	b1c5      	cbz	r5, 8009832 <__d2b+0x96>
 8009800:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009804:	4405      	add	r5, r0
 8009806:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800980a:	603d      	str	r5, [r7, #0]
 800980c:	6030      	str	r0, [r6, #0]
 800980e:	4620      	mov	r0, r4
 8009810:	b002      	add	sp, #8
 8009812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800981a:	e7d6      	b.n	80097ca <__d2b+0x2e>
 800981c:	6161      	str	r1, [r4, #20]
 800981e:	e7e7      	b.n	80097f0 <__d2b+0x54>
 8009820:	a801      	add	r0, sp, #4
 8009822:	f7ff fd61 	bl	80092e8 <__lo0bits>
 8009826:	2101      	movs	r1, #1
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	6121      	str	r1, [r4, #16]
 800982c:	6163      	str	r3, [r4, #20]
 800982e:	3020      	adds	r0, #32
 8009830:	e7e5      	b.n	80097fe <__d2b+0x62>
 8009832:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009836:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800983a:	6038      	str	r0, [r7, #0]
 800983c:	6918      	ldr	r0, [r3, #16]
 800983e:	f7ff fd33 	bl	80092a8 <__hi0bits>
 8009842:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009846:	6031      	str	r1, [r6, #0]
 8009848:	e7e1      	b.n	800980e <__d2b+0x72>
 800984a:	bf00      	nop
 800984c:	0800abec 	.word	0x0800abec
 8009850:	0800abfd 	.word	0x0800abfd

08009854 <_calloc_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	fb02 f501 	mul.w	r5, r2, r1
 800985a:	4629      	mov	r1, r5
 800985c:	f7fe f8f2 	bl	8007a44 <_malloc_r>
 8009860:	4604      	mov	r4, r0
 8009862:	b118      	cbz	r0, 800986c <_calloc_r+0x18>
 8009864:	462a      	mov	r2, r5
 8009866:	2100      	movs	r1, #0
 8009868:	f7fe f898 	bl	800799c <memset>
 800986c:	4620      	mov	r0, r4
 800986e:	bd38      	pop	{r3, r4, r5, pc}

08009870 <__ssputs_r>:
 8009870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009874:	688e      	ldr	r6, [r1, #8]
 8009876:	4682      	mov	sl, r0
 8009878:	429e      	cmp	r6, r3
 800987a:	460c      	mov	r4, r1
 800987c:	4690      	mov	r8, r2
 800987e:	461f      	mov	r7, r3
 8009880:	d838      	bhi.n	80098f4 <__ssputs_r+0x84>
 8009882:	898a      	ldrh	r2, [r1, #12]
 8009884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009888:	d032      	beq.n	80098f0 <__ssputs_r+0x80>
 800988a:	6825      	ldr	r5, [r4, #0]
 800988c:	6909      	ldr	r1, [r1, #16]
 800988e:	3301      	adds	r3, #1
 8009890:	eba5 0901 	sub.w	r9, r5, r1
 8009894:	6965      	ldr	r5, [r4, #20]
 8009896:	444b      	add	r3, r9
 8009898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800989c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098a0:	106d      	asrs	r5, r5, #1
 80098a2:	429d      	cmp	r5, r3
 80098a4:	bf38      	it	cc
 80098a6:	461d      	movcc	r5, r3
 80098a8:	0553      	lsls	r3, r2, #21
 80098aa:	d531      	bpl.n	8009910 <__ssputs_r+0xa0>
 80098ac:	4629      	mov	r1, r5
 80098ae:	f7fe f8c9 	bl	8007a44 <_malloc_r>
 80098b2:	4606      	mov	r6, r0
 80098b4:	b950      	cbnz	r0, 80098cc <__ssputs_r+0x5c>
 80098b6:	230c      	movs	r3, #12
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	f8ca 3000 	str.w	r3, [sl]
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098cc:	464a      	mov	r2, r9
 80098ce:	6921      	ldr	r1, [r4, #16]
 80098d0:	f7fe f856 	bl	8007980 <memcpy>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	6126      	str	r6, [r4, #16]
 80098e2:	444e      	add	r6, r9
 80098e4:	6026      	str	r6, [r4, #0]
 80098e6:	463e      	mov	r6, r7
 80098e8:	6165      	str	r5, [r4, #20]
 80098ea:	eba5 0509 	sub.w	r5, r5, r9
 80098ee:	60a5      	str	r5, [r4, #8]
 80098f0:	42be      	cmp	r6, r7
 80098f2:	d900      	bls.n	80098f6 <__ssputs_r+0x86>
 80098f4:	463e      	mov	r6, r7
 80098f6:	4632      	mov	r2, r6
 80098f8:	4641      	mov	r1, r8
 80098fa:	6820      	ldr	r0, [r4, #0]
 80098fc:	f000 f959 	bl	8009bb2 <memmove>
 8009900:	68a3      	ldr	r3, [r4, #8]
 8009902:	6822      	ldr	r2, [r4, #0]
 8009904:	1b9b      	subs	r3, r3, r6
 8009906:	4432      	add	r2, r6
 8009908:	2000      	movs	r0, #0
 800990a:	60a3      	str	r3, [r4, #8]
 800990c:	6022      	str	r2, [r4, #0]
 800990e:	e7db      	b.n	80098c8 <__ssputs_r+0x58>
 8009910:	462a      	mov	r2, r5
 8009912:	f000 f968 	bl	8009be6 <_realloc_r>
 8009916:	4606      	mov	r6, r0
 8009918:	2800      	cmp	r0, #0
 800991a:	d1e1      	bne.n	80098e0 <__ssputs_r+0x70>
 800991c:	4650      	mov	r0, sl
 800991e:	6921      	ldr	r1, [r4, #16]
 8009920:	f7fe f844 	bl	80079ac <_free_r>
 8009924:	e7c7      	b.n	80098b6 <__ssputs_r+0x46>
	...

08009928 <_svfiprintf_r>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	4698      	mov	r8, r3
 800992e:	898b      	ldrh	r3, [r1, #12]
 8009930:	4607      	mov	r7, r0
 8009932:	061b      	lsls	r3, r3, #24
 8009934:	460d      	mov	r5, r1
 8009936:	4614      	mov	r4, r2
 8009938:	b09d      	sub	sp, #116	; 0x74
 800993a:	d50e      	bpl.n	800995a <_svfiprintf_r+0x32>
 800993c:	690b      	ldr	r3, [r1, #16]
 800993e:	b963      	cbnz	r3, 800995a <_svfiprintf_r+0x32>
 8009940:	2140      	movs	r1, #64	; 0x40
 8009942:	f7fe f87f 	bl	8007a44 <_malloc_r>
 8009946:	6028      	str	r0, [r5, #0]
 8009948:	6128      	str	r0, [r5, #16]
 800994a:	b920      	cbnz	r0, 8009956 <_svfiprintf_r+0x2e>
 800994c:	230c      	movs	r3, #12
 800994e:	603b      	str	r3, [r7, #0]
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	e0d1      	b.n	8009afa <_svfiprintf_r+0x1d2>
 8009956:	2340      	movs	r3, #64	; 0x40
 8009958:	616b      	str	r3, [r5, #20]
 800995a:	2300      	movs	r3, #0
 800995c:	9309      	str	r3, [sp, #36]	; 0x24
 800995e:	2320      	movs	r3, #32
 8009960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009964:	2330      	movs	r3, #48	; 0x30
 8009966:	f04f 0901 	mov.w	r9, #1
 800996a:	f8cd 800c 	str.w	r8, [sp, #12]
 800996e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b14 <_svfiprintf_r+0x1ec>
 8009972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009976:	4623      	mov	r3, r4
 8009978:	469a      	mov	sl, r3
 800997a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800997e:	b10a      	cbz	r2, 8009984 <_svfiprintf_r+0x5c>
 8009980:	2a25      	cmp	r2, #37	; 0x25
 8009982:	d1f9      	bne.n	8009978 <_svfiprintf_r+0x50>
 8009984:	ebba 0b04 	subs.w	fp, sl, r4
 8009988:	d00b      	beq.n	80099a2 <_svfiprintf_r+0x7a>
 800998a:	465b      	mov	r3, fp
 800998c:	4622      	mov	r2, r4
 800998e:	4629      	mov	r1, r5
 8009990:	4638      	mov	r0, r7
 8009992:	f7ff ff6d 	bl	8009870 <__ssputs_r>
 8009996:	3001      	adds	r0, #1
 8009998:	f000 80aa 	beq.w	8009af0 <_svfiprintf_r+0x1c8>
 800999c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800999e:	445a      	add	r2, fp
 80099a0:	9209      	str	r2, [sp, #36]	; 0x24
 80099a2:	f89a 3000 	ldrb.w	r3, [sl]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 80a2 	beq.w	8009af0 <_svfiprintf_r+0x1c8>
 80099ac:	2300      	movs	r3, #0
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295
 80099b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b6:	f10a 0a01 	add.w	sl, sl, #1
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	9307      	str	r3, [sp, #28]
 80099be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099c2:	931a      	str	r3, [sp, #104]	; 0x68
 80099c4:	4654      	mov	r4, sl
 80099c6:	2205      	movs	r2, #5
 80099c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099cc:	4851      	ldr	r0, [pc, #324]	; (8009b14 <_svfiprintf_r+0x1ec>)
 80099ce:	f7ff fba5 	bl	800911c <memchr>
 80099d2:	9a04      	ldr	r2, [sp, #16]
 80099d4:	b9d8      	cbnz	r0, 8009a0e <_svfiprintf_r+0xe6>
 80099d6:	06d0      	lsls	r0, r2, #27
 80099d8:	bf44      	itt	mi
 80099da:	2320      	movmi	r3, #32
 80099dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e0:	0711      	lsls	r1, r2, #28
 80099e2:	bf44      	itt	mi
 80099e4:	232b      	movmi	r3, #43	; 0x2b
 80099e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ea:	f89a 3000 	ldrb.w	r3, [sl]
 80099ee:	2b2a      	cmp	r3, #42	; 0x2a
 80099f0:	d015      	beq.n	8009a1e <_svfiprintf_r+0xf6>
 80099f2:	4654      	mov	r4, sl
 80099f4:	2000      	movs	r0, #0
 80099f6:	f04f 0c0a 	mov.w	ip, #10
 80099fa:	9a07      	ldr	r2, [sp, #28]
 80099fc:	4621      	mov	r1, r4
 80099fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a02:	3b30      	subs	r3, #48	; 0x30
 8009a04:	2b09      	cmp	r3, #9
 8009a06:	d94e      	bls.n	8009aa6 <_svfiprintf_r+0x17e>
 8009a08:	b1b0      	cbz	r0, 8009a38 <_svfiprintf_r+0x110>
 8009a0a:	9207      	str	r2, [sp, #28]
 8009a0c:	e014      	b.n	8009a38 <_svfiprintf_r+0x110>
 8009a0e:	eba0 0308 	sub.w	r3, r0, r8
 8009a12:	fa09 f303 	lsl.w	r3, r9, r3
 8009a16:	4313      	orrs	r3, r2
 8009a18:	46a2      	mov	sl, r4
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	e7d2      	b.n	80099c4 <_svfiprintf_r+0x9c>
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	1d19      	adds	r1, r3, #4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	9103      	str	r1, [sp, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	bfbb      	ittet	lt
 8009a2a:	425b      	neglt	r3, r3
 8009a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a30:	9307      	strge	r3, [sp, #28]
 8009a32:	9307      	strlt	r3, [sp, #28]
 8009a34:	bfb8      	it	lt
 8009a36:	9204      	strlt	r2, [sp, #16]
 8009a38:	7823      	ldrb	r3, [r4, #0]
 8009a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3c:	d10c      	bne.n	8009a58 <_svfiprintf_r+0x130>
 8009a3e:	7863      	ldrb	r3, [r4, #1]
 8009a40:	2b2a      	cmp	r3, #42	; 0x2a
 8009a42:	d135      	bne.n	8009ab0 <_svfiprintf_r+0x188>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	3402      	adds	r4, #2
 8009a48:	1d1a      	adds	r2, r3, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	9203      	str	r2, [sp, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfb8      	it	lt
 8009a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b24 <_svfiprintf_r+0x1fc>
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	4650      	mov	r0, sl
 8009a60:	7821      	ldrb	r1, [r4, #0]
 8009a62:	f7ff fb5b 	bl	800911c <memchr>
 8009a66:	b140      	cbz	r0, 8009a7a <_svfiprintf_r+0x152>
 8009a68:	2340      	movs	r3, #64	; 0x40
 8009a6a:	eba0 000a 	sub.w	r0, r0, sl
 8009a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	3401      	adds	r4, #1
 8009a76:	4303      	orrs	r3, r0
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a7e:	2206      	movs	r2, #6
 8009a80:	4825      	ldr	r0, [pc, #148]	; (8009b18 <_svfiprintf_r+0x1f0>)
 8009a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a86:	f7ff fb49 	bl	800911c <memchr>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d038      	beq.n	8009b00 <_svfiprintf_r+0x1d8>
 8009a8e:	4b23      	ldr	r3, [pc, #140]	; (8009b1c <_svfiprintf_r+0x1f4>)
 8009a90:	bb1b      	cbnz	r3, 8009ada <_svfiprintf_r+0x1b2>
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	3307      	adds	r3, #7
 8009a96:	f023 0307 	bic.w	r3, r3, #7
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	9303      	str	r3, [sp, #12]
 8009a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa0:	4433      	add	r3, r6
 8009aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa4:	e767      	b.n	8009976 <_svfiprintf_r+0x4e>
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aae:	e7a5      	b.n	80099fc <_svfiprintf_r+0xd4>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f04f 0c0a 	mov.w	ip, #10
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	3401      	adds	r4, #1
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	4620      	mov	r0, r4
 8009abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac2:	3a30      	subs	r2, #48	; 0x30
 8009ac4:	2a09      	cmp	r2, #9
 8009ac6:	d903      	bls.n	8009ad0 <_svfiprintf_r+0x1a8>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d0c5      	beq.n	8009a58 <_svfiprintf_r+0x130>
 8009acc:	9105      	str	r1, [sp, #20]
 8009ace:	e7c3      	b.n	8009a58 <_svfiprintf_r+0x130>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ad8:	e7f0      	b.n	8009abc <_svfiprintf_r+0x194>
 8009ada:	ab03      	add	r3, sp, #12
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	4b0f      	ldr	r3, [pc, #60]	; (8009b20 <_svfiprintf_r+0x1f8>)
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	f7fe f8a5 	bl	8007c34 <_printf_float>
 8009aea:	1c42      	adds	r2, r0, #1
 8009aec:	4606      	mov	r6, r0
 8009aee:	d1d6      	bne.n	8009a9e <_svfiprintf_r+0x176>
 8009af0:	89ab      	ldrh	r3, [r5, #12]
 8009af2:	065b      	lsls	r3, r3, #25
 8009af4:	f53f af2c 	bmi.w	8009950 <_svfiprintf_r+0x28>
 8009af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009afa:	b01d      	add	sp, #116	; 0x74
 8009afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b00:	ab03      	add	r3, sp, #12
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	462a      	mov	r2, r5
 8009b06:	4638      	mov	r0, r7
 8009b08:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <_svfiprintf_r+0x1f8>)
 8009b0a:	a904      	add	r1, sp, #16
 8009b0c:	f7fe fb2e 	bl	800816c <_printf_i>
 8009b10:	e7eb      	b.n	8009aea <_svfiprintf_r+0x1c2>
 8009b12:	bf00      	nop
 8009b14:	0800ad5c 	.word	0x0800ad5c
 8009b18:	0800ad66 	.word	0x0800ad66
 8009b1c:	08007c35 	.word	0x08007c35
 8009b20:	08009871 	.word	0x08009871
 8009b24:	0800ad62 	.word	0x0800ad62

08009b28 <__assert_func>:
 8009b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <__assert_func+0x2c>)
 8009b30:	4605      	mov	r5, r0
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68d8      	ldr	r0, [r3, #12]
 8009b36:	b14c      	cbz	r4, 8009b4c <__assert_func+0x24>
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <__assert_func+0x30>)
 8009b3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b3e:	9100      	str	r1, [sp, #0]
 8009b40:	462b      	mov	r3, r5
 8009b42:	4906      	ldr	r1, [pc, #24]	; (8009b5c <__assert_func+0x34>)
 8009b44:	f000 f80e 	bl	8009b64 <fiprintf>
 8009b48:	f000 fa98 	bl	800a07c <abort>
 8009b4c:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <__assert_func+0x38>)
 8009b4e:	461c      	mov	r4, r3
 8009b50:	e7f3      	b.n	8009b3a <__assert_func+0x12>
 8009b52:	bf00      	nop
 8009b54:	20000010 	.word	0x20000010
 8009b58:	0800ad6d 	.word	0x0800ad6d
 8009b5c:	0800ad7a 	.word	0x0800ad7a
 8009b60:	0800ada8 	.word	0x0800ada8

08009b64 <fiprintf>:
 8009b64:	b40e      	push	{r1, r2, r3}
 8009b66:	b503      	push	{r0, r1, lr}
 8009b68:	4601      	mov	r1, r0
 8009b6a:	ab03      	add	r3, sp, #12
 8009b6c:	4805      	ldr	r0, [pc, #20]	; (8009b84 <fiprintf+0x20>)
 8009b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b72:	6800      	ldr	r0, [r0, #0]
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	f000 f883 	bl	8009c80 <_vfiprintf_r>
 8009b7a:	b002      	add	sp, #8
 8009b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b80:	b003      	add	sp, #12
 8009b82:	4770      	bx	lr
 8009b84:	20000010 	.word	0x20000010

08009b88 <__retarget_lock_init_recursive>:
 8009b88:	4770      	bx	lr

08009b8a <__retarget_lock_acquire_recursive>:
 8009b8a:	4770      	bx	lr

08009b8c <__retarget_lock_release_recursive>:
 8009b8c:	4770      	bx	lr

08009b8e <__ascii_mbtowc>:
 8009b8e:	b082      	sub	sp, #8
 8009b90:	b901      	cbnz	r1, 8009b94 <__ascii_mbtowc+0x6>
 8009b92:	a901      	add	r1, sp, #4
 8009b94:	b142      	cbz	r2, 8009ba8 <__ascii_mbtowc+0x1a>
 8009b96:	b14b      	cbz	r3, 8009bac <__ascii_mbtowc+0x1e>
 8009b98:	7813      	ldrb	r3, [r2, #0]
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	7812      	ldrb	r2, [r2, #0]
 8009b9e:	1e10      	subs	r0, r2, #0
 8009ba0:	bf18      	it	ne
 8009ba2:	2001      	movne	r0, #1
 8009ba4:	b002      	add	sp, #8
 8009ba6:	4770      	bx	lr
 8009ba8:	4610      	mov	r0, r2
 8009baa:	e7fb      	b.n	8009ba4 <__ascii_mbtowc+0x16>
 8009bac:	f06f 0001 	mvn.w	r0, #1
 8009bb0:	e7f8      	b.n	8009ba4 <__ascii_mbtowc+0x16>

08009bb2 <memmove>:
 8009bb2:	4288      	cmp	r0, r1
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	eb01 0402 	add.w	r4, r1, r2
 8009bba:	d902      	bls.n	8009bc2 <memmove+0x10>
 8009bbc:	4284      	cmp	r4, r0
 8009bbe:	4623      	mov	r3, r4
 8009bc0:	d807      	bhi.n	8009bd2 <memmove+0x20>
 8009bc2:	1e43      	subs	r3, r0, #1
 8009bc4:	42a1      	cmp	r1, r4
 8009bc6:	d008      	beq.n	8009bda <memmove+0x28>
 8009bc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bd0:	e7f8      	b.n	8009bc4 <memmove+0x12>
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	4402      	add	r2, r0
 8009bd6:	428a      	cmp	r2, r1
 8009bd8:	d100      	bne.n	8009bdc <memmove+0x2a>
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009be0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009be4:	e7f7      	b.n	8009bd6 <memmove+0x24>

08009be6 <_realloc_r>:
 8009be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be8:	4607      	mov	r7, r0
 8009bea:	4614      	mov	r4, r2
 8009bec:	460e      	mov	r6, r1
 8009bee:	b921      	cbnz	r1, 8009bfa <_realloc_r+0x14>
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bf6:	f7fd bf25 	b.w	8007a44 <_malloc_r>
 8009bfa:	b922      	cbnz	r2, 8009c06 <_realloc_r+0x20>
 8009bfc:	f7fd fed6 	bl	80079ac <_free_r>
 8009c00:	4625      	mov	r5, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c06:	f000 fc5d 	bl	800a4c4 <_malloc_usable_size_r>
 8009c0a:	42a0      	cmp	r0, r4
 8009c0c:	d20f      	bcs.n	8009c2e <_realloc_r+0x48>
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7fd ff17 	bl	8007a44 <_malloc_r>
 8009c16:	4605      	mov	r5, r0
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0f2      	beq.n	8009c02 <_realloc_r+0x1c>
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4622      	mov	r2, r4
 8009c20:	f7fd feae 	bl	8007980 <memcpy>
 8009c24:	4631      	mov	r1, r6
 8009c26:	4638      	mov	r0, r7
 8009c28:	f7fd fec0 	bl	80079ac <_free_r>
 8009c2c:	e7e9      	b.n	8009c02 <_realloc_r+0x1c>
 8009c2e:	4635      	mov	r5, r6
 8009c30:	e7e7      	b.n	8009c02 <_realloc_r+0x1c>

08009c32 <__sfputc_r>:
 8009c32:	6893      	ldr	r3, [r2, #8]
 8009c34:	b410      	push	{r4}
 8009c36:	3b01      	subs	r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	6093      	str	r3, [r2, #8]
 8009c3c:	da07      	bge.n	8009c4e <__sfputc_r+0x1c>
 8009c3e:	6994      	ldr	r4, [r2, #24]
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	db01      	blt.n	8009c48 <__sfputc_r+0x16>
 8009c44:	290a      	cmp	r1, #10
 8009c46:	d102      	bne.n	8009c4e <__sfputc_r+0x1c>
 8009c48:	bc10      	pop	{r4}
 8009c4a:	f000 b949 	b.w	8009ee0 <__swbuf_r>
 8009c4e:	6813      	ldr	r3, [r2, #0]
 8009c50:	1c58      	adds	r0, r3, #1
 8009c52:	6010      	str	r0, [r2, #0]
 8009c54:	7019      	strb	r1, [r3, #0]
 8009c56:	4608      	mov	r0, r1
 8009c58:	bc10      	pop	{r4}
 8009c5a:	4770      	bx	lr

08009c5c <__sfputs_r>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460f      	mov	r7, r1
 8009c62:	4614      	mov	r4, r2
 8009c64:	18d5      	adds	r5, r2, r3
 8009c66:	42ac      	cmp	r4, r5
 8009c68:	d101      	bne.n	8009c6e <__sfputs_r+0x12>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e007      	b.n	8009c7e <__sfputs_r+0x22>
 8009c6e:	463a      	mov	r2, r7
 8009c70:	4630      	mov	r0, r6
 8009c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c76:	f7ff ffdc 	bl	8009c32 <__sfputc_r>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	d1f3      	bne.n	8009c66 <__sfputs_r+0xa>
 8009c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c80 <_vfiprintf_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	460d      	mov	r5, r1
 8009c86:	4614      	mov	r4, r2
 8009c88:	4698      	mov	r8, r3
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	b09d      	sub	sp, #116	; 0x74
 8009c8e:	b118      	cbz	r0, 8009c98 <_vfiprintf_r+0x18>
 8009c90:	6983      	ldr	r3, [r0, #24]
 8009c92:	b90b      	cbnz	r3, 8009c98 <_vfiprintf_r+0x18>
 8009c94:	f000 fb14 	bl	800a2c0 <__sinit>
 8009c98:	4b89      	ldr	r3, [pc, #548]	; (8009ec0 <_vfiprintf_r+0x240>)
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	d11b      	bne.n	8009cd6 <_vfiprintf_r+0x56>
 8009c9e:	6875      	ldr	r5, [r6, #4]
 8009ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca2:	07d9      	lsls	r1, r3, #31
 8009ca4:	d405      	bmi.n	8009cb2 <_vfiprintf_r+0x32>
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	059a      	lsls	r2, r3, #22
 8009caa:	d402      	bmi.n	8009cb2 <_vfiprintf_r+0x32>
 8009cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cae:	f7ff ff6c 	bl	8009b8a <__retarget_lock_acquire_recursive>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	071b      	lsls	r3, r3, #28
 8009cb6:	d501      	bpl.n	8009cbc <_vfiprintf_r+0x3c>
 8009cb8:	692b      	ldr	r3, [r5, #16]
 8009cba:	b9eb      	cbnz	r3, 8009cf8 <_vfiprintf_r+0x78>
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f000 f96e 	bl	8009fa0 <__swsetup_r>
 8009cc4:	b1c0      	cbz	r0, 8009cf8 <_vfiprintf_r+0x78>
 8009cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cc8:	07dc      	lsls	r4, r3, #31
 8009cca:	d50e      	bpl.n	8009cea <_vfiprintf_r+0x6a>
 8009ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd0:	b01d      	add	sp, #116	; 0x74
 8009cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd6:	4b7b      	ldr	r3, [pc, #492]	; (8009ec4 <_vfiprintf_r+0x244>)
 8009cd8:	429d      	cmp	r5, r3
 8009cda:	d101      	bne.n	8009ce0 <_vfiprintf_r+0x60>
 8009cdc:	68b5      	ldr	r5, [r6, #8]
 8009cde:	e7df      	b.n	8009ca0 <_vfiprintf_r+0x20>
 8009ce0:	4b79      	ldr	r3, [pc, #484]	; (8009ec8 <_vfiprintf_r+0x248>)
 8009ce2:	429d      	cmp	r5, r3
 8009ce4:	bf08      	it	eq
 8009ce6:	68f5      	ldreq	r5, [r6, #12]
 8009ce8:	e7da      	b.n	8009ca0 <_vfiprintf_r+0x20>
 8009cea:	89ab      	ldrh	r3, [r5, #12]
 8009cec:	0598      	lsls	r0, r3, #22
 8009cee:	d4ed      	bmi.n	8009ccc <_vfiprintf_r+0x4c>
 8009cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cf2:	f7ff ff4b 	bl	8009b8c <__retarget_lock_release_recursive>
 8009cf6:	e7e9      	b.n	8009ccc <_vfiprintf_r+0x4c>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d02:	2330      	movs	r3, #48	; 0x30
 8009d04:	f04f 0901 	mov.w	r9, #1
 8009d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009ecc <_vfiprintf_r+0x24c>
 8009d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d14:	4623      	mov	r3, r4
 8009d16:	469a      	mov	sl, r3
 8009d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d1c:	b10a      	cbz	r2, 8009d22 <_vfiprintf_r+0xa2>
 8009d1e:	2a25      	cmp	r2, #37	; 0x25
 8009d20:	d1f9      	bne.n	8009d16 <_vfiprintf_r+0x96>
 8009d22:	ebba 0b04 	subs.w	fp, sl, r4
 8009d26:	d00b      	beq.n	8009d40 <_vfiprintf_r+0xc0>
 8009d28:	465b      	mov	r3, fp
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7ff ff94 	bl	8009c5c <__sfputs_r>
 8009d34:	3001      	adds	r0, #1
 8009d36:	f000 80aa 	beq.w	8009e8e <_vfiprintf_r+0x20e>
 8009d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d3c:	445a      	add	r2, fp
 8009d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d40:	f89a 3000 	ldrb.w	r3, [sl]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 80a2 	beq.w	8009e8e <_vfiprintf_r+0x20e>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d54:	f10a 0a01 	add.w	sl, sl, #1
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	9307      	str	r3, [sp, #28]
 8009d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d60:	931a      	str	r3, [sp, #104]	; 0x68
 8009d62:	4654      	mov	r4, sl
 8009d64:	2205      	movs	r2, #5
 8009d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6a:	4858      	ldr	r0, [pc, #352]	; (8009ecc <_vfiprintf_r+0x24c>)
 8009d6c:	f7ff f9d6 	bl	800911c <memchr>
 8009d70:	9a04      	ldr	r2, [sp, #16]
 8009d72:	b9d8      	cbnz	r0, 8009dac <_vfiprintf_r+0x12c>
 8009d74:	06d1      	lsls	r1, r2, #27
 8009d76:	bf44      	itt	mi
 8009d78:	2320      	movmi	r3, #32
 8009d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d7e:	0713      	lsls	r3, r2, #28
 8009d80:	bf44      	itt	mi
 8009d82:	232b      	movmi	r3, #43	; 0x2b
 8009d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d88:	f89a 3000 	ldrb.w	r3, [sl]
 8009d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8e:	d015      	beq.n	8009dbc <_vfiprintf_r+0x13c>
 8009d90:	4654      	mov	r4, sl
 8009d92:	2000      	movs	r0, #0
 8009d94:	f04f 0c0a 	mov.w	ip, #10
 8009d98:	9a07      	ldr	r2, [sp, #28]
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009da0:	3b30      	subs	r3, #48	; 0x30
 8009da2:	2b09      	cmp	r3, #9
 8009da4:	d94e      	bls.n	8009e44 <_vfiprintf_r+0x1c4>
 8009da6:	b1b0      	cbz	r0, 8009dd6 <_vfiprintf_r+0x156>
 8009da8:	9207      	str	r2, [sp, #28]
 8009daa:	e014      	b.n	8009dd6 <_vfiprintf_r+0x156>
 8009dac:	eba0 0308 	sub.w	r3, r0, r8
 8009db0:	fa09 f303 	lsl.w	r3, r9, r3
 8009db4:	4313      	orrs	r3, r2
 8009db6:	46a2      	mov	sl, r4
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	e7d2      	b.n	8009d62 <_vfiprintf_r+0xe2>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	1d19      	adds	r1, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	9103      	str	r1, [sp, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	bfbb      	ittet	lt
 8009dc8:	425b      	neglt	r3, r3
 8009dca:	f042 0202 	orrlt.w	r2, r2, #2
 8009dce:	9307      	strge	r3, [sp, #28]
 8009dd0:	9307      	strlt	r3, [sp, #28]
 8009dd2:	bfb8      	it	lt
 8009dd4:	9204      	strlt	r2, [sp, #16]
 8009dd6:	7823      	ldrb	r3, [r4, #0]
 8009dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8009dda:	d10c      	bne.n	8009df6 <_vfiprintf_r+0x176>
 8009ddc:	7863      	ldrb	r3, [r4, #1]
 8009dde:	2b2a      	cmp	r3, #42	; 0x2a
 8009de0:	d135      	bne.n	8009e4e <_vfiprintf_r+0x1ce>
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	3402      	adds	r4, #2
 8009de6:	1d1a      	adds	r2, r3, #4
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	9203      	str	r2, [sp, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	bfb8      	it	lt
 8009df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009df4:	9305      	str	r3, [sp, #20]
 8009df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009edc <_vfiprintf_r+0x25c>
 8009dfa:	2203      	movs	r2, #3
 8009dfc:	4650      	mov	r0, sl
 8009dfe:	7821      	ldrb	r1, [r4, #0]
 8009e00:	f7ff f98c 	bl	800911c <memchr>
 8009e04:	b140      	cbz	r0, 8009e18 <_vfiprintf_r+0x198>
 8009e06:	2340      	movs	r3, #64	; 0x40
 8009e08:	eba0 000a 	sub.w	r0, r0, sl
 8009e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	3401      	adds	r4, #1
 8009e14:	4303      	orrs	r3, r0
 8009e16:	9304      	str	r3, [sp, #16]
 8009e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1c:	2206      	movs	r2, #6
 8009e1e:	482c      	ldr	r0, [pc, #176]	; (8009ed0 <_vfiprintf_r+0x250>)
 8009e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e24:	f7ff f97a 	bl	800911c <memchr>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d03f      	beq.n	8009eac <_vfiprintf_r+0x22c>
 8009e2c:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <_vfiprintf_r+0x254>)
 8009e2e:	bb1b      	cbnz	r3, 8009e78 <_vfiprintf_r+0x1f8>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	3307      	adds	r3, #7
 8009e34:	f023 0307 	bic.w	r3, r3, #7
 8009e38:	3308      	adds	r3, #8
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3e:	443b      	add	r3, r7
 8009e40:	9309      	str	r3, [sp, #36]	; 0x24
 8009e42:	e767      	b.n	8009d14 <_vfiprintf_r+0x94>
 8009e44:	460c      	mov	r4, r1
 8009e46:	2001      	movs	r0, #1
 8009e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e4c:	e7a5      	b.n	8009d9a <_vfiprintf_r+0x11a>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f04f 0c0a 	mov.w	ip, #10
 8009e54:	4619      	mov	r1, r3
 8009e56:	3401      	adds	r4, #1
 8009e58:	9305      	str	r3, [sp, #20]
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e60:	3a30      	subs	r2, #48	; 0x30
 8009e62:	2a09      	cmp	r2, #9
 8009e64:	d903      	bls.n	8009e6e <_vfiprintf_r+0x1ee>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0c5      	beq.n	8009df6 <_vfiprintf_r+0x176>
 8009e6a:	9105      	str	r1, [sp, #20]
 8009e6c:	e7c3      	b.n	8009df6 <_vfiprintf_r+0x176>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	2301      	movs	r3, #1
 8009e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e76:	e7f0      	b.n	8009e5a <_vfiprintf_r+0x1da>
 8009e78:	ab03      	add	r3, sp, #12
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	462a      	mov	r2, r5
 8009e7e:	4630      	mov	r0, r6
 8009e80:	4b15      	ldr	r3, [pc, #84]	; (8009ed8 <_vfiprintf_r+0x258>)
 8009e82:	a904      	add	r1, sp, #16
 8009e84:	f7fd fed6 	bl	8007c34 <_printf_float>
 8009e88:	4607      	mov	r7, r0
 8009e8a:	1c78      	adds	r0, r7, #1
 8009e8c:	d1d6      	bne.n	8009e3c <_vfiprintf_r+0x1bc>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07d9      	lsls	r1, r3, #31
 8009e92:	d405      	bmi.n	8009ea0 <_vfiprintf_r+0x220>
 8009e94:	89ab      	ldrh	r3, [r5, #12]
 8009e96:	059a      	lsls	r2, r3, #22
 8009e98:	d402      	bmi.n	8009ea0 <_vfiprintf_r+0x220>
 8009e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e9c:	f7ff fe76 	bl	8009b8c <__retarget_lock_release_recursive>
 8009ea0:	89ab      	ldrh	r3, [r5, #12]
 8009ea2:	065b      	lsls	r3, r3, #25
 8009ea4:	f53f af12 	bmi.w	8009ccc <_vfiprintf_r+0x4c>
 8009ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eaa:	e711      	b.n	8009cd0 <_vfiprintf_r+0x50>
 8009eac:	ab03      	add	r3, sp, #12
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	4b08      	ldr	r3, [pc, #32]	; (8009ed8 <_vfiprintf_r+0x258>)
 8009eb6:	a904      	add	r1, sp, #16
 8009eb8:	f7fe f958 	bl	800816c <_printf_i>
 8009ebc:	e7e4      	b.n	8009e88 <_vfiprintf_r+0x208>
 8009ebe:	bf00      	nop
 8009ec0:	0800add4 	.word	0x0800add4
 8009ec4:	0800adf4 	.word	0x0800adf4
 8009ec8:	0800adb4 	.word	0x0800adb4
 8009ecc:	0800ad5c 	.word	0x0800ad5c
 8009ed0:	0800ad66 	.word	0x0800ad66
 8009ed4:	08007c35 	.word	0x08007c35
 8009ed8:	08009c5d 	.word	0x08009c5d
 8009edc:	0800ad62 	.word	0x0800ad62

08009ee0 <__swbuf_r>:
 8009ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee2:	460e      	mov	r6, r1
 8009ee4:	4614      	mov	r4, r2
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	b118      	cbz	r0, 8009ef2 <__swbuf_r+0x12>
 8009eea:	6983      	ldr	r3, [r0, #24]
 8009eec:	b90b      	cbnz	r3, 8009ef2 <__swbuf_r+0x12>
 8009eee:	f000 f9e7 	bl	800a2c0 <__sinit>
 8009ef2:	4b21      	ldr	r3, [pc, #132]	; (8009f78 <__swbuf_r+0x98>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	d12b      	bne.n	8009f50 <__swbuf_r+0x70>
 8009ef8:	686c      	ldr	r4, [r5, #4]
 8009efa:	69a3      	ldr	r3, [r4, #24]
 8009efc:	60a3      	str	r3, [r4, #8]
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	071a      	lsls	r2, r3, #28
 8009f02:	d52f      	bpl.n	8009f64 <__swbuf_r+0x84>
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	b36b      	cbz	r3, 8009f64 <__swbuf_r+0x84>
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	6820      	ldr	r0, [r4, #0]
 8009f0c:	b2f6      	uxtb	r6, r6
 8009f0e:	1ac0      	subs	r0, r0, r3
 8009f10:	6963      	ldr	r3, [r4, #20]
 8009f12:	4637      	mov	r7, r6
 8009f14:	4283      	cmp	r3, r0
 8009f16:	dc04      	bgt.n	8009f22 <__swbuf_r+0x42>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f000 f93c 	bl	800a198 <_fflush_r>
 8009f20:	bb30      	cbnz	r0, 8009f70 <__swbuf_r+0x90>
 8009f22:	68a3      	ldr	r3, [r4, #8]
 8009f24:	3001      	adds	r0, #1
 8009f26:	3b01      	subs	r3, #1
 8009f28:	60a3      	str	r3, [r4, #8]
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	6022      	str	r2, [r4, #0]
 8009f30:	701e      	strb	r6, [r3, #0]
 8009f32:	6963      	ldr	r3, [r4, #20]
 8009f34:	4283      	cmp	r3, r0
 8009f36:	d004      	beq.n	8009f42 <__swbuf_r+0x62>
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	07db      	lsls	r3, r3, #31
 8009f3c:	d506      	bpl.n	8009f4c <__swbuf_r+0x6c>
 8009f3e:	2e0a      	cmp	r6, #10
 8009f40:	d104      	bne.n	8009f4c <__swbuf_r+0x6c>
 8009f42:	4621      	mov	r1, r4
 8009f44:	4628      	mov	r0, r5
 8009f46:	f000 f927 	bl	800a198 <_fflush_r>
 8009f4a:	b988      	cbnz	r0, 8009f70 <__swbuf_r+0x90>
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f50:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <__swbuf_r+0x9c>)
 8009f52:	429c      	cmp	r4, r3
 8009f54:	d101      	bne.n	8009f5a <__swbuf_r+0x7a>
 8009f56:	68ac      	ldr	r4, [r5, #8]
 8009f58:	e7cf      	b.n	8009efa <__swbuf_r+0x1a>
 8009f5a:	4b09      	ldr	r3, [pc, #36]	; (8009f80 <__swbuf_r+0xa0>)
 8009f5c:	429c      	cmp	r4, r3
 8009f5e:	bf08      	it	eq
 8009f60:	68ec      	ldreq	r4, [r5, #12]
 8009f62:	e7ca      	b.n	8009efa <__swbuf_r+0x1a>
 8009f64:	4621      	mov	r1, r4
 8009f66:	4628      	mov	r0, r5
 8009f68:	f000 f81a 	bl	8009fa0 <__swsetup_r>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d0cb      	beq.n	8009f08 <__swbuf_r+0x28>
 8009f70:	f04f 37ff 	mov.w	r7, #4294967295
 8009f74:	e7ea      	b.n	8009f4c <__swbuf_r+0x6c>
 8009f76:	bf00      	nop
 8009f78:	0800add4 	.word	0x0800add4
 8009f7c:	0800adf4 	.word	0x0800adf4
 8009f80:	0800adb4 	.word	0x0800adb4

08009f84 <__ascii_wctomb>:
 8009f84:	4603      	mov	r3, r0
 8009f86:	4608      	mov	r0, r1
 8009f88:	b141      	cbz	r1, 8009f9c <__ascii_wctomb+0x18>
 8009f8a:	2aff      	cmp	r2, #255	; 0xff
 8009f8c:	d904      	bls.n	8009f98 <__ascii_wctomb+0x14>
 8009f8e:	228a      	movs	r2, #138	; 0x8a
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	4770      	bx	lr
 8009f98:	2001      	movs	r0, #1
 8009f9a:	700a      	strb	r2, [r1, #0]
 8009f9c:	4770      	bx	lr
	...

08009fa0 <__swsetup_r>:
 8009fa0:	4b32      	ldr	r3, [pc, #200]	; (800a06c <__swsetup_r+0xcc>)
 8009fa2:	b570      	push	{r4, r5, r6, lr}
 8009fa4:	681d      	ldr	r5, [r3, #0]
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	b125      	cbz	r5, 8009fb6 <__swsetup_r+0x16>
 8009fac:	69ab      	ldr	r3, [r5, #24]
 8009fae:	b913      	cbnz	r3, 8009fb6 <__swsetup_r+0x16>
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f000 f985 	bl	800a2c0 <__sinit>
 8009fb6:	4b2e      	ldr	r3, [pc, #184]	; (800a070 <__swsetup_r+0xd0>)
 8009fb8:	429c      	cmp	r4, r3
 8009fba:	d10f      	bne.n	8009fdc <__swsetup_r+0x3c>
 8009fbc:	686c      	ldr	r4, [r5, #4]
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fc4:	0719      	lsls	r1, r3, #28
 8009fc6:	d42c      	bmi.n	800a022 <__swsetup_r+0x82>
 8009fc8:	06dd      	lsls	r5, r3, #27
 8009fca:	d411      	bmi.n	8009ff0 <__swsetup_r+0x50>
 8009fcc:	2309      	movs	r3, #9
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	e03e      	b.n	800a05a <__swsetup_r+0xba>
 8009fdc:	4b25      	ldr	r3, [pc, #148]	; (800a074 <__swsetup_r+0xd4>)
 8009fde:	429c      	cmp	r4, r3
 8009fe0:	d101      	bne.n	8009fe6 <__swsetup_r+0x46>
 8009fe2:	68ac      	ldr	r4, [r5, #8]
 8009fe4:	e7eb      	b.n	8009fbe <__swsetup_r+0x1e>
 8009fe6:	4b24      	ldr	r3, [pc, #144]	; (800a078 <__swsetup_r+0xd8>)
 8009fe8:	429c      	cmp	r4, r3
 8009fea:	bf08      	it	eq
 8009fec:	68ec      	ldreq	r4, [r5, #12]
 8009fee:	e7e6      	b.n	8009fbe <__swsetup_r+0x1e>
 8009ff0:	0758      	lsls	r0, r3, #29
 8009ff2:	d512      	bpl.n	800a01a <__swsetup_r+0x7a>
 8009ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ff6:	b141      	cbz	r1, 800a00a <__swsetup_r+0x6a>
 8009ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ffc:	4299      	cmp	r1, r3
 8009ffe:	d002      	beq.n	800a006 <__swsetup_r+0x66>
 800a000:	4630      	mov	r0, r6
 800a002:	f7fd fcd3 	bl	80079ac <_free_r>
 800a006:	2300      	movs	r3, #0
 800a008:	6363      	str	r3, [r4, #52]	; 0x34
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	2300      	movs	r3, #0
 800a014:	6063      	str	r3, [r4, #4]
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f043 0308 	orr.w	r3, r3, #8
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	b94b      	cbnz	r3, 800a03a <__swsetup_r+0x9a>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a030:	d003      	beq.n	800a03a <__swsetup_r+0x9a>
 800a032:	4621      	mov	r1, r4
 800a034:	4630      	mov	r0, r6
 800a036:	f000 fa05 	bl	800a444 <__smakebuf_r>
 800a03a:	89a0      	ldrh	r0, [r4, #12]
 800a03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a040:	f010 0301 	ands.w	r3, r0, #1
 800a044:	d00a      	beq.n	800a05c <__swsetup_r+0xbc>
 800a046:	2300      	movs	r3, #0
 800a048:	60a3      	str	r3, [r4, #8]
 800a04a:	6963      	ldr	r3, [r4, #20]
 800a04c:	425b      	negs	r3, r3
 800a04e:	61a3      	str	r3, [r4, #24]
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	b943      	cbnz	r3, 800a066 <__swsetup_r+0xc6>
 800a054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a058:	d1ba      	bne.n	8009fd0 <__swsetup_r+0x30>
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	0781      	lsls	r1, r0, #30
 800a05e:	bf58      	it	pl
 800a060:	6963      	ldrpl	r3, [r4, #20]
 800a062:	60a3      	str	r3, [r4, #8]
 800a064:	e7f4      	b.n	800a050 <__swsetup_r+0xb0>
 800a066:	2000      	movs	r0, #0
 800a068:	e7f7      	b.n	800a05a <__swsetup_r+0xba>
 800a06a:	bf00      	nop
 800a06c:	20000010 	.word	0x20000010
 800a070:	0800add4 	.word	0x0800add4
 800a074:	0800adf4 	.word	0x0800adf4
 800a078:	0800adb4 	.word	0x0800adb4

0800a07c <abort>:
 800a07c:	2006      	movs	r0, #6
 800a07e:	b508      	push	{r3, lr}
 800a080:	f000 fa50 	bl	800a524 <raise>
 800a084:	2001      	movs	r0, #1
 800a086:	f7f7 fb4c 	bl	8001722 <_exit>
	...

0800a08c <__sflush_r>:
 800a08c:	898a      	ldrh	r2, [r1, #12]
 800a08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a092:	4605      	mov	r5, r0
 800a094:	0710      	lsls	r0, r2, #28
 800a096:	460c      	mov	r4, r1
 800a098:	d458      	bmi.n	800a14c <__sflush_r+0xc0>
 800a09a:	684b      	ldr	r3, [r1, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dc05      	bgt.n	800a0ac <__sflush_r+0x20>
 800a0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dc02      	bgt.n	800a0ac <__sflush_r+0x20>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0ae:	2e00      	cmp	r6, #0
 800a0b0:	d0f9      	beq.n	800a0a6 <__sflush_r+0x1a>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0b8:	682f      	ldr	r7, [r5, #0]
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	d032      	beq.n	800a124 <__sflush_r+0x98>
 800a0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	075a      	lsls	r2, r3, #29
 800a0c4:	d505      	bpl.n	800a0d2 <__sflush_r+0x46>
 800a0c6:	6863      	ldr	r3, [r4, #4]
 800a0c8:	1ac0      	subs	r0, r0, r3
 800a0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0cc:	b10b      	cbz	r3, 800a0d2 <__sflush_r+0x46>
 800a0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0d0:	1ac0      	subs	r0, r0, r3
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0d8:	4628      	mov	r0, r5
 800a0da:	6a21      	ldr	r1, [r4, #32]
 800a0dc:	47b0      	blx	r6
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	d106      	bne.n	800a0f2 <__sflush_r+0x66>
 800a0e4:	6829      	ldr	r1, [r5, #0]
 800a0e6:	291d      	cmp	r1, #29
 800a0e8:	d82c      	bhi.n	800a144 <__sflush_r+0xb8>
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <__sflush_r+0x108>)
 800a0ec:	40ca      	lsrs	r2, r1
 800a0ee:	07d6      	lsls	r6, r2, #31
 800a0f0:	d528      	bpl.n	800a144 <__sflush_r+0xb8>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	6062      	str	r2, [r4, #4]
 800a0f6:	6922      	ldr	r2, [r4, #16]
 800a0f8:	04d9      	lsls	r1, r3, #19
 800a0fa:	6022      	str	r2, [r4, #0]
 800a0fc:	d504      	bpl.n	800a108 <__sflush_r+0x7c>
 800a0fe:	1c42      	adds	r2, r0, #1
 800a100:	d101      	bne.n	800a106 <__sflush_r+0x7a>
 800a102:	682b      	ldr	r3, [r5, #0]
 800a104:	b903      	cbnz	r3, 800a108 <__sflush_r+0x7c>
 800a106:	6560      	str	r0, [r4, #84]	; 0x54
 800a108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a10a:	602f      	str	r7, [r5, #0]
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d0ca      	beq.n	800a0a6 <__sflush_r+0x1a>
 800a110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a114:	4299      	cmp	r1, r3
 800a116:	d002      	beq.n	800a11e <__sflush_r+0x92>
 800a118:	4628      	mov	r0, r5
 800a11a:	f7fd fc47 	bl	80079ac <_free_r>
 800a11e:	2000      	movs	r0, #0
 800a120:	6360      	str	r0, [r4, #52]	; 0x34
 800a122:	e7c1      	b.n	800a0a8 <__sflush_r+0x1c>
 800a124:	6a21      	ldr	r1, [r4, #32]
 800a126:	2301      	movs	r3, #1
 800a128:	4628      	mov	r0, r5
 800a12a:	47b0      	blx	r6
 800a12c:	1c41      	adds	r1, r0, #1
 800a12e:	d1c7      	bne.n	800a0c0 <__sflush_r+0x34>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0c4      	beq.n	800a0c0 <__sflush_r+0x34>
 800a136:	2b1d      	cmp	r3, #29
 800a138:	d001      	beq.n	800a13e <__sflush_r+0xb2>
 800a13a:	2b16      	cmp	r3, #22
 800a13c:	d101      	bne.n	800a142 <__sflush_r+0xb6>
 800a13e:	602f      	str	r7, [r5, #0]
 800a140:	e7b1      	b.n	800a0a6 <__sflush_r+0x1a>
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a148:	81a3      	strh	r3, [r4, #12]
 800a14a:	e7ad      	b.n	800a0a8 <__sflush_r+0x1c>
 800a14c:	690f      	ldr	r7, [r1, #16]
 800a14e:	2f00      	cmp	r7, #0
 800a150:	d0a9      	beq.n	800a0a6 <__sflush_r+0x1a>
 800a152:	0793      	lsls	r3, r2, #30
 800a154:	bf18      	it	ne
 800a156:	2300      	movne	r3, #0
 800a158:	680e      	ldr	r6, [r1, #0]
 800a15a:	bf08      	it	eq
 800a15c:	694b      	ldreq	r3, [r1, #20]
 800a15e:	eba6 0807 	sub.w	r8, r6, r7
 800a162:	600f      	str	r7, [r1, #0]
 800a164:	608b      	str	r3, [r1, #8]
 800a166:	f1b8 0f00 	cmp.w	r8, #0
 800a16a:	dd9c      	ble.n	800a0a6 <__sflush_r+0x1a>
 800a16c:	4643      	mov	r3, r8
 800a16e:	463a      	mov	r2, r7
 800a170:	4628      	mov	r0, r5
 800a172:	6a21      	ldr	r1, [r4, #32]
 800a174:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a176:	47b0      	blx	r6
 800a178:	2800      	cmp	r0, #0
 800a17a:	dc06      	bgt.n	800a18a <__sflush_r+0xfe>
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	e78e      	b.n	800a0a8 <__sflush_r+0x1c>
 800a18a:	4407      	add	r7, r0
 800a18c:	eba8 0800 	sub.w	r8, r8, r0
 800a190:	e7e9      	b.n	800a166 <__sflush_r+0xda>
 800a192:	bf00      	nop
 800a194:	20400001 	.word	0x20400001

0800a198 <_fflush_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	690b      	ldr	r3, [r1, #16]
 800a19c:	4605      	mov	r5, r0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	b913      	cbnz	r3, 800a1a8 <_fflush_r+0x10>
 800a1a2:	2500      	movs	r5, #0
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	b118      	cbz	r0, 800a1b2 <_fflush_r+0x1a>
 800a1aa:	6983      	ldr	r3, [r0, #24]
 800a1ac:	b90b      	cbnz	r3, 800a1b2 <_fflush_r+0x1a>
 800a1ae:	f000 f887 	bl	800a2c0 <__sinit>
 800a1b2:	4b14      	ldr	r3, [pc, #80]	; (800a204 <_fflush_r+0x6c>)
 800a1b4:	429c      	cmp	r4, r3
 800a1b6:	d11b      	bne.n	800a1f0 <_fflush_r+0x58>
 800a1b8:	686c      	ldr	r4, [r5, #4]
 800a1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0ef      	beq.n	800a1a2 <_fflush_r+0xa>
 800a1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1c4:	07d0      	lsls	r0, r2, #31
 800a1c6:	d404      	bmi.n	800a1d2 <_fflush_r+0x3a>
 800a1c8:	0599      	lsls	r1, r3, #22
 800a1ca:	d402      	bmi.n	800a1d2 <_fflush_r+0x3a>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ce:	f7ff fcdc 	bl	8009b8a <__retarget_lock_acquire_recursive>
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	f7ff ff59 	bl	800a08c <__sflush_r>
 800a1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1dc:	4605      	mov	r5, r0
 800a1de:	07da      	lsls	r2, r3, #31
 800a1e0:	d4e0      	bmi.n	800a1a4 <_fflush_r+0xc>
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	059b      	lsls	r3, r3, #22
 800a1e6:	d4dd      	bmi.n	800a1a4 <_fflush_r+0xc>
 800a1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ea:	f7ff fccf 	bl	8009b8c <__retarget_lock_release_recursive>
 800a1ee:	e7d9      	b.n	800a1a4 <_fflush_r+0xc>
 800a1f0:	4b05      	ldr	r3, [pc, #20]	; (800a208 <_fflush_r+0x70>)
 800a1f2:	429c      	cmp	r4, r3
 800a1f4:	d101      	bne.n	800a1fa <_fflush_r+0x62>
 800a1f6:	68ac      	ldr	r4, [r5, #8]
 800a1f8:	e7df      	b.n	800a1ba <_fflush_r+0x22>
 800a1fa:	4b04      	ldr	r3, [pc, #16]	; (800a20c <_fflush_r+0x74>)
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	bf08      	it	eq
 800a200:	68ec      	ldreq	r4, [r5, #12]
 800a202:	e7da      	b.n	800a1ba <_fflush_r+0x22>
 800a204:	0800add4 	.word	0x0800add4
 800a208:	0800adf4 	.word	0x0800adf4
 800a20c:	0800adb4 	.word	0x0800adb4

0800a210 <std>:
 800a210:	2300      	movs	r3, #0
 800a212:	b510      	push	{r4, lr}
 800a214:	4604      	mov	r4, r0
 800a216:	e9c0 3300 	strd	r3, r3, [r0]
 800a21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a21e:	6083      	str	r3, [r0, #8]
 800a220:	8181      	strh	r1, [r0, #12]
 800a222:	6643      	str	r3, [r0, #100]	; 0x64
 800a224:	81c2      	strh	r2, [r0, #14]
 800a226:	6183      	str	r3, [r0, #24]
 800a228:	4619      	mov	r1, r3
 800a22a:	2208      	movs	r2, #8
 800a22c:	305c      	adds	r0, #92	; 0x5c
 800a22e:	f7fd fbb5 	bl	800799c <memset>
 800a232:	4b05      	ldr	r3, [pc, #20]	; (800a248 <std+0x38>)
 800a234:	6224      	str	r4, [r4, #32]
 800a236:	6263      	str	r3, [r4, #36]	; 0x24
 800a238:	4b04      	ldr	r3, [pc, #16]	; (800a24c <std+0x3c>)
 800a23a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a23c:	4b04      	ldr	r3, [pc, #16]	; (800a250 <std+0x40>)
 800a23e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a240:	4b04      	ldr	r3, [pc, #16]	; (800a254 <std+0x44>)
 800a242:	6323      	str	r3, [r4, #48]	; 0x30
 800a244:	bd10      	pop	{r4, pc}
 800a246:	bf00      	nop
 800a248:	0800a55d 	.word	0x0800a55d
 800a24c:	0800a57f 	.word	0x0800a57f
 800a250:	0800a5b7 	.word	0x0800a5b7
 800a254:	0800a5db 	.word	0x0800a5db

0800a258 <_cleanup_r>:
 800a258:	4901      	ldr	r1, [pc, #4]	; (800a260 <_cleanup_r+0x8>)
 800a25a:	f000 b8af 	b.w	800a3bc <_fwalk_reent>
 800a25e:	bf00      	nop
 800a260:	0800a199 	.word	0x0800a199

0800a264 <__sfmoreglue>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	2568      	movs	r5, #104	; 0x68
 800a268:	1e4a      	subs	r2, r1, #1
 800a26a:	4355      	muls	r5, r2
 800a26c:	460e      	mov	r6, r1
 800a26e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a272:	f7fd fbe7 	bl	8007a44 <_malloc_r>
 800a276:	4604      	mov	r4, r0
 800a278:	b140      	cbz	r0, 800a28c <__sfmoreglue+0x28>
 800a27a:	2100      	movs	r1, #0
 800a27c:	e9c0 1600 	strd	r1, r6, [r0]
 800a280:	300c      	adds	r0, #12
 800a282:	60a0      	str	r0, [r4, #8]
 800a284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a288:	f7fd fb88 	bl	800799c <memset>
 800a28c:	4620      	mov	r0, r4
 800a28e:	bd70      	pop	{r4, r5, r6, pc}

0800a290 <__sfp_lock_acquire>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__sfp_lock_acquire+0x8>)
 800a292:	f7ff bc7a 	b.w	8009b8a <__retarget_lock_acquire_recursive>
 800a296:	bf00      	nop
 800a298:	20001d24 	.word	0x20001d24

0800a29c <__sfp_lock_release>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__sfp_lock_release+0x8>)
 800a29e:	f7ff bc75 	b.w	8009b8c <__retarget_lock_release_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	20001d24 	.word	0x20001d24

0800a2a8 <__sinit_lock_acquire>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__sinit_lock_acquire+0x8>)
 800a2aa:	f7ff bc6e 	b.w	8009b8a <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20001d1f 	.word	0x20001d1f

0800a2b4 <__sinit_lock_release>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__sinit_lock_release+0x8>)
 800a2b6:	f7ff bc69 	b.w	8009b8c <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20001d1f 	.word	0x20001d1f

0800a2c0 <__sinit>:
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	f7ff fff0 	bl	800a2a8 <__sinit_lock_acquire>
 800a2c8:	69a3      	ldr	r3, [r4, #24]
 800a2ca:	b11b      	cbz	r3, 800a2d4 <__sinit+0x14>
 800a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d0:	f7ff bff0 	b.w	800a2b4 <__sinit_lock_release>
 800a2d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a2da:	4b13      	ldr	r3, [pc, #76]	; (800a328 <__sinit+0x68>)
 800a2dc:	4a13      	ldr	r2, [pc, #76]	; (800a32c <__sinit+0x6c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2e2:	42a3      	cmp	r3, r4
 800a2e4:	bf08      	it	eq
 800a2e6:	2301      	moveq	r3, #1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	bf08      	it	eq
 800a2ec:	61a3      	streq	r3, [r4, #24]
 800a2ee:	f000 f81f 	bl	800a330 <__sfp>
 800a2f2:	6060      	str	r0, [r4, #4]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 f81b 	bl	800a330 <__sfp>
 800a2fa:	60a0      	str	r0, [r4, #8]
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 f817 	bl	800a330 <__sfp>
 800a302:	2200      	movs	r2, #0
 800a304:	2104      	movs	r1, #4
 800a306:	60e0      	str	r0, [r4, #12]
 800a308:	6860      	ldr	r0, [r4, #4]
 800a30a:	f7ff ff81 	bl	800a210 <std>
 800a30e:	2201      	movs	r2, #1
 800a310:	2109      	movs	r1, #9
 800a312:	68a0      	ldr	r0, [r4, #8]
 800a314:	f7ff ff7c 	bl	800a210 <std>
 800a318:	2202      	movs	r2, #2
 800a31a:	2112      	movs	r1, #18
 800a31c:	68e0      	ldr	r0, [r4, #12]
 800a31e:	f7ff ff77 	bl	800a210 <std>
 800a322:	2301      	movs	r3, #1
 800a324:	61a3      	str	r3, [r4, #24]
 800a326:	e7d1      	b.n	800a2cc <__sinit+0xc>
 800a328:	0800aa30 	.word	0x0800aa30
 800a32c:	0800a259 	.word	0x0800a259

0800a330 <__sfp>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	4607      	mov	r7, r0
 800a334:	f7ff ffac 	bl	800a290 <__sfp_lock_acquire>
 800a338:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <__sfp+0x84>)
 800a33a:	681e      	ldr	r6, [r3, #0]
 800a33c:	69b3      	ldr	r3, [r6, #24]
 800a33e:	b913      	cbnz	r3, 800a346 <__sfp+0x16>
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff ffbd 	bl	800a2c0 <__sinit>
 800a346:	3648      	adds	r6, #72	; 0x48
 800a348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	d503      	bpl.n	800a358 <__sfp+0x28>
 800a350:	6833      	ldr	r3, [r6, #0]
 800a352:	b30b      	cbz	r3, 800a398 <__sfp+0x68>
 800a354:	6836      	ldr	r6, [r6, #0]
 800a356:	e7f7      	b.n	800a348 <__sfp+0x18>
 800a358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a35c:	b9d5      	cbnz	r5, 800a394 <__sfp+0x64>
 800a35e:	4b16      	ldr	r3, [pc, #88]	; (800a3b8 <__sfp+0x88>)
 800a360:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a364:	60e3      	str	r3, [r4, #12]
 800a366:	6665      	str	r5, [r4, #100]	; 0x64
 800a368:	f7ff fc0e 	bl	8009b88 <__retarget_lock_init_recursive>
 800a36c:	f7ff ff96 	bl	800a29c <__sfp_lock_release>
 800a370:	2208      	movs	r2, #8
 800a372:	4629      	mov	r1, r5
 800a374:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a378:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a37c:	6025      	str	r5, [r4, #0]
 800a37e:	61a5      	str	r5, [r4, #24]
 800a380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a384:	f7fd fb0a 	bl	800799c <memset>
 800a388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a38c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a390:	4620      	mov	r0, r4
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a394:	3468      	adds	r4, #104	; 0x68
 800a396:	e7d9      	b.n	800a34c <__sfp+0x1c>
 800a398:	2104      	movs	r1, #4
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7ff ff62 	bl	800a264 <__sfmoreglue>
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	6030      	str	r0, [r6, #0]
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1d5      	bne.n	800a354 <__sfp+0x24>
 800a3a8:	f7ff ff78 	bl	800a29c <__sfp_lock_release>
 800a3ac:	230c      	movs	r3, #12
 800a3ae:	603b      	str	r3, [r7, #0]
 800a3b0:	e7ee      	b.n	800a390 <__sfp+0x60>
 800a3b2:	bf00      	nop
 800a3b4:	0800aa30 	.word	0x0800aa30
 800a3b8:	ffff0001 	.word	0xffff0001

0800a3bc <_fwalk_reent>:
 800a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	4688      	mov	r8, r1
 800a3c4:	2700      	movs	r7, #0
 800a3c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a3d2:	d505      	bpl.n	800a3e0 <_fwalk_reent+0x24>
 800a3d4:	6824      	ldr	r4, [r4, #0]
 800a3d6:	2c00      	cmp	r4, #0
 800a3d8:	d1f7      	bne.n	800a3ca <_fwalk_reent+0xe>
 800a3da:	4638      	mov	r0, r7
 800a3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e0:	89ab      	ldrh	r3, [r5, #12]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d907      	bls.n	800a3f6 <_fwalk_reent+0x3a>
 800a3e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	d003      	beq.n	800a3f6 <_fwalk_reent+0x3a>
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	47c0      	blx	r8
 800a3f4:	4307      	orrs	r7, r0
 800a3f6:	3568      	adds	r5, #104	; 0x68
 800a3f8:	e7e9      	b.n	800a3ce <_fwalk_reent+0x12>

0800a3fa <__swhatbuf_r>:
 800a3fa:	b570      	push	{r4, r5, r6, lr}
 800a3fc:	460e      	mov	r6, r1
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	4614      	mov	r4, r2
 800a404:	2900      	cmp	r1, #0
 800a406:	461d      	mov	r5, r3
 800a408:	b096      	sub	sp, #88	; 0x58
 800a40a:	da07      	bge.n	800a41c <__swhatbuf_r+0x22>
 800a40c:	2300      	movs	r3, #0
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	89b3      	ldrh	r3, [r6, #12]
 800a412:	061a      	lsls	r2, r3, #24
 800a414:	d410      	bmi.n	800a438 <__swhatbuf_r+0x3e>
 800a416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a41a:	e00e      	b.n	800a43a <__swhatbuf_r+0x40>
 800a41c:	466a      	mov	r2, sp
 800a41e:	f000 f903 	bl	800a628 <_fstat_r>
 800a422:	2800      	cmp	r0, #0
 800a424:	dbf2      	blt.n	800a40c <__swhatbuf_r+0x12>
 800a426:	9a01      	ldr	r2, [sp, #4]
 800a428:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a42c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a430:	425a      	negs	r2, r3
 800a432:	415a      	adcs	r2, r3
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	e7ee      	b.n	800a416 <__swhatbuf_r+0x1c>
 800a438:	2340      	movs	r3, #64	; 0x40
 800a43a:	2000      	movs	r0, #0
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	b016      	add	sp, #88	; 0x58
 800a440:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a444 <__smakebuf_r>:
 800a444:	898b      	ldrh	r3, [r1, #12]
 800a446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a448:	079d      	lsls	r5, r3, #30
 800a44a:	4606      	mov	r6, r0
 800a44c:	460c      	mov	r4, r1
 800a44e:	d507      	bpl.n	800a460 <__smakebuf_r+0x1c>
 800a450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	6123      	str	r3, [r4, #16]
 800a458:	2301      	movs	r3, #1
 800a45a:	6163      	str	r3, [r4, #20]
 800a45c:	b002      	add	sp, #8
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	466a      	mov	r2, sp
 800a462:	ab01      	add	r3, sp, #4
 800a464:	f7ff ffc9 	bl	800a3fa <__swhatbuf_r>
 800a468:	9900      	ldr	r1, [sp, #0]
 800a46a:	4605      	mov	r5, r0
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7fd fae9 	bl	8007a44 <_malloc_r>
 800a472:	b948      	cbnz	r0, 800a488 <__smakebuf_r+0x44>
 800a474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a478:	059a      	lsls	r2, r3, #22
 800a47a:	d4ef      	bmi.n	800a45c <__smakebuf_r+0x18>
 800a47c:	f023 0303 	bic.w	r3, r3, #3
 800a480:	f043 0302 	orr.w	r3, r3, #2
 800a484:	81a3      	strh	r3, [r4, #12]
 800a486:	e7e3      	b.n	800a450 <__smakebuf_r+0xc>
 800a488:	4b0d      	ldr	r3, [pc, #52]	; (800a4c0 <__smakebuf_r+0x7c>)
 800a48a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	6020      	str	r0, [r4, #0]
 800a490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a494:	81a3      	strh	r3, [r4, #12]
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	6120      	str	r0, [r4, #16]
 800a49a:	6163      	str	r3, [r4, #20]
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	b15b      	cbz	r3, 800a4b8 <__smakebuf_r+0x74>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4a6:	f000 f8d1 	bl	800a64c <_isatty_r>
 800a4aa:	b128      	cbz	r0, 800a4b8 <__smakebuf_r+0x74>
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	f043 0301 	orr.w	r3, r3, #1
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	89a0      	ldrh	r0, [r4, #12]
 800a4ba:	4305      	orrs	r5, r0
 800a4bc:	81a5      	strh	r5, [r4, #12]
 800a4be:	e7cd      	b.n	800a45c <__smakebuf_r+0x18>
 800a4c0:	0800a259 	.word	0x0800a259

0800a4c4 <_malloc_usable_size_r>:
 800a4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c8:	1f18      	subs	r0, r3, #4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bfbc      	itt	lt
 800a4ce:	580b      	ldrlt	r3, [r1, r0]
 800a4d0:	18c0      	addlt	r0, r0, r3
 800a4d2:	4770      	bx	lr

0800a4d4 <_raise_r>:
 800a4d4:	291f      	cmp	r1, #31
 800a4d6:	b538      	push	{r3, r4, r5, lr}
 800a4d8:	4604      	mov	r4, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	d904      	bls.n	800a4e8 <_raise_r+0x14>
 800a4de:	2316      	movs	r3, #22
 800a4e0:	6003      	str	r3, [r0, #0]
 800a4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4ea:	b112      	cbz	r2, 800a4f2 <_raise_r+0x1e>
 800a4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4f0:	b94b      	cbnz	r3, 800a506 <_raise_r+0x32>
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 f830 	bl	800a558 <_getpid_r>
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a502:	f000 b817 	b.w	800a534 <_kill_r>
 800a506:	2b01      	cmp	r3, #1
 800a508:	d00a      	beq.n	800a520 <_raise_r+0x4c>
 800a50a:	1c59      	adds	r1, r3, #1
 800a50c:	d103      	bne.n	800a516 <_raise_r+0x42>
 800a50e:	2316      	movs	r3, #22
 800a510:	6003      	str	r3, [r0, #0]
 800a512:	2001      	movs	r0, #1
 800a514:	e7e7      	b.n	800a4e6 <_raise_r+0x12>
 800a516:	2400      	movs	r4, #0
 800a518:	4628      	mov	r0, r5
 800a51a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a51e:	4798      	blx	r3
 800a520:	2000      	movs	r0, #0
 800a522:	e7e0      	b.n	800a4e6 <_raise_r+0x12>

0800a524 <raise>:
 800a524:	4b02      	ldr	r3, [pc, #8]	; (800a530 <raise+0xc>)
 800a526:	4601      	mov	r1, r0
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	f7ff bfd3 	b.w	800a4d4 <_raise_r>
 800a52e:	bf00      	nop
 800a530:	20000010 	.word	0x20000010

0800a534 <_kill_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	2300      	movs	r3, #0
 800a538:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_kill_r+0x20>)
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	4611      	mov	r1, r2
 800a540:	602b      	str	r3, [r5, #0]
 800a542:	f7f7 f8de 	bl	8001702 <_kill>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d102      	bne.n	800a550 <_kill_r+0x1c>
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	b103      	cbz	r3, 800a550 <_kill_r+0x1c>
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	bd38      	pop	{r3, r4, r5, pc}
 800a552:	bf00      	nop
 800a554:	20001d18 	.word	0x20001d18

0800a558 <_getpid_r>:
 800a558:	f7f7 b8cc 	b.w	80016f4 <_getpid>

0800a55c <__sread>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	460c      	mov	r4, r1
 800a560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a564:	f000 f894 	bl	800a690 <_read_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	bfab      	itete	ge
 800a56c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a56e:	89a3      	ldrhlt	r3, [r4, #12]
 800a570:	181b      	addge	r3, r3, r0
 800a572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a576:	bfac      	ite	ge
 800a578:	6563      	strge	r3, [r4, #84]	; 0x54
 800a57a:	81a3      	strhlt	r3, [r4, #12]
 800a57c:	bd10      	pop	{r4, pc}

0800a57e <__swrite>:
 800a57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	461f      	mov	r7, r3
 800a584:	898b      	ldrh	r3, [r1, #12]
 800a586:	4605      	mov	r5, r0
 800a588:	05db      	lsls	r3, r3, #23
 800a58a:	460c      	mov	r4, r1
 800a58c:	4616      	mov	r6, r2
 800a58e:	d505      	bpl.n	800a59c <__swrite+0x1e>
 800a590:	2302      	movs	r3, #2
 800a592:	2200      	movs	r2, #0
 800a594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a598:	f000 f868 	bl	800a66c <_lseek_r>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	4632      	mov	r2, r6
 800a5a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	463b      	mov	r3, r7
 800a5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b2:	f000 b817 	b.w	800a5e4 <_write_r>

0800a5b6 <__sseek>:
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f000 f855 	bl	800a66c <_lseek_r>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	bf15      	itete	ne
 800a5c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5d2:	81a3      	strheq	r3, [r4, #12]
 800a5d4:	bf18      	it	ne
 800a5d6:	81a3      	strhne	r3, [r4, #12]
 800a5d8:	bd10      	pop	{r4, pc}

0800a5da <__sclose>:
 800a5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5de:	f000 b813 	b.w	800a608 <_close_r>
	...

0800a5e4 <_write_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4d05      	ldr	r5, [pc, #20]	; (800a604 <_write_r+0x20>)
 800a5f0:	602a      	str	r2, [r5, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f7f7 f8bc 	bl	8001770 <_write>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_write_r+0x1e>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_write_r+0x1e>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	20001d18 	.word	0x20001d18

0800a608 <_close_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	2300      	movs	r3, #0
 800a60c:	4d05      	ldr	r5, [pc, #20]	; (800a624 <_close_r+0x1c>)
 800a60e:	4604      	mov	r4, r0
 800a610:	4608      	mov	r0, r1
 800a612:	602b      	str	r3, [r5, #0]
 800a614:	f7f7 f8c8 	bl	80017a8 <_close>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d102      	bne.n	800a622 <_close_r+0x1a>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	b103      	cbz	r3, 800a622 <_close_r+0x1a>
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	20001d18 	.word	0x20001d18

0800a628 <_fstat_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	2300      	movs	r3, #0
 800a62c:	4d06      	ldr	r5, [pc, #24]	; (800a648 <_fstat_r+0x20>)
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	f7f7 f8c2 	bl	80017be <_fstat>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d102      	bne.n	800a644 <_fstat_r+0x1c>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	b103      	cbz	r3, 800a644 <_fstat_r+0x1c>
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	bf00      	nop
 800a648:	20001d18 	.word	0x20001d18

0800a64c <_isatty_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	2300      	movs	r3, #0
 800a650:	4d05      	ldr	r5, [pc, #20]	; (800a668 <_isatty_r+0x1c>)
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7f7 f8c0 	bl	80017dc <_isatty>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_isatty_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_isatty_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	20001d18 	.word	0x20001d18

0800a66c <_lseek_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	4611      	mov	r1, r2
 800a674:	2200      	movs	r2, #0
 800a676:	4d05      	ldr	r5, [pc, #20]	; (800a68c <_lseek_r+0x20>)
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f7 f8b8 	bl	80017f0 <_lseek>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_lseek_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_lseek_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	20001d18 	.word	0x20001d18

0800a690 <_read_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	4611      	mov	r1, r2
 800a698:	2200      	movs	r2, #0
 800a69a:	4d05      	ldr	r5, [pc, #20]	; (800a6b0 <_read_r+0x20>)
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f7 f849 	bl	8001736 <_read>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_read_r+0x1e>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_read_r+0x1e>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20001d18 	.word	0x20001d18

0800a6b4 <_init>:
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b6:	bf00      	nop
 800a6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ba:	bc08      	pop	{r3}
 800a6bc:	469e      	mov	lr, r3
 800a6be:	4770      	bx	lr

0800a6c0 <_fini>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr
